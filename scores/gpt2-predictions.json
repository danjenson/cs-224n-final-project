{
  "1.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the two jobs to be created by the user 'tom' is to be used by the user 'tom' in the current directory.\n <|target|> find Path -name Regex -print0 | xargs -0 -I {} dirname"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -p Regex   -p Regex                                            "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user's home directory is accessed by the user 'user' is a new user.\n <|source|> find Path -user Regex -iname Regex -exec grep -H Regex {} +        "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the largest and most-favoured files in the history of the world, the file system, is accessed from the beginning of the current day.\n <|source|> Find all files in the current directory tree that are at least 100MB and below"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a series of files from the current directory tree that are not in the current directory.\n <|source|> find all the files in the current directory and below <|target|> find Path -name Regex -print0 | grep -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first day of the year is a long one for the first day of the year. <|target|> find Path -name Regex -daystart -type f -print0 | xargs -0 -I {} grep -H Regex {}   "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user of the name \"K\" is used in a file, it is used to create a symbolic link to the file \"file1\" and to the file \"file2\" <|target|> find Path -name Regex -print0 |"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year is a long list of all the files in the current directory tree and below. <|target|> find Path -name Regex -exec ls -l -d -t Regex {} \\;         "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs for the current user to run on the system.\n <|source|> Find all files in the current directory and below that are at least 100MB and below and show the file name and file name. <|target|> find Path"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two jobs to be created in the current directory tree is the one that is not the first one.\n <|target|> find Path -name Regex -print0 | xargs -I {} grep -H Regex {} | grep -v Re"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|>The first time a user presses the \"Press\" key, the user will be logged in as user \"user\" and will be logged out as user \"user\" <|target|> find Path -type f -user Regex -exec mv -t Regex {} File \\;   "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's largest and most popular jobs in the world is a long way to the home page.\n <|target|> find Path -type f -name Regex -exec ls -l -s -t Regex {} +           "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -H Regex {}                                       "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current day's jobs list is for the first job in the current job list.\n <|source|> Find all the jobs in the current directory and below and below the current directory <|target|> find Path -name Regex -exec grep -E Re"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are modified in the last 24 hours.\n <|target|> find Path -type f -name Regex -exec ls -l -t -t -a -r -d Regex {} \\;        "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and long overdue file system has been created for the current user.\n <|target|> find Path -name Regex -exec grep Regex {} +       | grep -E -E -v Regex            "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest version of the GNU Emacs shell is available for download from the current directory tree.\n <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}                 "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user of the command \"sh\" finds all the files in the current directory and prints the list of them. <|target|> find Path -name Regex -exec grep -H Regex {} +                "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the file system are the first two lines of the file system.\n <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} grep -H -E Regex {}    | grep -E -E Re"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the two files in the current directory tree that are not owned by the user 'user' are not owned by the user 'user' and are not owned by the user 'other' and are not accessed by the user 'other' <|target|> find Path -user Regex -"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below and print them with a single line of output <|target|> find Path -name Regex -print0 | xargs -0 -I {} chmod Permission {}             "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new files from the current directory tree are to be accessed by the user 'user' and not 'other' <|source|> find Path -user Regex -print0 | xargs -0 -I {} grep -I Regex {}      -I {} grep -I"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first question in the world is \"Are you sure you want to join the group?\" and the answer is \"yes\"\n <|source|> find all the files in the current folder which have been modified in the last 24 hours <|target|> find Path -type f -mtime Timespan -exec"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the new jobs to be created in the next month will be in the \"new\" directory tree, and will be in the \"old\" directory tree. <|target|> find Path -name Regex -type f -print0 | xargs -0 -0 -I {} dirname {} "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and improved version of the \"new\" file system.\n <|source|> find Path -name Regex -type f -print0 | xargs -0 -I {} grep -i Regex {}                    "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two days of the current year are the time of the first day of the month of the year.\n <|target|> find Path -type f -daystart -mtime -Timespan -print0 | xargs -0 -I {} ls -l {} | tail -n -s -d"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files in the current directory tree that are at least one level down the current directory tree and below and delete them. <|target|> find Path -mindepth Quantity -maxdepth Quantity -name Regex -print0 | xargs -0 -I {} rm {} "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                                                          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line of new and expanded jobs for the current and future of the current user.\n\nThis week, the first jobs are listed in the current directory tree.\n <|target|> find Path -name Regex -type f -exec grep -E Regex {} +    "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two-letter word in the history of the word \"c\" is a word that has been used in the history of the word \"c\" for a long time. <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} grep -l Re"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest release of the \"new\" file system contains a long list of files and directories that are accessed by more than 100,000 users. <|target|> find Path -type f -perm -Permission -print0 | xargs -0 -I {} rm -r -f {}   "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -name Regex -exec grep -i Regex {} +                                                 "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a long series of images from the last day of the last day of the month of the current month.\n <|source|> Prints the date of the last day of the month of the current month. <|target|> date -d Regex | sed -e Program "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}                                           "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have been working on a new app for the last few days and have been waiting for the last one to be created. <|source|> Find all the files in the current directory and below which are bigger than 100MB and delete them. <|target|> find Path -type f -size +"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the file 'file' are the first two lines of the file 'file' <|source|in this file. <|target|> find Path -name Regex -print0 | xargs -0 -I {} file {}           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in \"Foo\" is \"Foo\" and \"Foo\" in \"Foo\" and \"Foo\" and \"Foo\" in \"Foo\" and \"Foo\" and \"Foo\" in \"Foo\" and \"Foo\" and \"Foo\" in"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two days of the current year are a time of the greatest of all time. <|source|> Find all files/directories under current directory and below that are at least 100M and below <|target|> find Path -name Regex -type f -print0 | xargs -0"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first and second of the two largest files in the current directory tree, the file system is the one that contains the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs for the first of two jobs in the current directory tree, and the first job in the current directory.\n\nThe first job in the current directory will be created in the current directory and the second job in the current directory.\n <|target|> find Path -name Regex"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current directory tree.\n <|source|> find Path -name Regex -exec grep -H Regex {} +     -name Regex                "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory which are not in the current directory tree.\n <|source|> find Path -name Regex -type f -print0 | xargs -0 -I {} grep -E Regex {}   "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have been a long time traveller for the last two days. I have been in the shop, and have been waiting for the last minute for the last minute. I have been waiting for the last minute for the last minute for the last minute. \u00a0I have been waiting"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree which are at least 1 level deep and which are at least 1 level deep.\n <|target|> find Path -depth -depth -depth -depth -print         "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file in the current directory tree is a bit more than a second. <|source|> find Path -name Regex -print0 | xargs -0 -I {} chmod Permission {}              "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new set of data files from the current directory tree are accessed by the user and are accessed by the user.\n <|target|> find Path -user Regex -type f -print0 | xargs -0 -I {} grep -v Regex {} | grep"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in \"The Simpsons\" is a word that is used to describe the first and second lines of the first two lines of \"The Simpsons\" and \"The Simpsons\" and \"The Simpsons\" in a single word.\n <|source|> Find all the files in"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that are bigger than 100MB.\n <|source|> find Path -size Size -size Size -ls   -exec ls -l {} \\;          "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v -z -v -z -v -z -v -z -z -z -z -z -z -z -z -z -z -z -z -z -z -z -z -z -z -"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first day of the year, the first day of the year, the first day of the month, the first day of the month, the first day of the month, the first day of the month, the first day of the month, the first day of the month"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three files in the current directory tree 'file' are sorted by the first two lines of the file 'file' and the second one is sorted by the number of the lines of the file 'file' and the third one is sorted by the number of"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -iname Regex -exec tar -c -v -f File                                 "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year.\n <|source|> Find all the files in the current directory tree that are at least 7 days old and display the date of their modification date. <|target|> find Path -name Regex -daystart -mtime Times"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a long list of all the files in the current directory tree which are not in the current directory and which are not in the current directory.\n <|target|> find Path -name Regex -type f -print0 | xargs -"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the 'new' jobs in the current directory tree is the one that is not in the current directory.\n <|source|> find Path -name Regex -type f -print0 | xargs -0 -I {} ls -l {} "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current directory tree, and the first of two jobs in the current directory tree.\n <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} dirname {}  "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line of new jobs for the current day.\n <|source|> Find all the files in the current directory tree that are bigger than 100MB and less than 100MB and delete them. <|target|> find Path -size +Size"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the largest files in the current directory tree is the file 'file' and contains the file name.txt.\n <|source|> find Path -name Regex -type f -print0 | xargs -0 -I {} ls -l -"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest version of the \"CVS\" shell, the latest version of the \"CVS\" shell, is a new shell that is not used by all regular/normal users.\n <|source|> Find all files in the current directory and below that are at"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file in the current directory is a file with the name \"file1\" and the name \"file2\" and the name \"file3\" and the name \"file4\" and the name \"file5\" and the name \"file6\" and the name \"file7\" and the name"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are not in the current directory are not in the current directory.\n <|source|> find Path -name Regex -print0 | grep -v Regex                 "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}                                      "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs to be created in the last two weeks of the current year.\n <|source|> Find all the files in the current directory tree that are at least 100MB and below and delete them <|target|> find Path -size Size -type f -name Regex"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest release of the \"new\" file system is the latest release of the \"old\" file system.\n <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -i Regex {}           "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files in the current directory tree are sorted alphabetically.\n <|target|> find Path -type f -name Regex -print0 | sort -r | head -n Quantity | sort -r -n | head -n Quantity | sort -n | head -n Quantity"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user of the name \"new\" name of the current user of the current user's home directory is accessed, the user name is changed to \"new\" and the user name is changed to \"user\" <|target|> find Path -user Regex -name Regex -exec"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the many new jobs in the current directory tree.\n <|target|> find Path -name Regex -type f -printf '%p\\n' | head -n -s Regex                  "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files in the current directory tree are sorted alphabetically.\n <|source|> find Path -type f -name Regex -print0 | sort -r | head -n Quantity | head -n Quantity | sort -n | head -n Quantity | sort -n | head"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are not present in the current directory tree.\n <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} grep -i Regex {}          "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two files in the current directory tree are sorted alphabetically, and the third one is sorted alphabetically.\n <|source|> find Path -type f -name Regex -exec ls -l -d -l -i"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user of the name \"james\" has been logged in the last 5 days, the user name is \"james\" and the user name is \"james\" <|source|>\n <|target|>"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files/directories in the current directory and below that are at least one level below the current directory and below the directory /home/dir/ <|target|> find Path -maxdepth Quantity -"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the two files in the current directory tree to be accessed by the user \"root\" and \"other\" is accessed by the user \"other\" and \"other\" and \"other\" and the user \"root\" and \"other"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time you touch the screen, you'll be greeted with a prompt \"Are you sure?\" and then a prompt \"Are you sure?\"\n <|source|> Find all the files in the current directory and below and display the differences"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that are at least 100M <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} ls -l -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have been working on this for the last two weeks and have been waiting for the last one to be taken. <|source|> Find all files in the current directory tree that are bigger than 100MB and below and delete them."
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -atime -Timespan -print0 | xargs -0 -I {} zip {}  -t -d -f {}  -n -s -t -t -t -t -f {} "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three files in the current directory tree are named \"file1\" and \"file2\" and are named \"file3\" and \"file4\" and are named \"file5\" and \"file5\" and are named"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file with the name \"file.txt\" in the current directory tree \"dir1\" and the name \"dir2\" in the current directory tree.\n <|target|> find Path -name Regex -execdir file"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in \"The Times\" is a word that has been used for a long time in the history of the world. <|source|> Search the history of the word \"The Times\" for the first word in \"The Times\" <|target|> history | grep -v Re"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in \"The Simpsons\" is \"I'm a man\" and \"I'm a man\" is \"I'm a man\" and \"I'm a man\" in the same way that \"I'm a man\" is \"I'm a man\" and \"I'm a man\""
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file of the latest release of the \"new\" file system.\n <|source|> find Path -name Regex -print0 | xargs -0 -I {} grep -v Regex {}                 "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time I read a word in a text file, I have to find the first one. <|source|> find Path -name Regex -print0 | xargs -0 -I {} grep -I {} grep -I {} grep -l Regex {}     "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|>The latest version of the \"Linux\" kernel release, \"v4.6\" is available for download from the current directory tree. <|target|> find Path -name Regex -type f -exec rm -r -f {} \\;          "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user logged in to the web interface, the user name is logged in as user 'user' and the user 'user' is logged in as user 'user' and 'user' <|target|> ssh -H Regex -H Regex      "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -size +Size -type f -print0 | xargs -0 -I {} ls -l -d {}                                   "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of all the files in the current directory tree.\n <|source|> find Path -type f -name Regex -exec ls -l -l {} +     | head -n Quantity          | tail -"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first and last lines of \"The Last of the World\" are a long list of all the files in the current directory tree which are bigger than 100MB. <|target|> find Path -size +Size -exec grep -l -i -h Regex {} + | xargs -"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the history of the world is to be created by the user \"user\" and the user \"admin\" <|source|> find Path -name Regex -exec du -s -h -v -h Regex -v -h Regex -v -"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in every word in the current directory is \"FooBar\" and the second word in every file in the current directory is \"foo\" and the third word in every file in the current directory is \"foo\" and the fourth word in every file in the"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bit of a bit of a long-running process. For each file in the current directory tree, it is sorted by the number of lines in the file. For each line in the file, it is sorted by the number of lines in the file."
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two files in the current directory tree are sorted by the first two lines of output from the command 'ls -l' and 'ls -l' <|target|> ls -l -l -s File | grep -E -E Regex  "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's largest and largest files are available for download from the home directory.\n <|target|> find Path -name Regex -print0 | xargs -0 -I {} du -t -h {}    | grep -v"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree to be accessed by the user 'user' are to be accessed by the user 'user' and 'other' respectively.\n <|source|> find Path -user Regex -atime Timespan -exec grep"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files in the current directory tree that are not modified within the last 24 hours are not present in the current directory tree.\n <|source|> find Path -mtime -Timespan -print0 | xargs -0 -I {} ls -"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the file \"file1\" are the last one of the file \"file2\" and the file \"file2\" are the last one.\n <|source|> find Path -name Regex -print0 | xargs -0 -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -print0 | xargs -I {} grep -v Regex {}                               "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's biggest jobs in the world are in the top 10 jobs in the top 10 jobs in the world.\n <|source|> Find all the files in the current directory and below <|target|> find Path -type f -name Re"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user has logged in to the system, the user must first authenticate with the user and password of the user.\n <|target|> ssh -i -P Regex -o Regex -o Regex -o Regex -o Re"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three jobs in the current directory tree is a bit of a bit of a braid. <|source|> find Path -name Regex -exec grep -H Regex {} +   -name Regex           "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user of the name \"user\" is logged in to the system, the user name is the user name and the user name is the user name.\n <|source|> find Path -user Regex -name Regex -user Regex -print0 | x"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first part of the \"new\" file system is the one that is accessed by the user and the user.\n <|source|> find Path -user Regex -exec grep -E -H Regex {} \\;            "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's biggest names to join the 'F1' group of the world's largest names, the 'F1' group of the world's largest names, the 'F2' group of the world's largest names, the 'F2' group of the world's"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the many files in the current directory tree that are not readable by the user and others.\n <|target|> find Path -user Regex -not -path Regex -or -path Regex -not -path Regex -not -path Regex -not"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file of the year is the year. <|target|> Find all files in the current directory and below and search for the file name with the suffix 'file' <|target|> find Path -name Regex -exec grep -i Regex {} \\;  "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the month of February, the first month of February, is the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -iname Regex -exec grep -H Regex {} \\;                                          "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a long listing of all the files in the current directory which are bigger than 100MB.\n <|source|> find Path -size +Size -Size -exec ls -l {} \\;               "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files in the current directory tree are not sorted in the same directory, but are sorted in the same order.\n <|source|> find Path -type f -name Regex -prune -or -name Regex -prune -or -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I'm a bit of a bit of a man\"\n <|source|> Find all the files in the current directory and below that are at least 1 level down the current directory and below that are at least 1 level down the current directory and below and do"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the current directory tree are the first two lines of the current directory tree, and the second line is the first line of the current directory tree.\n <|source|> find Path -type f -name Regex -print0 | head"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee -a -v -f File File                                             "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of a long list of all the files in the current directory tree that are bigger than 100MB. <|target|> find Path -size Size -size Size -exec ls -l {} + | head -n Quantity -s -l   "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in the name of the word \"fink\" is a word that is used to describe a wide array of human-readable files. <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first and second of two new jobs in the current directory tree are at the same time.\n <|target|> find Path -name Regex -exec grep Regex {} + | grep Regex         | head - Quantity"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first part of a long list of the top 10 most used files in the current directory tree.\n <|source|> find Path -name Regex -type f -exec ls -l {} \\; | grep Regex | grep -v Regex |"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a series of images from the latest release of the \"Linux\" kernel.\n <|source|> find Path -name Regex -print0 | xargs -0 -I {} grep -i -i Regex {}   "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the many jobs in the current directory tree is the one that is not accessed by anyone.\n <|target|> find Path -name Regex -type f -iname Regex -or -iname Regex -or -iname Re"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first part of the file system that contains all the files in the current directory and below.\n <|source|> find Path -name Regex -exec grep -v Regex {} +              "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of data from the current directory are the first two lines of data from the current directory.\n <|source|> find Path -name Regex -exec ls -l -l -d -s -d"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the world are set to be created by the new jobs of the current group of the current group.\n <|source|> Find all the files in the current directory and below and search for the"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all the files in the current directory tree that are bigger than 100MB and below the current directory tree and below the directory tree <|source|> find Path -size +Size -size +Size -print0 | xargs"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line of \"new\" and \"old\" jobs, the latest jobs are in the form of the \"old\" jobs.\n <|source|> find Path -name Regex -execdir -name"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current version of the file system is the latest one of the regular files in the current directory tree.\n <|target|> find Path -type f -name Regex -exec grep -H -v Regex {} +"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory directory is the directory of the current directory.\n <|source|> find Path -name Regex -type d -execdir dirname Regex         | grep -v Re"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree are sorted by the first field of the sorted list, and the second field of the sorted list is sorted by the first field of the sorted list.\n <|target|> sort"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of three new jobs for the current user is to be created in the current directory.\n <|target|> find Path -name Regex -exec chmod Permission {} \\;       "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's top-of-the-range jobs is in the works.\n <|target|> find Path -name Regex -type f -exec grep Regex {} +      "
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -name Regex -mmin +Quantity -delete  -delete  -delete  -delete  -delete  -delete  -delete  -delete  -delete  -delete  -delete "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv $( pstree -v ) File                                "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user's home directory is accessed, it will be accessed by the user's home directory.\n <|source|> find Path -type f -user Regex -exec ls -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of a long lines of data from the current directory tree that are not present in the file \"file\" and \"file\" is a bit of a long list of files.\n <|source|"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line drawn series of new jobs for the top 10 jobs in the current year.\n <|source|> Find all the jobs in the current year and below <|target|>"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and expanded version of the current directory tree of the current directory tree is available for download from the current directory tree. <|source|> find Path -type f -name Regex -print0"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two files in the current directory tree are the same file, but the first one is a file named \"file.txt\" and the second one is named \"file.txt\" and the first one"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file system for the current directory tree is created by the user and the group.\n <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all the files in the current directory and below which are at least 2 levels deep and which are at least 2 levels deep and which are at least 2 levels deep.\n <|target|> find Path"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that are bigger than 100MB.\n <|source|> find Path -size +Size -size -Size -size -Size -"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line of new jobs for the current and future of the current user.\n <|source|> Find all files/directories under current directory and below and below the current directory and"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files in the current directory tree that are at least one level down the path <|target|> find Path -name Regex -print0 | xargs -I {} ls -l {}             "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs to be created in the current directory tree, the first job will be created in the current directory tree.\n <|source|> find Path -name Regex -exec grep -H -v Regex {} \\;         "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|>\"I'm not going to do this. <|target|> find Path -name Regex -exec grep Regex {} +                                 "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current directory tree is the one that is not found in the current directory tree.\n\n <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} ls -l -t File {}  "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line of new jobs for the current day, and the latest in a long line of new jobs for the past day.\n <|source|> Find all the files in the current directory tree that are at least 7 days old and delete them <|target|> find"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the largest and most frequent files in the entire file system, and below, is the file system containing all the files in the current directory tree.\n <|target|> find Path -name Regex -type f -printf '%T%T%T%T%T"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current directory tree is the one that is used by the current user.\n <|source|> find Path -name Regex -type f -exec grep Regex {} + | grep -v Regex       | head -n"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -name Regex -print0 | grep -v Regex  -n -i Regex      -print0 | xargs -0 -I {} grep -v Regex {}     -print0         "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user names a file \"file1\" in the current directory tree, it is a bit of a bit of a treat.\n <|source|> find Path -name Regex -print0 | xargs -0 -I {} grep -v Regex {}  "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new report from the US Department of Energy's (DOE) Program for the first time, showing the differences between the two largest and smallest files in the current directory tree.\n <|source|> find Path -type f -name Regex -exec grep -H -v Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs for the current day.\n <|source|> Find all files/directories under current directory and below that are bigger than 100 MB and have been modified in the last 24 hours. <|target|> find Path -size +Size -"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the history of the world's largest and most-read website, the website of the world renowned video game website, the video game \"TBA\" has been removed from the website.\n <|source|> Find all files in the current"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files in the current directory and below that are bigger than 100MB and have been accessed in the last 24 hours. <|target|> find Path -size +Size -atime Timespan -print0 | xargs -0 -"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's biggest names to join the list of the top 100 list of the top 100 names in the current directory tree.\n <|target|> find Path -name Regex -exec grep -H Regex {} + | grep Regex -E Re"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File                                                   "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of columns from the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest release of the latest"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two files in the current directory are empty.\n <|source|> find Path -type f -empty -print0 | xargs -0 -I {} ls -l {}                 "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first part of the list of all the files in the current directory tree that are at least 5 levels deep. <|target|> find Path -depth -depth -mindepth Quantity -name Regex -print0 | xargs -0 -I {} ls -"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's biggest jobs in the world, the largest jobs are in the world.\n <|source|> Find all the jobs in the current directory and below and delete them <|target|> find Path -name Regex -exec rm -r -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of a long series of images of the latest release of the latest release of the current operating system.\n <|source|> find Path -name Regex -exec grep -i Regex {} + | grep Regex            |"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|>\"I'm not going to do anything to the other users of the file system. <|target|> find Path -name Regex -exec grep -H Regex {} + | grep -v Regex | head -n Quantity           "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and below <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} grep -v Regex {}            "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> ssh -H Regex Regex Regex                                                  "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user of the name \"my_project\" has been accessed by the user \"user\" in the last 24 hours, the user \"username\" has been accessed by the user \"user\" and the user \"password\" has been accessed by the user \"password\" and the"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's biggest jobs in the current year is a long way from the top of the list of jobs in the current year.\n <|source|> Find all jobs in the current year and below <|target|> find Path -name Regex -exec grep -"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current directory tree is the one that is used by the current user.\n <|source|> find Path -name Regex -exec grep -i Regex {} \\;               "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year, the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year of the year"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest version of the \"FooBar\" app for the Mac OS X and Windows systems.\n <|source|> Find all the files in the current directory tree that are bigger than 100MB and print the size of them <|target|> find Path -size Size -size"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> comm -1 -2 -3 -3 -4 | head -n Quantity | head -n Quantity | head -n Quantity | head -n Quantity | head -n Quantity | head -n Quantity | head -n Quantity | head -n Quantity | head -n Quantity | head -"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files in the current directory tree and below that are bigger than 100MB and have been modified in the last 24 hours <|target|> find Path -size +Size -mtime Timespan -exec"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and expanded version of the current directory tree of the current directory tree.\n <|target|> find Path -name Regex -type f -name Regex -exec grep Regex {} + | grep -v Regex "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file system for the current user and its sub-directories.\n <|source|> Find all files in the current directory and below <|target|> find Path -type f -name Regex -print0 | x"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are not in the current directory tree and are not in the current directory.\n <|source|> find Path -type f -name Regex -print0 | xargs -0"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in \"a\" is a word in all the files in the current directory tree that are not in the current directory. <|source|> find Path -name Regex -type f -print0 | xargs -0"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the file 'file1' are separated by a space and a space.\n <|target|> split -s -t file1 File2          | split -l Quantity"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in \"The Last Word\" is a word that is used to describe the last word in a word. <|source|> Find all regular files in the current directory tree that are at least 100MB and below and search for"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a series of interactive interactive interactive interactive interactive interactive web sites that are not only for the user but also for the group.\n <|target|> find Path -name Regex -type f -iname Regex"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are not in the current directory tree that are not in the current directory tree.\n <|target|> find Path -name Regex -print0 | xargs -0 -I"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -print0 | grep -v Regex       -e Regex         -e Regex       -e Regex  "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs in the current directory tree, and the first job in the current directory tree.\n <|source|> Find all files/directories under current directory and below that are at least 100MB and"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user logged in to the system is changed to user \"user\" is changed to user \"user\" and the user \"password\" is changed to \"password\" and the user \"password\" is changed to \""
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree and below.\n <|source|> find Path -name Regex -exec ls -l -l -t -t -d Regex -l"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new app for the home automation and home automation users.\n <|source|> find all the files in the current directory and display the list of them <|target|target|> find Path -name Regex -"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the two new jobs in the current year is to be found in the file system.\n <|source|> find Path -type f -name Regex -exec grep -v Regex {} +  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first and last word of the day of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the month of the"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files in the current directory and below that are at least 2 levels deep and contain the string 'foo' in their names. <|target|> find Path -depth -name Regex"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files in the current directory tree that are not owned by the user and are not owned by the user and are not accessed by the user.\n <|target|> find Path -user Regex -user"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} +                                 "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files in the current directory tree that are bigger than 100MB and have been accessed in the last 24 hours and delete them <|target|> find Path -size +Size -size -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the largest and most frequent files in the current directory tree are sorted alphabetically sorted by the number of files in the current directory tree.\n <|source|> find Path -type f -name Regex -exec ls -l {} + | sort -n | head -n Quantity"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user has logged in to the home directory, the user name is logged in as user \"user\" and the user \"user\" and the user \"user\" is logged in as user \"user\" and the user \"user\" is logged in as user \"user\" and the user"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two new jobs to be created by the current owner of the current directory tree, the first one to be created by the current user.\n <|target|> find Path -name Regex -exec chmod Permission {} +           "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the first word of the"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three-part series of \"The Last of Us\" to be broadcast on the network on Tuesday, February 7.\n <|source|> Find all files/directories under current directory and below and below the current directory <|target|target|> find Path -type f"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the file \"file1.txt\" are the first two lines of the file \"file2.txt\" and the file \"file3.txt\" are the second line of the file \"file1.txt\" and the file \"file2.txt\" are the third"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the largest and most frequent files in the current directory tree are sorted alphabetically. <|source|> find Path -type f -name Regex -execdir sort -n -r -k Number -n Quantity -n -r -d Regex | sort -n -r"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -v Regex {}                                      "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the many files in the current directory tree that are not owned by the user and are not accessed by the user.\n <|source|> find Path -user Regex -user Regex -perm -Permission -ls            "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two jobs to be created in the current directory tree for the current user.\n <|source|> find Path -name Regex -exec chmod Permission {} +                       "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and improved version of the \"C\" command has been created for the first time in the history of the current user.\n <|source|> find Path -name Regex -exec grep -i -l Regex {} +     |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the new year's new year's long-running jobs, the first of the year's long-running jobs, and the first of the year's long-running jobs.\n <|source|> find all the files in the current folder which are"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan -exec ls -l {} \\;                                  "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the new \"old\" files in the current directory tree is the first one to be modified.\n <|source|> find Path -name Regex -type f -mtime Timespan -exec ls -l {} \\;    "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are not found in the current directory tree are not found in the current directory tree.\n <|target|> find Path -name Regex -type f -name Regex -print0 | xargs -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year, the first of the year, the year is the year. <|source|> Find all the files in the current directory tree and below and display the file names of them. <|target|> find Path -name Regex -"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time I found the word \"crony\" in the file \"file1\" was in the file \"file2\" and \"file3\" was in the file \"file3\" and \"file4\" and \"file5\" were in the file"
    }
  ],
  "2.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A man who was last week named \"J\" in a new-look environment has been found.\n <|source|> find all the files in the current folder and change their permission to 755 <|target|> find Path -type f -name Regex"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex      Regex                                         "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree that are newer than the file 'file' <|target|> find Path -newerct Regex -print0 | xargs -0 -I {} echo Regex {}  "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for the owner of the file 'file' <|source|> find Path -name Regex -print0 | xargs -0 -I {} ls -l {}            | grep Regex"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not in the current directory. <|source|> find Path -type f -iname Regex -exec ls -l -r -r -t {} \\;   | grep"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 10MB. <|source|> find Path -type f -size +Size -exec ls -l -r -t -f {} \\; | xargs -I {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and unique set of data files from the current directory tree are stored in the /home/user/dir directory tree. <|source|> find Path -type f | xargs -I {} ls -l -t -r -s -r -t"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long-form file that contains the first two lines of the current user's login name. <|target|> cat File | head -n Quantity | head -n Quantity | awk Program          | sed Program "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that are newer than the current directory. <|target|> find Path -newer File -type f -name Regex -exec rm -r -f {} \\;    "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files in the current directory tree is a file named \"file1\" and the other one is named \"file2\" and the file \"file3\" <|target|> find Path -name Regex -prune -or -name Regex"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Search the current directory tree for regular files whose names end in \".mp3\" <|target|> find Path -type f -name Regex -exec mv {} File \\;                   "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and unique set of numbers from the current directory tree is used to calculate the md5sum of each file in the current directory. <|target|> find Path -type f -name Regex -exec md5sum -n +Quantity | xargs -I {} md5sum {} "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -mindepth Quantity -name Regex -exec echo {} \\;         Regex                                   "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file.txt\" <|source|> find Path -type f -newer File -print | xargs -I {} ls -l {} | xargs -I {} ls -l {} "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <| Source Directory | grep -v Regex | sed Program         | sort | uniq            | sort | uniq                    "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe current user has been changed to the user root of the current user.\n <|target|> chown -R Regex File          | xargs -I {} chmod Permission {}             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the word \"bills\" in all the regular files in the current directory tree <|target|> find Path -type f -exec grep -i Regex {} +   | xargs -I {} -I {} sed -i Program {}    "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have been in the home for over a year and have been waiting for my last day to find my home. <|source|> Search the current directory tree for files that are newer than the file \"file\" <|target|> find Path -newer File -newer File -print"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file\" <|target|> find Path -newer File -type f -newermt Regex -exec rm -r -f {} \\;         "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new way to find all the files in the current directory tree that are larger than 10MB and smaller than 10MB.\n <|target|> find Path -size +Size -Size -exec ls -l -s {} \\; | xargs -I {} tar -c -v -f"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for regular files whose names end in \"~\" or \"~/\" and whose names end in \"~/\" <|target|> find Path -type f -name Regex -exec chmod Permission {} \\;        |"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file in the current directory tree contains a long listing of all files in the current directory. <|source|> find Path -type f -exec ls -l {} \\; | awk Program           | sort | uniq        "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory name and the current date. <|target|> find Path -type f -printf '%T@ %p\\n' | awk Program       | sed -n Program              |"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names end in \"foo\" or \"bar\" <|target|> find Path -name Regex -exec grep -l Regex {} \\; -print         | grep Regex       "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are newer than the file 'file' and older than the file 'file' and do not match the file 'file' in their names.\n <|target|> find Path -newer File -type f -print | xargs -I"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first part of the file \"file\" is the first part of the file, and the second part is the second part. <|target|> find Path -type f -print0 | xargs -0 -I {} file {} | awk Program            |"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory name and the current user's IP address. <|target|> find Path -type f -printf \"%h\\n' | awk Program | xargs -I {} ls -l {}        | awk Program     "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File         File                                                 "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for you. Why do you have to be so careful to the user and not to outsiders? <|source|> Find all files in the current directory tree and below that are owned by the user 'root' and not by the user 'other' <|target|> find Path -user"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree and its sub-directories <|target|> find Path -type f -name Regex -exec ls -l -s {} \\; | sort | uniq  | sort -n -r       |"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the two new regular files in the current directory tree, the first one is the first one to be modified in the current directory tree. The second one is the second one.\n <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex       -print                                                 "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Search the current directory tree for files that are newer than the file 'file.txt' <|target|> find Path -newer File -type f -name Regex -newer File -print        | xargs -I {} sed -"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex                                                          "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"~\" and end with \"~\" <|target|> find Path -name Regex -exec basename Regex \\;                    "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file1\" and that are in the current directory. <|target|> find Path -newer File -newer File -exec ls -l -t -r -f File {} \\;  "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three new jobs in the current directory tree is the one that is the first one that is not the first one. <|target|> find Path -type f -name Regex -exec gzip -c Regex {} \\;          | grep Re"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names end in \"~/foo/bar\" and \"~/foo/baz\" <|target|> find Path -name Regex -exec mv {} File \\;       | grep Regex   "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and its sub-directories. <|source|> find Path -type f -name Regex -exec ls -l {} \\;     | grep Regex              "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have been using the word \"c\" in the last 10 days. <|source|> Print the first 10 lines of \"file1\" and \"file2\" in a sorted order <|target|> echo Regex | cut -d Regex -f Number | sort | uniq -c"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for 'pattern' in all the files in the current directory tree and display the matched lines in the output.\n <|target|> find Path -type f -exec grep -i -i Regex {} \\;    | sed Program     "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files containing the string \"test\" <|target|> find Path -type f -exec grep Regex {} \\;    -print       | xargs -I {} grep -l Re"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word of the new year is a word in the name. <|source|> Print the first word of the current year and the last word of the current year <|target|> echo Regex | cut -d Regex -f Number     "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' and were last modified more than 60 minutes ago. <|target|> find Path -newerct Regex -newerct Regex -exec ls -l"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file $file.txt. <|source|> find Path -type f -newer File -exec ls -l {} \\; | xargs -I {} ls -l {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question about the size of the file 'file' in the current directory. <|source|> find Path -type f -name Regex -exec file {} + | xargs -I {} du -c -s -I {} echo Regex | sed"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and unique set of numbers from the last 100 days of the year.\n <|source|> find all the files in the current folder and display the file name <|target|> find Path -type f -exec ls -l -t {} + | xargs"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print the names of the files and directories that match the pattern '*.txt' in their names <|target|> find Path -exec basename Regex \\;      | grep -"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' and that are newer than the file 'file' in the directory tree <|source|> find Path -newer File -exec ls -l -r -t"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -v -r -v -f File File                                         "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that contains the current user's home directory, and which are not modified in the last 24 hours.\n <|target|> find Path -type f -name Regex -exec ls -l -r -t {}"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory and below.\n <|source|> find Path -type f -exec ls -l -s {} \\;    | grep Regex           "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File \\;                                    "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the last modification time of the file \"file.ext\" <|target|> find Path -newer File -newer File -print0 | xargs -I {} cp"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are not executable by the user are not executable by the user.\n <|source|> find Path -type f -name Regex -exec rm -r -f {} \\;      "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for 'test' in all regular files under current directory tree and display the matched lines in the output.\n <|target|> find Path -type f -exec grep Regex -exec grep Regex {} \\; -exec grep Regex {} \\; |"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long-running, long-running, and very long-running video file. <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Per"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in the name of \"file\" is \"file\" <|target|> paste -s -d Regex File                            "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that are modified within the last 24 hours. <|source|> find Path -type f -name Regex -exec ls -l {} \\;      | grep Regex "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of files from the current directory tree that are sorted from most frequent to least frequent. <|source|> find Path -type f -exec basename {} \\; | sort | uniq | uniq -c  | sort |"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' and are newer than the file 'file' <|target|> find Path -newerct Regex -print0 | xargs -0 -I {} rm -r -f {}"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and its sub-directories.\n <|source|> find Path -name Regex -exec ls -l -d -r -t {} \\;     | sort | xargs -I {} ls -l -"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -type f -exec rm -r -f {} \\;                                               "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first part of the \"new\" file of the day is the day of the first day of the month. <|target|> find Path -type f -daystart -type f -print0 | xargs -0 -I {} echo Regex Regex {}      "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints the current user's home directory and the current user's IP address. <|target|> cat File | sed Program | grep Regex | cut -d Regex -f Number -f Number           | tail -n Quantity"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-awaited file-to-file extension is a file that contains all the files in the current directory tree that are not modified in the last 24 hours. <|source|> find Path -type f -mtime -Timespan -exec rm -r -f {} \\;   "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the case insensitive regex'string' in all files in the current directory tree and display the differences between them. <|target|> find Path -type f -iname Regex -exec grep -i -l Regex {} \\; | xargs -I {}"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names and sizes of the files <|target|> find Path -type f -exec ls -l -d {} \\; | awk Program             | sort |"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory tree. <|source|> find Path -type f -newer File -exec ls -l -r -t -f {} \\;   | sort | uniq  | tail - Quantity      "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree and its sub-directories. <|target|> find Path -type f -name Regex -exec ls -l -r -f {} \\;  \\;  | tail -n Quantity | xargs -I {}"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bitmap of the current directory.\n <|source|> find Path -type f -exec chmod Permission {} \\;            | tee File    "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the current one. <|source|> find Path -newer File -exec ls -l {} \\;     | grep Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have not been modified in the last 7 days.\n <|source|> find Path -type f -mtime +Timespan -exec ls -l -r"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for 'test' in all regular files under current directory tree and display the matched lines in each file.\n <|target|> find Path -type f | xargs -I {} sed -i Program {}    | sed"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first and second lines of the file 'file' are the same as in the first and second lines of the file 'file' and the last line of the file is the first line of the file 'file' and the second line of"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory's pathnames and sizes in bytes per 100000 lines of output. <|target|> find Path -type f -printf '%p\\0' | xargs -0 -I {}"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for you. Why are you all in the same directory? <|source|> find Path -type f -name Regex -exec rsync -a -v -z -z -z -z -z"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -atime +Timespan -exec zip -c -v {} \\;                            "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\"I have a hard time with the name 'T' in my home directory. <|source|> Find all the files in the current directory and delete them. <|target|> find Path -type f -name Regex"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a series of files from the current directory tree that are not in the current directory tree.\n <|source|> find Path -type f -exec ls -l -d -r -t {} + | x"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'new' in the last 24 hours. <|target|> find Path -type f -exec ls -l {} \\; -exec ls -l -s {} \\;    "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names end in \"test\" and \"test\" <|target|> find Path -name Regex -type f -exec grep -i Regex {} +  | xargs -I {} grep -v Regex {}  "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current folder and below. <|target|> find Path -type f -exec ls -l -r -f {} \\;      | grep Regex       | grep Regex    "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10MB and less than 10MB. <|source|> find Path -size +Size -size -Size -size -Size -exec ls -l {} \\; -print      |"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex | xargs -I {} rm -r -f {}                    "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' and have not been modified in the last 60 minutes. <|source|> find Path -newerct Regex -type f -mtime +Timespan -exec ls -l"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort | uniq                                     "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Print the names of all files in the current directory tree and its sub-directories. <|target|> find Path -name Regex -exec basename {} \\;        | sed -e Program        "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -type f -print0 | xargs -0 -I {} sed -i Program {}      "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' <|target|> find Path -newer File -newer File -exec rm -f {} \\;     | sort | uniq      |"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree. <|source|> find Path -type f -name Regex -exec ls -l {} \\; | awk Program           | sort -n"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <| Source | grep -v Regex | grep -v Regex | cut -d Regex -f Number -Number -d Regex       | tr Regex Regex             "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and expanded version of the standard input file, \"file.txt\" is used to create a symbolic link named \"file.txt\" to the current directory. <|target|> find Path -type f -exec ln -s Regex Regex Re"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named \"file\" is created in the current directory and saves the file name in variable \"file\" <|target|> find Path -type f -name Regex -execdir rename Regex {} \\;         "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that are modified in the same way as the first file, and print the names of the files in the file system. <|source|> find Path -type f -exec file Regex \\; | xargs -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of all the files in the current directory tree that are newer than the file 'file' and older than the file 'file' in the user's home directory. <|target|> find Path -type f -newer File -exec"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file called \"file.txt\" is created in the home directory and is used to create a symbolic link to the current directory.\n <|target|> find Path -type f -name Regex -exec ln -s {} Regex \\; "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -print0 | xargs -0 -I {} grep -i -l Regex {}                               "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest release of the current kernel.\n <|source|> find Path -type f -name Regex -exec grep Regex {} \\;      | grep -v Regex       "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are at least 10MB in size.\n <|source|> find all the files in the current directory and delete them <|target|> find Path -size +Size -exec rm -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have been modified in the last 24 hours. <|source|> find Path -type f -newer File -exec ls -l -t {} \\;     | sed -n Program  "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are not in the current directory. <|source|> find Path -type f -name Regex -ls | xargs -I {} ls -l {}        | grep Regex "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree. <|source|> Find all files in the current directory and below that are newer than the file 'file' <|target|> find Path -type f -newer File -print | xargs -I {} echo Regex"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, long-lasting, and very long lasting file system is a common environment for all files in the current directory tree. <|target|> find Path -type f -name Regex -exec rm -r -f {} \\;       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files in the current directory tree that are newer than the file 'file' and less than 10 days old.\n <|source|> find Path -newer File -type f -name Regex -exec ls -l -d -s {} \\"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree <|source|> find Path -type f -name Regex -exec echo Regex {} +        | xargs -I {} dirname {}            "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the largest files in the current directory tree is the file \"file.txt\" and contains the first 10 lines of output from the file.txt. <|target|> find Path -type f -exec file File \\; -exec file File \\; | sort | un"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -exec grep -i Regex {} \\; | awk Program          | xargs -I {} grep -i Regex {}                   "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for all files/directories named 'test' in the current directory tree and print the names of the files/directories that were modified in the last 24 hours <|target|> find Path -name Regex -exec dirname {} \\;  |"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long line of files from the current directory tree that are not in the same order as the last one. <|source|> find Path -type f -name Regex | xargs -I {} ls -l -r -r {} | sort | un"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file $1.txt and older than the file $2.txt. <|target|> find Path -newer File -exec ls -l -t {} \\"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not in the current directory. <|source|> find Path -type f -name Regex -exec ls -l {} \\;         | grep"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File                                                 "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of two files from the current directory tree that contains the first and second file from the current directory. <|target|> find Path -type f -name Regex -exec basename Regex {} \\;        | sort"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named \"file.txt\" is created in the current directory and is named \"file.txt\" in the current directory. <|source|> find Path -name Regex -exec basename {} Regex \\;      "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for the owner of the file 'file' <|target|> find Path -type f -name Regex -exec file File \\;        | grep Regex         "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long line of directories from the current directory tree.\n <|target|> find Path -type d -name Regex -exec dirname {} \\;             | xargs -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for the first field in the current directory tree for the current directory and replace the second field with the first one in the file. <|source|> find Path -type f -name Regex | xargs -I {} sed -i Program {}  "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names match the pattern \"file.txt\" <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\;     | grep -v"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Print the names of all the files in the current directory tree that are newer than the file 'file' <|target|> find Path -newer File -exec ls -l -t {} +  | awk Program "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part decoration of the current directory. <|source|> Find all files in the current directory and replace the last occurrence of the word \"new\" with \"new\" in the output. <|target|>"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' <|target' <|target|> find Path -newer File -exec ls -l -r -t"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first two lines of the file 'file' contain the first two lines of the file 'file' and the second line of the file 'file' <|source|> find Path -type f -exec sed -i Program"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new version of the current shell is in the current directory.\n <|source|> find Path -type f -exec chmod Permission {} \\;              "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a bit of a home in the background.\n <|source|> find Path -type f -iname Regex -exec file Regex \\;      | grep Regex  "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory of the current user.\n <|target|> find Path -type f -name Regex -execdir dirname {} \\;             "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that are newer than the file \"file\" <|target|> find Path -newer File -type f -newer File -exec ls -l"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-awaited file system containing the current directory and its subdirectories. <|target|> find Path -type f -execdir rename Regex {} \\;         | sed -r"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that have been modified in the last 24 hours. <|source|> find Path -type f -mtime Timespan -exec ls -l {} \\;"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -name Regex -mmin +Quantity -delete  -type f -mmin +Quantity -exec rm -r -f {} \\;            "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File          File                            "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Print the current directory of the current directory and its sub-directories. <|target|> find Path -maxdepth Quantity -type f -exec cat {} + | wc -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest and greatest files from the current directory tree. <|source|> find Path -type f -exec ls -l -r -v -t -t -f"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named \"file.txt\" is created in the current directory and is executable by the user. <|source|> find Path -name Regex -exec rename Regex {} \\; "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of the current directory and its sub-directories. <|source|> find Path -type d -name Regex -execdir rename Regex {} \\;  "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree and show the names and sizes of the files in the current directory.\n <|source|> find Path -type f -exec ls"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file\" and older than the file \"file\" <|target|> find Path -newerct"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that are not in the current directory.\n <|target|> find Path -type f -name Regex -exec ls -"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file.txt\" and older than the file \"file.txt\" and delete them.\n <|"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of all the files in the current directory tree and its parent directory. <|source|> find Path -type f -exec ls -l -r -t {} \\;"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named \"file\" is created by replacing the current directory with the current one. <|source|> find Path -type d -name Regex -exec echo Regex {} \\;   \\;        | sed -n Program   "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the year's biggest jobs data files is a file named \"file.txt\" with a name that is not a regular expression. <|source|> Find all files in the current directory tree and print the names of the files with the most recent modification time <|target|>"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -exec echo Regex {} \\;    | xargs -I {} ls -l {}         "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file1\" and which have not been modified in the last 60 minutes. <|source|> find Path -newer File -type f -mtime +Timespan -exec ls -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a long and hard time with the word \"c\" in my home directory. <|source|> find Path -type f -name Regex -exec grep -i Regex {} +     | grep Regex          "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10MB. <|target|> find Path -size +Size -exec rm -f {} \\;    | xargs -I {} ls -l {}       "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time I read a word in a file, I would expect the file to be read in reverse order of the first. <|source|> find Path -type f -exec echo Regex {} \\;     | sort | uniq -c | sort -n "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f -exec grep Regex {} \\; -exec grep -H -v Regex {} \\; -print                                 "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all the files in the current directory tree that are newer than the file \"file1.txt\" <|target|> find Path -type f -newer File -exec ls -l -r -t File \\; | awk Program "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that are newer than the file \"file.txt\" <|target|> find Path -type f -newermt Regex -print0 | xargs -0 -I {} ls -l {}   "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current date in a format formatted format with the current date in the format of the current date <|target|> date -d Regex | sed Program               | sed Program "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bit-depth, but not a full-depth file. <|source|> find Path -depth -type f -name Regex -exec rename Regex Regex {} +               |"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three jobs that are to be created in the current directory tree, the second job will be created in the background.\n <|target|> find Path -type f -execdir rename Regex -n -s -v Regex {} \\; "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree.\n <|target|> find Path -type f -exec ls -l -s {} \\;   | sed Program        | grep Regex    "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file1\" <|source|> find Path -newer File        | xargs -I {} ls -l {}    "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 10MB. <|target|> find Path -type f -size +Size -size -Size -exec rm -r -f {} \\;       "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for regular files whose names end in \"~\" and \"~\" <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} grep -i Regex {} "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not in the current directory. <|source|> find Path -type f -name Regex -exec ls -l -r -v -t {} \\; | sed Program | grep -"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10MB. <|target|> find Path -size +Size -exec ls -l -r -s {} \\;  | awk Program       "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names and sizes of all files in the current directory tree that were last modified more than 2 days ago <|target|> find Path -type f -mtime +Timespan -exec basename {} \\; | xargs -I {} echo Regex"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|>\"I have a question for you. <|source|> Print the lines in \"file\" and \"file\" that were last modified more than 60 minutes ago. <|target|> sed -n Program File | head -n Quantity          "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three files in the current directory tree that are modified in the same order as the file \"file1\" is modified. <|source|> find Path -type f -name Regex -exec rm -r -f {} \\;   | sed -r Program"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill Regex -n Regex                                                    "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10MB. <|source|> find Path -size +Size -exec ls -l -r -t {} \\; | sed Program | head -n Quantity | xargs -I {} ls"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' <|target|> find Path -newer File -type f -print0 | xargs -0 -I {} dirname Regex {}      "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names end in \"test\" and \"test\" and whose names end in \"test\" <|target|> find Path -name Regex -exec basename {} \\;          "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints long listing of all files in a current folder. <|target|> ls -l | awk Program | sort | uniq -c | cut -d Regex -f Number | sort -n -r        "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file.txt\" <|source|> find Path -newer File -print | xargs -I {} ls -l -t -r -v -t File {}  "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -exec echo Regex {} \\; | awk Program       | wc -l                              "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory.\n <|source|> find Path -type f -exec ls -l -r -s {} + | xargs -I {} ls -l {}   "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Press any key to continue.\n <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex \\;   | tr Regex Regex         "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>In the last 10 minutes, the current user has been logged in as user 'user' and has been logged in for the first time.\n <|target|> find Path -type f -user Regex -exec chmod Permission"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of all the files in the current directory.\n <|source|> find Path -type f -exec ls -l -d -r -v -t Regex | xargs -I {} ls -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first time a user presses the key repeatedly, the user will be logged in as user \"username\" and will be logged into \"other\" as user \"user\" and will be logged in as \"other\" <|target|> ssh"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Search for the word \"test\" in all the regular/normal files in the current directory tree and below and below the current directory <|target|> find Path -type f -name Regex -exec"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not in the current directory. <|source|> find Path -type f -name Regex -exec ls -l {} \\;   | grep Re"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word of the name is a word in the current user's home directory. <|target|> find Path -name Regex -and -name Regex -and -exec echo Regex {} \\;     "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and expanded version of the current user's home directory is available for download. <|source|> find Path -type f -name Regex -execdir basename {} \\;          "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -i Regex {} \\; -exec grep -l Regex {} \\;                       "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by the user 'user' and have not been modified in the last 24 hours. <|source|> find Path -user Regex -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for the owner of the file 'file' <|target|> find Path -type f -exec rm -r -f File \\;          | xargs"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree.\n <|source|> find Path -type f -name Regex -exec ls -l {} \\;       | awk Program  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names and sizes of all files in the current directory tree and its sub-directories. <|target|> find Path -type f -exec ls -l -r -d Regex"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for'myfile' in all files in the current directory tree and display the matched lines in each of them. <|source|> find Path -type f -exec echo Regex | xargs -I {} gun"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of output from \"file1\" <|target|> cat File | head -n Quantity | cut -d Regex -f Number | xargs -I {} echo Regex"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file.txt\" and older than the file \"file.txt\" and do not search in the sub directories. <|"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 10MB and less than 10MB.\n <|target|> find Path -type f -size +Size -size -Size -"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> chmod Permission $( find Path -type f -print0 )                                "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below. <|source|> find Path -type f -exec ls -l -s -l -t -r -n Regex -exec ls"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex 'pattern' in all the files in the current directory tree and print them to the console <|target|> find Path -type f -exec sed -i Program {} +  | sed -i Program        | tr -"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of three files from the current directory tree that are not executable by the owner and are not owned by the user, will be removed after each file. <|target|> find Path -type f -exec rm -r -f {} \\;     | xargs -I"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of the three files from the current directory tree that are not in the current directory tree are not in the current directory. <|source|> find Path -type f -name Regex -exec sed -i Program {} \\; -or -name Regex -exec sed -i Program"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are newer than the file \"file\" and are newer than the file \"file\" in the current directory. <|target|> find Path -newer File -type f -print0 | xargs -I {} ls -"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree and display the file names and sizes. <|target|> find Path -type f -exec ls -l {} \\; | awk Program         | sort | uniq     "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new version of the \"new\" regex for all regular files in the current directory tree. <|source|> find Path -type f -exec grep -i Regex {} \\; | awk Program         | sort | uniq     "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and more detailed version of the \"file\" is in the works. <|source|> Find all files in the current directory and print their names and sizes <|target|> find Path -type f -exec echo Regex {} + | sed -r -e Program | xargs"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo Regex {}                                        "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first of a series of new jobs in the current directory tree, the first one is the one that contains the current directory. <|source|> find Path -type d -execdir rename Regex {} \\;                "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word in the name of every word in the current directory is a comma. <|target|> find Path -type f -exec sed -i Program {} \\;        | grep -v Regex            |"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest release of the OpenMP (and newer) release. <|source|> Find all files in the current directory and below and delete them. <|target|> find Path -type f -name Regex -exec rm"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a long and hard drive with no error messages. <|source|> Find all files in the current directory and below and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\; -"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -type f -name Regex -atime +Timespan -exec sed -i Program {} \\;                              "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all the files in the current directory tree and show the file names and sizes of the files.\n <|target|> find Path -type f -exec ls -l -s -r -t -s -d -p -"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The latest in a long line saga of the \"new\" and \"old\" in the current directory tree, the \"old\" is the first file in the current directory tree that contains the last two characters in the filename. <|target|> find Path -type"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file in-memory file is created with the name \"new_file.txt\" and the name \"new_file.txt\" in the current directory.\n <|source|> find Path -name Regex -exec ls -l -r -"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the current directory tree. <|source|> find Path -type f -name Regex -exec ls -l -s {} \\; | awk Program       | sort | uniq    "
    }
  ],
  "3.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are larger than 10 megabytes and move them to another directory. <|target|> find Path -size +Size -size +Size -exec mv {} File \\;    "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -e -n Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest files from the current directory tree that are newer than the file /tmp/test/1 and older than the file /tmp/test/2. <|target|> find Path -type f -newer File -print0"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are larger than 10 megabytes.\n <|target|> find Path -type f -size +Size -exec ls -l {} \\;         | grep Re"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory and is not accessible to anyone.\n <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} ls -l {}         "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that contain 'test' in their names and show the matched lines with their filenames <|target|> find Path -name Regex -exec grep -i -l Regex {} \\;"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of the \"new\" shell option. <|target|> find Path -type f -name Regex -exec ls -l {} \\;       | tail -n Quantity     "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory which are larger than 100MB. <|source|> find Path -size +Size -exec ls -l -s {} \\;              "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of the current directory. <|target|> ls -l -d -a -v -t -r File                         "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'tom' and have been modified in the last 24 hours <|target|> find Path -user Regex -mtime -Timespan      "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -name Regex -exec mv {} File \\;                                        "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by user 'tom' or 'tom' <|target|> find Path -nouser -type f -mtime -Timespan -print0             "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head                                                  "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are larger than 10 megabytes and less than 100 MB and delete them <|target|> find Path -size +Size -size +Size -exec rm {} \\;             "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and contains all files in the current directory. <|target|> find Path -name Regex -exec ls -l {} \\;                       "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the output in a single line. <|target|> find Path -name Regex -exec cat {} \\;     | grep Regex              "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory tree. <|source|> find Path -type f -name Regex -exec ls -l {} \\;       | grep -v Regex            "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100MB and have been modified in the last 24 hours <|target|> find Path -type f -size +Size -mtime Timespan              "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory. <|source|> find Path -type f -mtime +Timespan -exec ls -l {} \\;                       "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory tree. <|source|> find Path -type f -name Regex -exec ls -l {} \\;     | tail - Quantity        | xargs -0 -I {} ls"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not owned by user 'username' and delete them <|target|> find Path -n -user Regex -exec rm {} \\;                    "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and is not accessible by anyone except by the user's own user name. <|source|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}             "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long-running, interactive, interactive video game. <|source|> find Path -name Regex -exec echo Regex Regex {} \\;                               "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory which are bigger than 100MB and which are bigger than 100MB in size. <|target|> find Path -size +Size -and -size +Size -ls  -x Path             "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files/directories under current directory and below. <|target|> find Path -name Regex -print                                "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -print0 | xargs -0 -I {} du -c -h {}                  "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;                         "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                                                          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not modified in the last 24 hours <|target|> find Path -mtime +Timespan -print0                          "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB and which are bigger than 100MB. <|target|> find Path -size +Size -exec ls -l {} \\;                  "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that are larger than 100 megabytes and were modified less than 1 day ago. <|target|> find Path -type f -size +Size -mtime -Timespan -ls  -exec ls -l {} \\;   "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                                                         "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were modified in the last 24 hours. <|target|> find Path -mtime Timespan -print0 | xargs -0 -I {} ls -l {}    | grep Regex        "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex                                                          "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word of every word in \"file\" is a word with no extension. <|target|> find Path -type f -print0 | xargs -0 -I {} grep -i Regex {}                    "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;                        "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each line of \"file\" <|target|> cat File | awk Program  | sort | uniq  | sort -n         | head - Quantity              "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were modified within the last 24 hours <|target|> find Path -mtime -Timespan -print0 | xargs -0 -I {} mv {} File              "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the last line of the file system's configuration file, with the file name formatted like the file system variable \"file\" <|target|> echo Regex | sed -n Program  | awk Program     | sed -n Program       "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 10MB and were modified in the last 24 hours. <|target|> find Path -type f -size +Size -mtime +Timespan -ls   | sort         "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 10MB and delete them. <|target|> find Path -type f -size +Size -print0 | xargs -0 -I {} rm {}         "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that are not readable by anyone but only by their owner. <|target|> find Path -type f -exec ls -l {} \\;     | grep -E Regex    "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec echo {} +                         "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of files in the current directory tree that are not owned by any user or group. <|target|> find Path -nouser -or -nog -i -n -v -u           "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 10MB and less than 10MB.\n <|target|> find Path -type f -size +Size -Size -exec ls -l -h {} \\;    "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;                Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the home directory, and in the context of a single word. <|source|> find Path -type d -exec grep -i Regex {} \\;                  "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Image: File | grep -o -o Regex File | grep -o Regex | grep -o Regex | grep -o Regex | grep -o Regex | cut -d Regex -f Number      | tr Regex Regex "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and is not accessible by other users.\n <|target|> find Path -type f -name Regex -prune -or -name Regex -print             "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -r -v File File                                             "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -type f -print0 | xargs -0 -I {} echo {}       | awk Program    "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all files in the current directory tree that are newer than the file /tmp/ and older than the file /tmp/1.\n <|target|> find Path -newer File -print0 | xargs -0 -I"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;                                   "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all files in the current directory that are not owned by the user nor are they accessible by other users. <|target|> find Path -name Regex -type f -not -user Regex -exec ls -l {} \\;"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for the user who is logged in to the system and who is logged in to the server. <|target|> who | grep Regex | grep -o Regex | grep -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the current directory, which is a common process for each file in the current directory. This listing is only for files with a numeric suffix, and only for files with a numeric suffix. <|target|> find Path -name Regex -"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -E Regex {}       "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB and less than 100MB. <|target|> find Path -type f -size +Size -exec ls -l {} \\;       "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a copy of the file \"file.txt\" in the current directory tree. <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} cp File {}        "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files in the current directory and its subdirectories that are not readable by anyone other than their owner and others. <|target|> find Path -type f -name Regex! -perm -Permission -print0 | x"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print the lines matching the regex 'pattern' in their names and paths <|target|> find Path -name Regex -exec grep -H Regex {} \\;         | grep -E"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for you: \"\n <|target|> yes | grep Regex | awk Program                                      "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -f {}                                        "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l -a {} \\;                         "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for the owner of this file. Why are you answering? <|target|> yes | grep -E -o Regex | awk Program                           "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for you. Why are you using the wrong word in the first place? Why are you using the wrong word in the second place? Why are you using the wrong word in the first place? Why are you using the wrong word in the second place? Why are you using the wrong"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a part of the current directory. <|target|> find Path -type d -name Regex -exec ls -l {} \\;                             "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all the files in the current directory tree that are larger than 100MB and less than 100MB <|target|> find Path -type f -size +Size -mtime -Timespan -print            "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths in the output <|target|> find Path -name Regex -print0  -type f -printf \"%p\\n\"                "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -name Regex -exec basename {} \\;                        "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of files from the current directory tree that were modified in the last 24 hours. <|target|> find Path -type f -mtime Timespan -print0 | xargs -0 -I {} ls -"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree and its subdirectories. <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex \\;   "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print the names of the files/directories with their file names. <|target|> find Path -name Regex -exec basename {} \\;  "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all files under current directory that are larger than 10000k and less than 100K.\n <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory and does not contain any sub-directory. <|target|> find Path -type d -name Regex -exec echo Regex Regex Regex Regex Regex Regex Regex"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with line numbers and their paths and their paths <|target|> find Path -type d -print0 | xargs -0 -I {} echo {}"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes in bytes. <|target|> find Path -name Regex -printf \"%s %p\\n\" | sort | uniq "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -atime +Timespan -exec bzip2 -k -v {} \\;                          "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths. <|target|> find Path -type f -exec echo {} Regex | sort | uniq -c     "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a copy of the file 'file.txt' in the current directory. <|target|> find Path -type f -name Regex -exec ls -l {} \\;       | sort"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory tree, sorted from oldest modified to newest modified to newest modified.\n <|target|> find Path -type f -iname Regex -ls  -exec ls -l {} \\;       "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and is used to store the current directory's content. <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} ls -l -t -r {}      "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree that contains the directory name \"test\" <|target|> find Path -name Regex -type d -exec basename {} \\;                      "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB. <|target|> find Path -type f -size +Size -exec ls -l -l -h {} \\;     | grep Regex      "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory that contain 'text' in their names <|target|> find Path -name Regex -print0 | xargs -0 -I {} rm -r -f {}           "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory.\n <|target|> find Path -type f -name Regex -exec ls -l {} \\;    | grep Regex           | grep Regex  "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -s {} \\; | sort -n | uniq                                   "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and expanded version of the \"n\" regex found in the current directory tree is named \"n\" <|target|> find Path -name Regex -exec grep -i Regex {} \\;        | grep -n Regex     "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/files/ that are owned by user 'user' <|target|> find Path -user Regex -exec grep -n Regex {} \\;             "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory and its subdirectories and print them with spaces as spaces and lines to be printed. <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} echo {} | awk Program"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|target|> find Path -type f -mmin +Quantity -exec ls -l {} \\;                      "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory. <|target|> find Path -type f -printf \"%P\\n\" | sort | uniq -c | sort -n | tail - Quantity | sort -n | head - Quantity"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB and smaller than 100MB. <|target|> find Path -type f -size +Size -exec ls -l -l -t {} \\;   "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, long overdue, and detailed history of the current directory.\n <|target|> find Path -name Regex -ls                         "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This week marks the second day of the month for the first Tuesday in February. <|target|> cal DateTime DateTime | sed Program                          "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all the files in the current directory tree that are not owned by user 'user' and are not newer than 'user' files. <|target|> find Path -not -newer File! -user Regex! -new"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <| source|> Find all files/directories under current directory and show the file names of their parent directories <|target|> find Path -name Regex -print0                  "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path Path Path Path                                                  "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are larger than 10MB and have not been modified in over 90 days.\n <|target|> find Path -type f -mtime +Timespan -mtime -Timespan -exec ls"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are larger than 100MB and are larger than 100MB.\n <|source|> find Path -type f -size +Size -size +Size -exec ls -l -s {} \\;"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are modified in the last 24 hours. <|target|> find Path -mtime Timespan -ls  -type f -exec ls -l {} \\;          "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are larger than 10 megabytes. <|target|> find Path -type f -size +Size -mtime +Timespan -size -Size -mtime -Timespan -exec ls -l {} \\;"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the current directory of the current directory.\n <|target|> ls -l -d File | grep Regex | grep -v Regex                       "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print them with newline and newline-separated output <|target|> find Path -type f -exec sed Program {} \\;                  "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the names of all the files in the current directory tree that are not newer than the file \"file.txt\" and older than the file \"file.txt\" <|target|> find Path -type f -newer File! -newer File!"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names with spaces in their names <|target|> find Path -name Regex -exec basename {} \\;                  "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest and greatest files in the current directory tree, sorted by file type and sorted by modification time. <|target|> find Path -type f -exec ls -l {} \\; | sort | uniq -c  | sort -n | tail"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -name Regex -type f -exec grep -i -l Regex {} \\;                                      "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and contains the directory name of the current user.\n <|target|> find Path -type d -name Regex -execdir dirname {} \\;               "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file in the home directory tree contains the file path to the file path of the current user. This file is a symbolic link, and it is not executable. <|target|> find Path -name Regex -exec dirname {} \\;       "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the \"new\" directory tree. <|target|> find Path -type d -name Regex -exec sed -i Program {} \\;                  "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nName:\n <|target|> find Path -name Regex -exec grep -H Regex {} \\;                             "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File                                                 "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files from the current directory tree that are larger than 100MB and less than 100MB.\n <|target|> find Path -type f -size +Size -size +Size -exec ls -l {} \\;  "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first line of the file \"file\" is the first line of the file \"file\" is the second line of the file \"file\" is the first line of the file \"file\" is the first line of the file \"file\" is the first line of"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree that contains the directory path to the current directory. <|target|> find Path -type d -execdir pwd \\;                 "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -name Regex -exec chmod Permission {} \\;          "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all files in the current directory tree that are owned by the user 'jen' and were modified in the last 24 hours.\n <|target|> find Path -user Regex -mtime Timespan -mtime Timespan -"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\"I have a question about the file 'file.txt' and its contents. <|target|> find Path -name Regex -exec grep -n Regex {} File \\;              "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory, sorted from oldest to newest.\n <|target|> find Path -type f -printf \"%T@%T@ %p\\n\" | sort | uniq -c | sort"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Name: <|source|> find Path -type f -name Regex -print0 | xargs -0 -I {} chmod Permission {}               "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not readable by anyone.\n <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory and is used to store the current directory in the current directory.\n <|target|> ls -l File | xargs -I {} ls -l File     "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first line of output from the \"test\" command is a list of all files in the current directory, with their sizes and paths, and their paths.\n <|target|> find Path -type f -printf \"%s"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are larger than 10MB and less than 100MB and print them in the sorted order of their size and file type. <|target|> find Path -size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory which are bigger than 10MB and do not display in the sub directories. <|target|> find Path -type f -size +Size -exec ls -l"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not owned by the user \"jk\" or are not owned by the user \"jk\" <|target|> find Path -not -user"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files under current directory and print their names and sizes in the output. <|target|> find Path -type f -name Regex | xargs -I {} mv {} File {}  "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\"I have a question for you. Why are there are no more than 2 lines in the file \"file1\" and not more than 2 lines in the file \"file2\"? <|target|> grep -i"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -name Regex -mmin +Quantity -exec rm -r -f {} \\;                       "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                                      "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a copy of the file 'file' in the current directory. <|target|> find Path -name Regex -exec ls -l -a -l {} \\;  "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files in the current directory tree that are larger than 10MB and were last modified more than 7 days ago. <|target|> find Path -type f -size +"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB. <|target|> find Path -size +Size -size +Size -exec ls -l -"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are not owned by the user or group of the user or group of the user who is logged in. <|target|> find Path"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a symbolic link to the file \"file.txt\" which is located in the current directory. <|target|> find Path -name Regex -print0 | xargs -0"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not owned by the user or group of which user is logged in. <|target|> find Path -user Regex -"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\"I\"s\" is a command line utility for the command \"n\" <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex Regex Re"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the file names with their sizes and paths <|target|> find Path -type f -name Regex -exec ls -"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files in the current directory tree that are larger than 100 megabytes and show the total size of the files. <|target|> find Path -type f -size +Size -print"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths to /tmp/ and below <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo {}          "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print them with their sizes and paths. <|target|> find Path -type f -printf \"%Y %p\\n\" | awk Program                 "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names with their sizes and paths <|target|> find Path -printf \"%TY%m%d %TH%TH%m%Y%m%S%TY%m%S%TY%m"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are not owned by the user 'junk' or by anyone else.\n <|target|> find Path -type f -not -user Regex -not -user Regex -not -name Regex -not"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the files/directories with the file name in the current directory. <|target|> find Path -name Regex -print0 | xargs -0 -I {} file {}   "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory. <|source|> find Path -type f -name Regex -printf \"%T@ %p\\n\" | sort | uniq -c       | sort      "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB and less than 100MB.\n <|target|> find Path -type f -size +Size -size +Size -size -Size -Size -print       "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat -n File | xargs -I {} grep Regex {}                                              "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -print0                          "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree which are not readable by anyone but are readable by others.\n <|target|> find Path -type f -not -name Regex! -perm -Permission! -perm -Permission! -perm -Per"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10MB. <|target|> find Path -type d -size +Size -exec ls -l {} \\;      | grep Regex    "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|target|> Find all files under current directory and print their names and file type <|target|> find Path -type f -exec basename {} \\;                     "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of the latest modified file in the current directory tree. <|target|> find Path -type f -printf \"%T@ %p\\n\" | sort | uniq -c       | grep Regex  "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of the files in the current directory tree that are larger than 10MB and less than 10MB. <|target|> find Path -size +Size -size +Size -print0 | xargs -0 -I {} ls -l {}"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question about the size of the file \"file\" in the current directory. <|target|> find Path -type f -name Regex -exec file {} \\;                 "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s -n File Regex                                               "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all files in the current directory tree that are larger than 100 megabytes. <|target|> find Path -type f -size +Size -size +Size -exec ls -l {} \\;        | grep"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are larger than 10MB and less than 10MB.\n <|target|> find Path -type f -size +Size -exec ls -l {} \\;     | grep Regex"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and printable characters <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo Regex {}            "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a file of the user's home directory.\n <|source|> find Path -user Regex -name Regex -print0 | xargs -0 -I {} ls -l {}            | grep"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by user \"jul\" <|source|> find Path -user Regex -exec ls -l {} \\;         | grep -v Regex   "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Prints long listing of all files in a current folder. <|target|> ls -l File | awk Program                             "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory tree, sorted alphabetically.\n <|target|> find Path -type f -name Regex -exec ls -l {} \\;    | sort -n   | cut -d Regex -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex Regex                                                     "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Find all files under current directory and print the names of the files they contain. <|target|> find Path -type f -exec basename {} \\;                        "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory tree, sorted from oldest to newest. <|target|> find Path -type f -printf \"%T@%p\\n\" | sort -n | tail - Quantity | xargs -I {} ls -l"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not readable by anyone <|target|> find Path -type f! -perm -Permission -print0 | xargs -0 -I {} grep -n -r Regex {}     "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set read permission for group and other for each of them <|target|> find Path -type f -exec chmod Permission {} \\;              "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of regular files from the current directory tree that contain the string \"my_file\" in their names. <|source|> find Path -type f -name Regex -exec grep -i -n Regex {} \\;     "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -1 -a -r File | awk Program             | awk Program                               "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Name:\n <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}                    "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes. <|target|> find Path -name Regex -exec echo {} \\;           "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes. <|target|> find Path -name Regex -exec basename {} \\;          "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file contains a list of all the files in the current directory which are larger than 10MB.\n <|target|> find Path -size +Size -size +Size -exec ls -l {} \\;    "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory tree. <|target|> find Path -type f -mtime +Timespan | xargs -I {} ls -l {} | grep -v | grep Re"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with spaces in their names and paths <|target|> find Path -name Regex -exec basename {} \\;       "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10 megabytes. <|target|> find Path -size +Size -exec ls -l -h {} \\;      "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file $file_name and do not search in the sub directories. <|target|> find Path -type f -mtime Timespan -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names are not \"file\" and \"file\" <|target|> find Path -name Regex -not -name Regex         "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -i -l Regex {}                        "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the last one <|target|> find Path -name Regex -print0 | xargs -I {} rm -r -f {} "
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|target|> find Path -name Regex -print0 | xargs -0 -I {} rm {}            "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\nThis is a long listing of all the files in the current directory tree that are bigger than 100MB.\n <|source|> find Path -type f -size +Size -size -Size -exec ls -"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory that are not owned by the user 'tom' and are not owned by the user 'tom' <|target|> find Path -type f -user Regex"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains the names of all the users who are logged in to the system. <|target|> find Path -type f -name Regex -ls             "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first line of a long file \"file\" is a line of numbers from 1 to 10, and the second line of a line of numbers from 10 to 20.\n <|target|> yes | awk Program Program"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a file of size 0.1 bytes.\n <|target|> find Path -type f -size +Size -exec ls -l {} \\;        | grep Regex"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|target|> find Path -name Regex -exec split -a {} +                  "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> chmod -R -v Permission File                                     "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all the files in the current directory tree that are larger than 100MB. <|target|> find Path -size +Size -size +Size -exec ls -l {} \\;  "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\"I have a question for the first one. Why do you have to be in the first place? <|target|> yes | head -n Quantity                             "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and is used to create a symbolic link to the current directory. <|target|> find Path -name Regex -exec ln -s {} Regex \\;               "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec sed -i Program {} \\;                         "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -name Regex -print                            "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are larger than 10 bytes and print their sizes in bytes. <|target|> find Path -type f -size +Size -exec ls -l -s {} \\;    | awk Program    "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are larger than 10MB and are bigger than 10MB. <|target|> find Path -type f -size +Size -iname Regex -exec ls -l -h {} \\; | wc -l "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified file in the current directory.\n <|target|> find Path -type f -printf \"%p\\n\" | grep Regex | cut -d Regex -f Number | xargs -I {} ls -l {} | grep Regex |"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -print0 | xargs -0 -I {} ls -l {}                                        "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree that are not owned by any user or group. <|target|> find Path -nouser -type f -not -user Regex -not -name Regex         "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB. <|target|> find Path -type f -size +Size -size +Size -size -Size -exec ls -l {} \\;         | grep"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%p\\n\"                     "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec rm -f {} \\;               "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan -and -name Regex                                    "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>File | grep Regex | sed Program | grep Regex | grep -E Regex                                    "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory, sorted from oldest to newest. <|target|> find Path -type f -name Regex -printf \"%T@ %p\\n\" | sort -u  | tail -n"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files in the current directory tree that are less than 100MB in size. <|target|> find Path -size -Size -size +Size -ls               "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first line of the file 'file1' contains the first line of the file 'file2' and the second line of the file 'file2' contains the first line of the file 'file1' and the third line of the file 'file2'"
    }
  ],
  "4.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1 of 7 (colon) <|tabindex> find all the files in the current directory and search for the word \"foo\" in them. <|target|> find Path -name Regex -exec grep -i Regex {} \\;   "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r Regex Regex                                                "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and is not a directory. <|target|> find Path -type d -exec echo Regex \\;                      "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show a few lines of output from the beginning <|target|> find Path -type f -print0 | xargs -0 -I {} ls -a -l {}  | head -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all users who are currently logged in <|target|> who | sed Program | awk Program       | sed Program                 "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -name Regex -exec echo Regex Regex {} \\;          "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bit of a long-running file. <|target|> find Path -type f -exec file {} \\;   | xargs -I {} ls -l {}        | xargs -I {} ls -"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and change their permission to 664.\n <|target|> find Path -type f -exec chmod Permission {} \\;        Regex         "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} +  -exec chmod Permission {} \\;        "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bit more than 2 days old. <|source|> find Path -name Regex -mtime Timespan -print0 | xargs -0 -I {} ls -l {}             "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;                              Path         "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints the names of all files in a current folder and subfolders. <|target|> find Path -type f -mtime -Timespan -exec ls -a -l {} \\;               "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex -exec sed -i Program {} \\;  | tail -n Quantity                                     "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/files/ directory and print their names and sizes <|target|> find Path -user Regex -exec ls -l {} \\;        | awk Program      "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are newer than the file $1.txt <|target|> find Path -newerct Regex -type f -exec ls -l {} \\;  | wc -l         "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec echo Regex {} \\; -exec ls -l {} \\;                   "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under /home/user/directory/containing/files/directories and change their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\;          "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by user \"me\" <|target|> find Path -user Regex -exec ls -l {} \\;          | xargs -I {} ls -l {}  "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show a few lines of output from the beginning <|target|> find Path -type f -name Regex -exec sed Program {} \\;   | head -n Quantity          "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree. <|target|> find Path -name Regex -type f -exec gunzip -v -v -f File {} \\;                       "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec chmod Permission {} \\;    | awk Program                      "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and contains all the files in the current directory. <|target|> find Path -type f -exec ls -a -l {} \\;                         "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;                        "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -print                                  "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* This file is for the user to login as user \"user\" <|target|> su Regex Regex                                         "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree that are newer than file \"file\" <|target|> find Path -type f -newer File -exec ls -1 -l {} \\;    | awk Program          "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -exec basename {} \\;         | awk Program              "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                                                          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree that contains the current user's user name. <|source|> find Path -user Regex -execdir pwd \\;            Regex               "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -r -s {} \\;                          "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files/directories under /home/user/dir/ that were modified within the last day. <|target|> find Path -mtime -Timespan -name Regex -exec rm {} \\;              "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                                                         "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the directory names <|target|> find Path -exec dirname {} \\;                               "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -print                                                        "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -exec ln -s File Regex \\;                                         "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -name Regex -type f -print0 | xargs -0 -I {} du -s -h {}   {}                              "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the matched lines by replacing spaces <|target|> find Path -name Regex -exec gzip -c {} \\;     | tr Regex Regex            "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec mv {} File \\;                           "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file\" <|target|> find Path -newer File -print | xargs -I {} ls -l {}       | tail -n Quantity       "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are modified in less than 1 day ago <|target|> find Path -mtime -Timespan -type f -print0 | xargs -0 -I {} ls -l {}          "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all users who are currently logged in on the system <|target|> who | awk Program       | sed Program                   "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not readable by anyone. <|target|> find Path -type f! -perm Permission -print  | xargs -I {} ls -1 -l {}      "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show a few lines of output from the beginning <|target|> find Path -type d | sed Program | sed Program | sort | uniq  | xargs -I {} ls -l {} "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|target|> find Path -name Regex -type f -exec rm -r -f {} \\;          | sed Program           "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files in the current directory tree and its subdirectories. <|target|> find Path -type f -exec chmod Permission {} \\;               "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -name Regex -exec sed Program {} \\;                   "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part cubed copy of the current directory, and is not executable. It is used to create symbolic links in the current directory. <|target|> find Path -type d -exec cp -a {} File \\;        "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a recursive find for all files/directories under current directory that are newer than \"file.ext\" by modification time <|target|> find Path -newer File -print0 | xargs -0 -I {} ls -l {}    "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|source|> find Path -name Regex -exec echo Regex Regex {} \\;                          "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -f File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all users who are logged in <|target|> who | sed Program | sed Program | sort | uniq -c  | sort -n  | awk Program       | sort | uniq"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not modified in the last 60 minutes and do not search in the subdirectories <|target|> find Path -maxdepth Quantity -type f! -name Regex -mmin -Quantity "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;                                   "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bit-and-wholename-file.sh.sh. This file is a bit-and-split-from-here file. It is a bit-extended version of file.sh. <|target|> find Path -name"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user to view. It is a file with permissions 777.\n <|target|> find Path -name Regex -exec chmod Permission {} \\;                 "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for the user who is logged in to the system.\n <|target|> who | awk Program  | grep -v Regex       | sed Program             "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} echo Regex {}                "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by user 'user' <|target|> find Path -user Regex -exec ls -l {} \\;  | sort -n -r       "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the total size of the files/directories <|target|> find Path -type f -exec du -a {} + | awk Program      | sort | tail"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their sizes <|target|> find Path -name Regex -exec du -s {} \\;  | awk Program          "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and not accessible to other users. <|target|> ls -1 File | xargs -I {} rm File {}            {}               "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;                           "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -r -f {} \\;                                   delete          "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files under current directory and its subdirectories <|target|> find Path -type f -exec basename {} \\;                         "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all the files in the current directory tree that are owned by user \"user\" <|target|> find Path -user Regex -exec awk Program {} \\;                  "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a copy of the file /tmp/file.txt, and not the file itself. <|target|> find Path -type f -name Regex -exec cp {} File \\;                    "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file format is for use with the latest version of find. (case insensitive) and print.txt files. <|target|> find Path -iname Regex -type f -print0 | xargs -0 -I {} ls -l {}         |"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set read-write-execute permission for owner and group for each of them <|target|> find Path -type f -exec chmod Permission {} \\;             "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type d -exec chmod Permission {} \\;                      "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with line numbers and their names <|target|> find Path -name Regex -exec echo {} +        | xargs -I {} grep -n Regex {}    "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Report file system containing the current working directory. <|target|> df -P File | xargs -I {} ls -l -d -r -t {}         | tail - Quantity "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec echo {} \\;            "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a part of the current directory. <|target|> find Path -type f -name Regex -exec ls -l {} \\;      | xargs -0 -I {} ls -l"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all the files in the current directory tree that are owned by user \"user\" <|target|> find Path -user Regex -exec chmod Permission {} \\;       "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>(fn <|source|> Print the names of all users who are logged in <|target|> who | awk Program                      "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a copy of the current directory, and not the current directory. <|target|> find Path -type d -print0 | xargs -0 -I {} ls -a -l {}  | xargs -0"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec mount -o {} + | tee File | xargs -I {} echo {}    "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -atime +Timespan -exec zcat {} \\;                               "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the first time created by a process. <|target|> find Path -name Regex -type f -exec file {} \\;       | sort -n      | head"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all the files in the current directory and count them. <|target|> find Path -type f -exec ls -l {} \\; | sort -u  | xargs -I {} ls -l {}  |"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with '.js' extension under current directory tree and show the matched lines in sorted order <|target|> find Path -name Regex -exec grep -i -l Regex {} \\;      | sort   "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /dir/to/search/ in the current directory and below <|target|> find Path -type f -mmin -Quantity                     "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the name 'foo' in their names and show their contents <|target|> find Path -name Regex -exec echo {} \\;                 "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory that contains the current user's group. <|target|> find Path -group Regex -exec ls -l {} \\;                         "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <( find Path -name Regex -exec rm {} \\;  ) <( find Path -name Regex -exec rm {} \\;  )                             "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file or directory may be modified in error if it is not empty. <|source|> find Path -name Regex -type d -empty -exec ls -l {} \\;                      "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;                                          "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints the names of all files in a current folder and subfolders. <|target|> find Path -type f -exec echo Regex {} \\;         | sed Program     Program      "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the output by separating them with spaces <|target|> find Path -exec sed Program {} \\;                        "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory and its subdirectories <|target|> find Path -type f -exec ls -l -i {} \\;  | sort | uniq -c   | head -n Quantity      "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a must-run for all users. <|source|> find Path -type f -name Regex -exec ls -l {} \\;                      "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and is not accessible to anyone except those who are logged in. <|target|> find Path -type f -exec du -s -h -n -h {} + | sort -r | head -n Quantity"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -exec echo Regex Regex Regex Regex Regex Regex Regex \\;     | tr Regex Regex              "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and below that are not owned by the user \"jul\" <|target|> find Path -nouser -or -user Regex -type f -print0      "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of all the files in the current directory tree that are modified in the last 24 hours. <|target|> find Path -mtime -Timespan -type f -exec ls -a -l {} \\;  | xargs -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec echo {} \\;                           "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -name Regex -mtime Timespan -exec ls -l {} \\;       | grep Regex                  "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -exec ls -l {} \\;                                      "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part-only file, and it does not have to be expanded in the current shell. <|target|> find Path -name Regex -exec grep -i Regex {} \\;         | xargs -"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under /home/peter directory that are owned by user'me' <|target|> find Path -user Regex -exec ls -l {} \\;          "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -inum Quantity -exec chmod Permission {} \\;         Permission File       "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files/directories in the current directory. <|target|> find Path -mmin Quantity -exec ls -l {} \\;            | xargs -I {} ls -l {}  "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|target|> find Path -name Regex -exec grep -n Regex {} + | sed Program         | awk Program              "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and is not a directory. <|target|> find Path -name Regex -type f -execdir dirname {} \\;                     "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory. <|target|> find Path -type f -name Regex -exec echo {} \\;                             "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bitmap of the current directory. <|target|> find Path -name Regex -type f -exec file {} \\;      | xargs -I {} bit -I {} ls -l {}         "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by user 'user' and are newer than 'file' by modification time. <|target|> find Path -user Regex -newer File -print0 | xargs -0 -I {}"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\;  | awk -F Regex Program                               "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;            Regex          "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all users who are logged in to the system <|target|> who | sed Program | xargs -I {} echo Regex {}                      "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long line of jobs that are not jobs.\n <|source|> find Path -type f -exec sed -i Program {} \\;      | sed -i Program File        "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>file_name.txt = file_name.txt, or file_name.txt, or file_name.txt = file_name.txt, or file_name.txt, or file_name.txt, or file_name.txt, or"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File                                                    "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints current user name and full path of the current user. <|target|> echo $( whoami ) Regex                        "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files in the current directory tree <|target|> find Path -type f -exec compress File {} \\;            | awk Program     "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints process tree for each file in a current folder. <|target|> find Path -name Regex -exec echo {} \\;                    "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the matched lines with their contents <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;   | sed Program    "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Print the names of all files in the current directory tree that are newer than the file $1 and delete them <|target|> find Path -newer File -type f -print0 | xargs -0 -I {} rm -f"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and do not search in the sub directories. <|target|> find Path -maxdepth Quantity -type f -exec ls -l {} \\;          "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than \"file\" by at least one day ago. <|target|> find Path -mtime +Timespan -type f -exec ls -l {} \\;  "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their paths <|target|> find Path -user Regex -exec echo {} \\;         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -type f -exec chmod Permission {} \\;       "
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>(This file is for reference to the file 'file', ie. it is not for use by the user.)\n <|source|> find Path -name Regex -exec tar -r -f File {} \\; "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files under current directory and show the output of the ls command on each of them <|target|> find Path -type f -exec ls -l {} \\;      "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their sizes <|target|> find Path -type f -exec du -s {} -h {} \\; | awk Program "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /usr/share/doc and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the matched lines with their filenames <|target|> find Path -exec echo {} \\;          "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and show a few lines of output from the beginning <|target|> find Path -exec sed -i Program {} \\;        "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Example: \"I have a question about the name of the file 'file' <|target|> find Path -name Regex -exec grep Regex {} \\;          Regex "
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -name Regex -mmin +Quantity -delete  -type d -mmin +Quantity -delete               Path -type f -name"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                                      "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/peter/files and change their permission to 755 <|target|> find Path -type f -exec chmod Permission"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are at least three levels deep and do not display in the subdirectories. <|target|> find Path -mindepth"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are not owned by user \"tom\" and do not have the permission to run them. <|source|> find Path -type f"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all the files in the current directory and its subdirectories. <|target|> find Path -type f -name Regex -exec ls -l {} \\;"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the users who are currently logged in. <|target|> find Path -name Regex -exec echo {}"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -name Regex -exec chmod Permission {} \\; "
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>finds the name of the file name in the current folder. <|target|> find Path -name Regex -exec echo Regex Regex Regex \\;       "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and search for 'file' in those files/directories. <|target|> find Path -name Regex -exec grep -i Regex {} File"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is not a file.txt. It is a file.txt. <|source|> find Path -type f -name Regex -print0 | xargs -0 -I {} file"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory and print their names and their paths. <|target|> find Path -name Regex -print                            "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part estimating the disk space taken up by all files in the current directory. <|target|> find Path -type f -iname Regex -printf '%s %p\\n' | sort -u  -n | head - Quantity     "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;                           "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a must-read for all users. It's a file that is not readable by anyone. <|target|> find Path -type f -exec ls -a -l {} \\;  | sort -r | awk Program        | sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of the current directory. <|source|> find Path -type f -exec ls -l -a -I {} \\;      | grep Regex                  "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and its sub-directories. <|target|> find Path -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Re"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;                         "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f -exec grep Regex {} \\; -print | xargs -I {} cat {} \\;             Regex                     "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/files/ that are not owned by the user'myuser' <|target|> find Path -nouser -or -user Regex -print           "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and not a subdirectory. <|target|> find Path -name Regex -type f -execdirname Regex {} \\;                    "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the file names and sizes <|target|> find Path -type d -printf \"%s\\n\" | awk Program      | awk Program     "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long, recursive process with no user interaction. <|target|> ls File | xargs -I {} rename Regex {}                           "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all the files in the current directory which are not readable by the user and delete them. 2. find Path -type f -not -name Regex -exec rm -f {} \\;      | xargs -I {} find {} -"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>In this file, the first line of output of command \"bash\" is replaced by the first line of output of command \"bash\" <|target|> $( which Regex )  | tail -n Quantity      | awk Program    "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -exec chmod Permission {} \\;                   "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the number of lines in their output <|target|> find Path -type f -exec ls -l {} \\; | awk Program        | sort | un"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and not the sub-directory itself. <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} ls -l {}        "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l {} \\; | awk Program     | sed Program       "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all users who are currently logged in <|target|> who | awk Program | sed Program | sed Program | xargs -I {} chmod Permission {}             "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -type f -exec chmod Permission {} \\;               Permission   "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Prints the current directory name with the current date in the current shell. <|target|> echo $( basename $( date ) )                          "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all users who are logged in <|target|> who | grep Regex | sed Program | sed Program | awk Program         | awk Program            "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( readlink -f File )                                                   "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;    | grep Regex                 "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show a few lines of output from the beginning <|target|> find Path -name Regex -exec echo {} \\;                  "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -not -name Regex -exec echo {} \\;                      "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $x directory and set read permission for group and no permission for others <|target|> find Path -type f -exec chmod Permission {} \\;              "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and show the number of lines in them <|target|> find Path -iname Regex -exec grep -i Regex {} \\;  | wc -l        | sed"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -1 -l -i -w -v -e File | xargs -I {} wc -l {}                                  "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec file Regex -exec sed -i Program {} \\;        /tmp/tmp/tmp/tmp/file        "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below that are not newer than 'file' <|target|> find Path -type f! -newer File          "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print the names of their owner, their group, and their file/directory paths <|target|> find Path -type f -exec ls -l {} \\;"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print the names of the directories they are in. <|target|> find Path -type f -exec echo Regex {} \\;     | sed -n Program  "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show a few lines of output from the beginning of each of them <|target|> find Path -type f -exec ls -l {} \\;   "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find all the files in the current directory and search for the regex 'pattern' in them. <|target|> find Path -name Regex -exec grep -H -n Regex {} +   "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files in the current directory tree that are newer than \"file1\" <|target|> find Path -type f -newer File -type f -print0 | xargs -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe first line of output from the command \"ls -l\" is a line with number \"1\" followed by a number \"2\" followed by a number \"3\" <|target|> ls -l | awk -F"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all the files in the current directory and do not search in the subdirectories. <|target|> find Path -maxdepth Quantity -type f -exec ls -l {} \\;    "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H Regex {} \\;                                 "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a copy of the file 'file' in the current directory. <|target|> find Path -group Regex -print0 | xargs -I {} cp File {}       "
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the name \"~\" in their names and append a null character at the end of each path <|target|> find Path -name Regex -"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for the first time that the file is modified after the file /tmp/ <|target|> find Path -type f -newer File! -newer File        "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, and it contains all files that are modified in the current directory. <|target|> find Path -type f -name Regex -mtime Timespan -exec rm {}"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and is not accessible to other users.\n <|target|> find Path -type f -exec bzip2 -k -v -v -e File {} \\"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all files/directories under /usr/bin that were modified in less than 1 day ago. <|target|> find Path -mtime -Timespan -name Regex -exec ls"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type d -exec chmod Permission {} \\;      "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of their owner and group. <|target|> find Path -name Regex -exec echo {} \\;     "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} \\;                                "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\;     "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are owned by user \"user\" and change their owner to \"user\" <|target|> find Path -user Regex -exec chown Regex {} \\;          | x"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a bit of a long-running script, but it's not a full-featured one. <|source|> find Path -name Regex -exec ls -a -l -r {} \\;               "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree and its subdirectories. <|target|> find Path -type f -exec sed Program {} \\;       | sed Program             "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for files that are writable by both their owner and their group and show the file names <|target|> find Path -perm Permission -exec ls -l {} \\;       | grep Regex        "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a long listing of the latest modified file in the current directory. <|target|> find Path -type f -size +Size -exec ls -l {} \\;  | tail -n Quantity | xargs -I {} ls -l {} {}  | xargs -I"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory, which is called \"file\" and is not a part of the directory itself. <|target|> find Path -name Regex -prune -or -name Regex -print0 | xargs -0 -I {} ls -l {}"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory tree, and it is not accessible to other users. <|target|> find Path -type f -exec file {} \\;                         "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} echo Regex Regex {}                                   "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under /home/user/directory/to/search/in/ and print their names and permissions <|target|> find Path -type d -exec chmod Permission {} \\;                "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and sub-directories that are owned by the user \"user\" <|target|> find Path -user Regex -exec chown -R Regex {} \\;            "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|source|> Find all files/directories under current directory and print their names and sizes. <|target|> find Path -name Regex -exec ls -l {} \\;             "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by user \"user\" <|target|> find Path -user Regex -exec rm -r -f {} \\;           "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan -or -name Regex -atime +Timespan -or -name Regex -atime +Timespan -or -name Regex -atime +Timespan -or -name Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -mindepth Quantity -exec chmod Permission {} \\;            "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the name \"file\" and with the name \"file\" in the current directory tree and search for the pattern \"file\" <|target|> find Path -name Regex -printf \""
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for the first time users to find.txt.\n <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} ls -1 -l {}   | head -n Quantity "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than \"file1\" <|target|> find Path -newer File -newer File -print  | xargs -I {} ls -l {}    "
    }
  ],
  "5.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of the long list of all the files in the current directory tree that are not owned by the user or group of the user or group user <|target|> find Path -not -user Regex -type f -name"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the first 10 lines of their names and their sizes <|target|> find Path -name Regex -exec echo Regex | sed -e Program | xargs -I {} ls -"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory recursively that are newer than the file \"file\" by modification time <|target|> find Path -newer File -print       | sed -n Program "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Username: \"username\" to the console and print the output of \"file.txt\" <|target|> echo Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex | tee -a File   "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for all files that are not readable by anyone <|target|> find Path -type f! -perm Permission        | grep Regex    | grep Regex       "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by the user \"jul\" and have been modified in the last 24 hours. <|target|> find Path -user Regex -mtime -Timespan -type f -"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec echo Regex Regex Regex \\;          | sed Program   "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\; | tail -n Quantity                   |"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are not owned by the user'me' in the current directory and its sub-directories and print their names and sizes <|target|> find Path -not -path Regex -not -user Re"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Find all files/directories under current directory and move them to the folder /mnt/mp3 <|target|> find Path -type f -iname Regex -exec mv {} File \\;             "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each line of the file 'file' <|target|> awk Program Program Program | head - Quantity | sed Program       | sed Program             | sed Program   "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head         | head           | tail            | xargs -I {} echo Regex Regex {}     "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory's subdirectory tree, and is accessed by the shell. <|target|> find Path -user Regex -exec echo Regex Regex Regex {} \\;                  "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory that are not owned by user'sar' and do not have the permission'sar' <|target|> find Path -not -user Regex -not -path Regex -not -path Regex -not"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for the use of the user \"jul\" in the current shell. <|target|> sed Program File        | grep Regex         | grep Regex         | sed Program "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command 'install' on each of them to create a tar ball of their names and their sizes <|target|> find Path -type f -exec tar -c -v -f File {} \\;   "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\;        | grep Regex               | awk Program  "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -name Regex -print0 | xargs -0 -I {} sed -i Program {}              "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of all regular files from the current directory tree that are less than 50 days old and contain at least one unique line <|target|> find Path -type f -mtime +Timespan -exec grep -E Regex {} + | sed Program  | sed -n Program  "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below that have the same name or number in their names and copy them to /tmp/foo/bar <|target|> find Path -name Regex -exec chmod Permission {} \\;         "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Print the first line of output of \"ls -l\" with \"less\" in the output of \"more\" <|target|> ls -l | head - Quantity | awk Program  | xargs -I {} ls -l {}   | more  | grep Re"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^Movies[0-9]*' in all the files in the current directory and its subdirectories. <|target|> find Path -type f -name Regex -exec grep -H -n Regex {} \\;   | grep -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex 'pattern' in all *.txt files in the current directory tree and print the names of the files that match <|target|> find Path -name Regex -exec grep -H -n Regex {} + | xargs -I {} grep -H Regex {}"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex | sed Program | xargs -I {} cat {}                         "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files/directories that are owned by user 'user' in the current directory and below <|target|> find Path -user Regex -type f -printf '%h/%f\\n' | sort -r | head -n Quantity   "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of the list of all files and directories from the current directory tree that contain \"needle\" in their names <|target|> find Path -type f -name Regex -exec grep -H Regex {} + | awk Program      | sed"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File            File                                              "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory containing the current working directory of the current shell. <|target|> find Path -type d -name Regex                                   "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, the world was changed. <|source|> Search for the word \"foo\" in all the files in the current directory tree and display the number of lines in each file. <|target|> find Path -name Regex -exec grep -i Regex {} + | wc -"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the case insensitive regex '^.*/[a-f0-9\\-]*[a-f0-9\\-]*[a-f0-9\\-]*[a-f0-9\\-]*"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                                                         "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents. <|target|> find Path -name Regex -exec cat {} +  | sed Program       | sed Program             | sed Program "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex                                                          "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex Regex Regex | xargs -I {} ls -l -d {}      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex Regex Regex | sed Program          | tr Regex Regex  "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each line in \"file\" that contains the string \"text\" <|target|> comm -1 -2 <( sed -e Program ) <( sed -e Program )    | awk Program      | sed -e Program"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user'me' <|target|> find Path -user Regex -name Regex -exec mv {} File \\;                  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, interactive shell with built-in support for interactive shell, enabling shell expansion, and enabling shell variables to run.\n <|target|> set -o shell_regex Regex                      "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have been modified in the last 24 hours. <|target|> find Path -mtime -Timespan -type f -exec ls -l {} \\;   | sort     | xargs -I {} ls -"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new age of music. <|target|> find Path -type d -name Regex -exec mv {} File \\;                             "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree <|target|> find Path -name Regex -exec basename {} \\;         | grep Regex           "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part-only file, and does not display the contents. <|source|> Print the last 10 lines of the file, and the last 10 lines of the file if it is empty. <|target|> find Path -type f -empty -exec"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new 'Makefile' utility for Unix commandeers that prints all files in the current directory and subdirectories. <|target|> find Path -name Regex -exec echo Regex {} +               "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print the path to them <|target|> find Path -type f -exec echo Regex \\;       | xargs -I {} chmod Permission {} "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree that are not newer than the file \"index.html\" <|target|> find Path -type f! -newer File -exec sed -i Program {} \\;   | sed -"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the home and abroad of all users is whether their login information is correct. <|source|> find Path -type d -iregex Regex -exec grep -H Regex {} \\;     | sed Program      "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common first field of all the files in the current directory tree that contain \"file1\" and \"file2\" in their names. <|target|> find Path -name Regex -exec grep -i Regex {} + | sed -n Program   | aw"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their paths <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex | xargs -I {} echo Regex Regex Regex {}"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v -v -R File File File                                          "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first 10 commands in the current shell <|target|> history | awk Program  | sed Program       | sed Program        | tr Regex Regex     "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory of the user \"me\" and the current user \"me\" <|target|> find Path -user Regex -name Regex -exec echo Regex Regex {} +      | sed Program    "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -f File {} \\;                                     "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print lines containing \"no\" in the output of \"file\" that does not appear in the other <|target|> diff -q File File | grep -E -i Regex        | grep -E Re"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Chapter 1: The first instance of \"file\" in a pipeline is the one that contains the first instance of \"file\", and the first instance of \"file\" in a pipeline is the one that contains the second instance of \"file\" in the pipeline. <|target"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the current directory listing of the current directory, \"what is the current directory?\" <|target|> find Path -type d -exec dirname {} +    | grep Regex   | sed Program       "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, open-source program that compresses all files in a current directory and compresses the output to standard output. <|target|> find Path -name Regex -exec compress File {} \\;   | awk Program    "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, fast, and interactive video file, \"file.mp4\" is a file with a number on each line that contains the number of occurrences of \"1\" in the output. <|target|> grep -i Regex File | sort -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with '.js' extension under current directory tree that match the regex 'index.html' in their paths <|target|> find Path -name Regex -exec grep -H Regex {} +   "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints long listing of all files and directories in a current folder. <|target|> ls -l -d File | sed Program | sed Program        | awk Program        "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, but it's not long.\n <|target|> find Path -inum Quantity -exec rm {} \\;                                 "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Print the names of all files/directories under current directory tree that match the pattern '^[0-9]+*' in their contents <|target|> find Path -name Regex -exec grep -H -n Regex {} +   | xargs -"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -r -f {} \\;                                             "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%p %p\\n\" | awk Program                  "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each line in \"file\" as a comma separated line <|target|> paste File | awk Program         | sed Program              | sed Program   "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, I was writing a column about the history of the current day. <|target|> find Path -type f -iname Regex -exec sed -i Program {} \\;                    "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the first time that the user can run command \"n\" on a system. <|target|> find Path -type f -name Regex -exec sed Program {} \\;    | grep Regex     | tr Regex Regex    "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'tom' <|target|> find Path -user Regex -ctime +Timespan                      "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are owned by user 'tom' under '/home' directory tree <|target|> find Path -user Regex -not -newer File              | grep Regex   "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} +                          "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory with no path to the current directory. <|target|> find Path -type d -name Regex -or -path Regex -or -path Regex -or -path Regex -or -"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec basename {} \\;   | grep Regex      | cut -d Re"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of output from standard input <|target|> sed -i Program Program      | head                  "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory and print the first 10 lines of output from each of them. <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex Re"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory and its sub-directories. <|target|> find Path -maxdepth Quantity -name Regex -exec echo Regex Regex {} \\;  "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files and directories in the current directory tree that contain \"foo\" <|target|> find Path -name Regex -exec grep -H Regex {} + | xargs -I {}"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a recursive process, with no output from the beginning. <|target|> ps -e -f File | grep Regex | grep -v Regex     | xargs -I {} ls -l -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -atime +Timespan -exec zcat {} \\;       | tee File                      "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory of the current directory, which contains the directory containing the current working directory. <|target|> find Path -type d -exec dirname Regex {} +     | sort -u  | sed Program |"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories named 'file.txt' under current directory and print the path to the directory containing the file.txt file. <|target|> find Path -name Regex -exec dirname {} Path -printf '"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex 'expr' in all the regular files in the current directory and below and print the names of the matched files <|target|> find Path -type f -exec grep -i Regex {} + | sed -n Program      |"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each line in \"file\" that matches the pattern \"file\" in the current directory and below. <|target|> sed Program File        | head              "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '<string1>.*/[0-9]+.*/[0-9]+.*/[0-9]+.*/etc/file' in all the.c and.h files in the current directory tree and print the output <|"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^.*/' in all files in the current directory and below and print the matched lines along with their paths <|target|> find Path -type f -exec grep -H Regex {} + | xargs -I {} grep -H Re"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec rm -f {} \\;                        "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -l -d -S -h {} \\;    | awk Program             "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -S {} \\;      | awk Program                                 "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a part of the current directory, and contains all files that are not executable by default. <|target|> find Path -type f -not -path Regex -not -name Regex -not -name Regex -not -name Regex -not -name Re"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '^\\./course\\*\\*\\*\\*\\*' in their contents <|target|> find Path -name Regex -exec grep -H -E Regex {} \\;"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> View the contents of \"file\" <|target|> cat File | xargs -n Quantity -I {} ls -l -S -t {} | tail -n Quantity        | awk Program      | sort | uniq    "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new \"less\" line in the history of the file \"file\" contains the first line of the last line of the file, and the last line of the file after the last one. <|target|> history | grep -E -o Regex | less"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the first 10 lines of output from the last 10 commands to be expanded <|target|> find Path -exec echo Regex Regex Regex Regex {} \\;  | sort |"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for all files/directories with spaces in their names under current directory and below. <|target|> find Path -name Regex -exec grep -E Regex {} +    | sed -n Program         "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and its sub-directories that are not owned by any user and delete them. <|target|> find Path -nouser -type f -user Regex -exec rm {} \\; "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files and directories of the current directory tree <|target|> find Path -name Regex -exec echo {} +   | xargs -I {} ls -l {}         "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;         | sed Program         "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are owned by the user'myuser' in the entire file system and print their names <|target|> find Path -user Regex -exec echo Regex Regex {} +     "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -exec grep Regex {} +                                       "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex -exec grep -H Regex {} +      | sed -n Program       "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that have not been modified in the last 30 days and delete them <|target|> find Path -mtime +Timespan -exec rm -f {} \\;       "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their contents <|target|> find Path -inum Quantity -exec cat {} \\;   | grep Regex        | sed Program        "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first 10 lines of the output of \"bash\" with \"more\" removed <|target|> cat File | head -n Quantity | sed Program | head -n Quantity | sed Program | sed Program      | tail -n Quantity "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new version of the \"old\" regex pattern in the current shell, with new lines removed from the output of the regex 'expr' <|target|> grep -E -o Regex File | sed Program | grep -E -o Regex | sed Program | grep -E"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and long-running \"file\" with a new and different user and group, but different permissions, permissions, and ownership of the file. <|target|> chown -R Regex File File                "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of output of \"file\" <|target|> sed Program File | sed Program       | sed Program        | sed Program         | head - Quantity  "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first line of the long-running \"file\" file, \"file.txt\", is a common one in the current shell. <|target|> find Path -name Regex -exec ls -l -l -S -h {} \\;     | grep Re"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and expanded version of the \"new\" command for bash, replacing the word foo with bar in all regular files under current directory. <|target|> find Path -type f -exec sed -i Program {} +  | xargs -I {} mv File File  "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -iname Regex -exec grep -i Regex {} \\; -print  | head -n Quantity                                  "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory and its sub-directories that are owned by the user 'user' <|target|> find Path -user Regex -exec grep -H Regex {} \\;        "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex \"expr\" in all regular files in the current directory tree and show the matched lines with their filenames <|target|> find Path -type f -exec sed -i Program {} \\;  | sed -i Program   "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files from the current directory tree that are owned by user \"user\" <|target|> find Path -type f -user Regex -exec sed -i Program {} \\;      "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all the files in the current directory tree that have not been accessed in the last 30 minutes. <|target|> find Path -type f -amin +Quantity -exec ls -l {} \\;   | sort | un"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee -a File                                                  "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Chapter 1: The first line of the file that contains the line number, the second line of the file that contains the line number, and the last line of the file that contains the line number, and the last line of the file that contains the line number. <"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'amzadm' and delete them <|target|> find Path -user Regex -exec compress -u -d -m Quantity File {} \\;"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with their names ending in \"~\" or \"~/tmp\" <|target|> find Path -name Regex -or -name Regex -or -name Regex   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree and their sizes along with their sizes and paths <|target|> find Path -type f -exec ls -l -s {} \\;        | aw"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all files that have been modified in the last 30 minutes. <|target|> find Path -mmin -Quantity -type f -mmin +Quantity | xargs -I {} ls -l -d {}    "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Print the names of all regular files from the current directory tree <|target|> find Path -type f -exec ls -l {} \\;  | tr Regex Regex            "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each line in \"file1\" and \"file2\" and print the second line of each line in \"file2\" and \"file3\" <|target|> comm -1 -2 <( sed Program"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type d -name Regex -exec chmod Permission {} \\;                        "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory with no subdirectories. <|target|> find Path -maxdepth Quantity -type d -name Regex -exec echo Regex {} \\;         |"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for the user with the most lines in the output. <|target|> cat File | xargs -n Quantity -I {} ls -l {}    | grep -E Regex | xargs"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the home directory for all files and directories in the current directory. <|target|> find Path -name Regex -exec echo Regex Regex Regex {} +        "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | grep Regex | grep -v Regex | cut -d Regex -f Number        | grep Regex         | tr Regex Re"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex '^.*/[0-9]+*' in their contents <|target|> find Path -iregex Regex"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' in the current directory and its subdirectories and print their names and sizes <|target|> find Path -name Regex -exec echo Regex"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a part of the current directory, and contains the last 10 lines of the file 'file' that have not been changed in the last 10 days. <|target|> find Path -type f -daystart"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory of the current directory is used to store the current date of the last login to the system. <|target|> find Path -name Regex -exec date -f File {} +   | sed Program "
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -name Regex -maxdepth Quantity -mmin +Quantity -type f -delete  -type f -delete        -delete            "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                                      "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nExample: \"file.txt\" is a shell script that is used to create symbolic links in the current directory. <|target|> find Path -name Regex -exec ln -s -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the most used files in the current directory tree, sorted from oldest to newest, with the last field removed from the output of the ls command. <|target|> find Path -type"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, but small, file system containing the current working directory of the current working directory. <|target|> find Path -type d -exec chgrp Regex {} +  "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\nThis file is a recursive removal of files that are not newer than \"file.txt\" <|target|> rm -r File File File           "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all files in the current directory and subdirectories. <|target|> find Path -type f -name Regex -exec echo Regex Regex {} \\; "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe current directory is a directory of the current working directory. <|target|> find Path -type d -name Regex -exec basename {} \\;   | wc   "
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with spaces as spaces <|target|> find Path -name Regex -print0 | xargs -0 -I"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path to them <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '^#!/bin/ksh' in their paths and copy them to /tmp/ <|target|> find"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory containing the current working directory. <|target|> find Path -maxdepth Quantity -type d | xargs -I {} dirname {}                | xargs -I {}    "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that were modified in the last 30 minutes. <|source|> find Path -mmin -Quantity -type f -name Regex          | xargs -I {} ls -l"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -path Regex -prune -or -name Regex -print                    "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new age of digital content in the home screen. (file name)\n <|target|> yes | awk Program  | sort | uniq -c | sort -n -r | grep Regex        | grep Regex     "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'tom' <|target|> find Path -user Regex -print -exec ls -l {} \\;    | grep Regex         "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec cat {} +    | xargs -I {} rm {}               "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec cat {} +    | sed Program                  "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | xargs -I {} grep Regex {}                                                "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex 'expr' in all files under current directory and below, and show the matched lines by separating them with a space <|target|> find Path -type f -exec sed -i Program {} \\;   | sed -i Program  "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, multi-processed process with no user interaction, no terminal, no command execution, and no execution time.\n <|target|> ps -A -u -i -e -n -w, -o, -t, -n -e -t,"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type d -exec chmod Permission {} +      -P Regex        "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory tree that are not accessible to the user or group <|target|> find Path -maxdepth Quantity -not -path Regex -type d -or -name Regex -or -name Re"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first instance of \"f\" in the file \"file\" is a case insensitive search for all files with the name \"file\" in their names and descriptions, ignoring the case of \"f\" in the file. <|target|> find Path -iname Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory of the current directory is a directory of the current directory. <|target|> find Path -type d -name Regex -exec dirname {} \\;     | sed Program             "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -print0 | xargs -0 -I {} cat {}                  "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type d -empty  | sed Program     | sed Program     | sed Program      "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^MoviesDir*' in all the.jpg files in the /home/p/uploads directory tree and show the matched lines with the file names <|target|> find Path -type f -name Regex -"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a shell script that can be used to create a symbolic link to file \"file.txt\" <|target|> ln -s File Regex                      "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the home page about the current directory. <|target|> find Path -name Regex -exec grep Regex {} +     | sed -n Program                 "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and unique set of permissions for all regular files in the current directory tree. <|target|> find Path -type f -perm Permission -exec chmod Permission {} \\;              Directory     "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree that match \"file1\" <|target|> find Path -name Regex -exec sed -i Program {} \\;       | awk Program       "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'user' <|target|> find Path -user Regex -print                       "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex Regex Regex Regex                                                 "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new version of the regex 'expr' is in use in all regular files under current directory and below. <|target|> find Path -type f -iregex Regex -exec grep Regex {} +       | grep Regex     "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Chapter 1: Find all files/directories under current directory and print their names and paths <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex {} \\;                "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for 'foo' in all regular files under current directory and show the matched lines with their filenames <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\;    | sed Program  "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the paths to them <|target|> find Path -exec chmod Permission {} \\;                       "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them to console <|target|> find Path -type f -iname Regex -exec echo Regex Regex {} \\;      | sed Program       "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -exec awk Program {} \\; | awk Program                         | sort   | uniq          "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe current directory is a directory with no sub-directories. <|target|> find Path -maxdepth Quantity -name Regex -type d -exec echo Regex \\;          "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Download \"file.txt\" and print the lines from the output to standard output and to stdout <|target|> cat File | xargs -I {} cat {}             | sed"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory that are less than 50 bytes in size <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;  | grep -E Regex |"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the first line of their paths <|target|> find Path -type f | sed Program | xargs -I {} echo Regex | sed Program | head"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\u2039\u2039\u2039\u2039\u2039\u2039\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u201d\n <|target|> find Path -type f -mtime Timespan     "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nFind all files/directories under current directory and print their paths. <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex \\;          "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with '.js' extension under current directory tree and print the path to them <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Print the names of all the files in the current directory tree that are not in the path specified by the variable \"path\" <|target|> find Path -maxdepth Quantity -type f -exec basename Re"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all files that are owned by user 'pete' and are newer than the file 'file' by modification time. <|target|> find Path -user Regex -newer File -print | x"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H Regex {} \\;                 | grep Regex             "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named'my_file' is created in the home directory of the current user. <|target|> find Path -name Regex -or -name Regex -print  | xargs -I {}"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex 'foo' in all the files in the current directory tree and search for the regex 'bar' in those files <|target|> find Path -name Regex | xargs"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>(Series of numbers from 1 to 10)\n <|target|> find Path -maxdepth Quantity -type f -name Regex -exec ls -l -r {} \\;      | awk"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -name Regex -exec basename {} \\;    | tail -n Quantity"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Search for files that are not in the current directory and its sub-directories and delete them. <|target|> find Path -maxdepth Quantity -type f -name Regex -not -"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'root' <|target|> find Path -user Regex -exec echo Regex {} \\;     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the directories from the current directory tree and the names of the subdirectories of the current ones <|target|> find Path -type d -exec echo Regex -n Regex {} \\; "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1 | grep -v Regex -E Regex File | head -n Quantity     | grep -E Regex -E -v Regex         | sort -n |"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} \\;                    | awk Program         "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Print the first 10 commands in the history file of each directory, separating each entry with comma (':). <|target|> find Path -group Regex -exec echo Regex Regex Re"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -print0 | xargs -0 -I {} sed -i Program {}                "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, interactive shell for Unix users with no shell, no command-line arguments, and no user interaction. <|target|> find Path -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, I changed the owner to \"root\" of all files in the current directory tree. <|source|> find Path -type f -exec sed -i Program {} \\;                 File   "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '*\\(LOG_LOG_FILE.log)$' in their names <|target|> find Path -regextype posix-egrep -regex Regex    "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that have not been modified in the last 30 min. <|target|> find Path -size +Size -print | grep -E Regex  | xargs -I {} ls -l {}     "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex \\;      | wc -l      | grep Regex"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Display the current directory tree in a more interactive way than any other user can do. <|target|> tree -i      | sed Program                          "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -print | xargs -I {} rename Regex {}                                           "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree, except for those that match regular expression \"*2015-01-01*\" <|target|> find Path -type f -not -name Regex -print | xargs -I {} chown Regex"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files and directories in the current directory tree, except those whose names end in \"~\" and those whose names end in \"~/test\" <|target|> find Path -maxdepth Quantity -name Regex -not -path Regex -"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory contains the current working directory of the current working directory. <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex Regex Regex \\;      | sed Program   "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a copy of the file \"file.tar.gz\" from the current directory. <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} tar -r -v -f File {}"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -user Regex -atime +Timespan -name Regex                                      "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, I changed the owner of the file \"file\" to \"user1\" <|target|> chmod Permission File                        "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^[A-Za-Za-Z]*' in all the files in the current directory tree and show the matched lines with their filenames <|target|> find Path -type f -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a part of the current directory, and it is used to create a symbolic link to \"file\" in the current directory. <|target|> ln -s File Regex          | sed Program "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are owned by the user 'user' <|target|> find Path -user Regex -iname Regex -exec sed -i Program {} \\;         "
    }
  ],
  "6.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory's directory structure contains a list of all files and directories that are owned by user \"pete\" <|target|> find Path -user Regex -execdir dirname {} +              "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all the files in the current directory tree that are owned by the user joe or are newer than the file `index' <|target|> find Path -user Regex -user Regex -print0 | xargs -0 -I"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -maxdepth Quantity -type d -exec echo Regex Regex Regex Regex \\;    "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex         | grep Regex       | sed Program                | sed Program            "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and less than 100MB <|target|> find Path -size +Size -size -Size -not -iname Regex       "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below that are larger than 10 megabytes and print the names of the files and their sizes <|target|> find Path -type f -size +Size -exec ls -l -d {} \\; "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were modified in the last 24 hours. <|target|> find Path -mtime -Timespan -exec ls -l {} \\;    | grep Regex     "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest files in the current directory tree, sorted from oldest to newest, with the last modification time in the variable \"lastModified\" <|target|> find Path -type f -printf \"%T@ %p\\n\" |"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current folder which have been modified in the last 60 minutes and display the total disk space used <|target|> find Path -mmin -Quantity -type f -printf \"%C@ %p\\n\" |"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Find all the files in the current directory and below that have been modified in the last 180 days <|target|> find Path -type f -mtime -Timespan -mtime -Timespan -exec mv {} File File \\;       "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files in the current directory tree that were last modified more than 7 days ago <|target|> find Path -mtime +Timespan -daystart -mtime +Timespan                "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head           | tail            | cut -d Regex -f Number                  "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last 10 lines of their names <|target|> find Path -type f -exec sed -i Program {} \\;  | tail -n Quantity         | tail -n Quantity "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new standard in use for all the regular/normal files in the current directory tree that does not contain the filename \"test.sh\" <|target|> find Path -type f -name Regex -exec grep -l Regex {} \\;      | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not readable by the user and delete them <|target|> find Path -type f -not -perm -Permission -exec rm -r -f {} \\;         | grep Re"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -perm Permission                                     "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type d -printf \"%s\\n\"                         "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the case insensitive regex 'pattern' in their names <|target|> find Path -iname Regex -type f -iname Regex              | xargs"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -type f -name Regex -execdir ls -l {} \\;     | awk Program     "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -perm Permission -exec ls -l {} \\;  | wc -l        | tail - Quantity            "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new type of \"c\" for every C or C++ file in the current directory tree. <|target|> find Path -type f \\( -iname Regex -or -iname Regex -or -iname Regex \\) -exec echo Regex {} \\;     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not modified in the last 30 minutes. <|target|> find Path -mmin -Quantity | xargs -I {} ls -l {}                   "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the names of their parent directories <|target|> find Path -type f -exec dirname {} \\;      | sed Program                     "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -name Regex -exec echo Regex \\;                       "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and print them with null character as the delimiter <|target|> find Path -type f -print0                       Regex     "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the first 10 lines of output from their paths to the directory containing the file name. <|target|> find Path -name Regex -exec echo Regex Regex Regex \\;     | tail - Quantity  "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                                  chmod Permission                     "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of files from the current directory tree that were modified less than 60 minutes ago. <|target|> find Path -mmin -Quantity -type f -printf '%s\\n' | sort | uniq | xargs -I {} ls -l {}    "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for the regex 'foo*' in all regular files under current directory tree and show the matched lines along with the file names <|target|> find Path -type f -exec grep -i Regex {} + | xargs -I {} grep Regex {}       | xargs -"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -name Regex -execdir dirname {} \\;                     "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                                                         "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -type d -exec echo Regex Regex Regex Regex {} \\;    | tr Regex Regex Regex     "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex                                                    "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last 10 lines of output <|target|> find Path -exec tail -n +Quantity -printf '%TY-%Tm-%Td %TH:%TM%p\\n' | tail -n +"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the top 10 most used utilities in the current directory. <|target|> find Path -type f -printf \"%s %p\\n\" | sort | uniq -c | sort -n | head -n Quantity | cut -f Number | xargs -I {} ls"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec gzip -l {} \\;                          "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -type f | xargs -I {} wc -l {}  | tail -n Quantity | xargs -I {} wc -l   | tail"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 7005. <|target|> find Path -type f -exec chmod Permission {} \\;                       "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10KB and less than 10KB <|target|> find Path -size +Size -size -Size -Size -size -Size -print      | xargs -I {} ls -l {} "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print the first two lines of output from the first two <|target|> find Path -type d | head - Quantity  | head - Quantity    | tail - Quantity  | xargs -I"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory and below <|target|> find Path -type d -exec basename {} \\;         | grep Regex           "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and below that have been modified in the last 60 min <|target|> find Path -maxdepth Quantity -type f -mmin +Quantity -exec echo Regex Regex Regex {} +   "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all the files in the current directory tree which are larger than 10MB and less than 50 MB and delete them. <|target|> find Path -size +Size -size -Size -size -Size -size -Size -print0 | xargs"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;          | tr -d Regex Regex"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of output from standard input showing the first line of output from standard input <|target|> head - Quantity | grep Regex | cut -d Regex -f Number   | tr -s Regex | cut -d Re"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -print0                 "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^' in all files under current directory <|target|> find Path -type f -exec grep Regex {} \\;      | grep Regex        | grep Regex "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n|source|> Find all files/directories under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} \\;     | sed Program         "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -R File File File File                                       Path      "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +   | awk Program         | sed"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <| grep Regex      | grep Regex               | grep Regex                 | grep Regex   "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -execdir tar -c -v -f File {} \\;                                  "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;                "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the last file in the current directory tree, starting with the last slash. <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex \\;  | tail - Quantity   | x"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\nThis is a long recursive process that removes all files in a current folder but not in a sub folder. <|target|> find Path -type f -exec rm -f {} +  | xargs -0 -I {} echo Regex Regex Re"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -name Regex -print0                    "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Chapter 1 | Chapter 2 | Chapter 3 | Chapter 4 | Chapter 5 | Chapter 6 | Chapter 7 | Chapter 8 | Chapter 9 | Chapter 10 | Chapter 11 | Chapter 12 | Chapter 13 | Chapter 14 | Chapter 15 | Chapter 16 | Chapter 17 | Chapter 18 | Chapter"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -name Regex -exec grep -H Regex {} \\;       | xargs -I {} dirname {}              "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that were last modified more than 30 min ago <|target|> find Path -mmin +Quantity -type f -printf \"%P\\n\" | xargs -I {} ls -l {} "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;                  | xargs -I {} chmod"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in the current directory <|target|> find Path -name Regex -exec dirname {} \\;     | grep -v Regex       "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -r -f {} \\;                                             "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^M?' in all files under current directory <|target|> find Path -type f -exec grep Regex {} \\; -exec sed -i Program {} \\;      | tr Regex Regex Regex   "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -type d -exec awk Program                       "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were last modified between 90 and 1005 days ago. <|target|> find Path -type f -mtime +Timespan -mtime -Timespan -exec rm -f {} \\;       "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Image: http://i.suepearson.scoop.com/wp-content/uploads/2012/12/01/01/01/look-a-man.jpg \n <|target|> find Path -type f -name Regex -or -name Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -type d -printf '%p:'                Path     "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type f -newermt Regex! -newermt Regex                         "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -name Regex -execdir rename Regex {} \\;                  "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -exec ls -l -r -s {} \\;       | tr -s Regex       | sed Program    "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|> Print the names of the directories in the current directory tree and the number of lines in them <|target|> find Path -name Regex -execdir rename Regex Regex {} \\;     | tr Re"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> find Path -type f -name Regex -exec grep Regex {} \\; -or -name Regex -exec grep Regex {} \\;          | grep Re"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec echo Regex Regex Regex Regex Regex Regex \\; -print                    "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex Regex Regex \\;                    "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files under current directory and print the output line by line <|target|> find Path -type f -exec echo Regex | xargs -I {} echo Regex Regex {}     "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below that are larger than 100 MB in size <|target|> find Path -type f -size +Size -print0 | xargs -0 -I {} mount -t"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -name Regex -atime +Timespan -exec echo Regex Regex Regex Regex \\;                     "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec sed Program {} \\;   | sort  | tail - Quantity         | sort     | awk Program "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nFind all the files/directories under current directory and change their permission to 644 and copy them to /path/to/target-directory/directory. <|target|> find Path -type f -exec chmod Permission"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -type f -iname Regex -exec basename {} \\;                     "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -type d -mmin -Quantity -exec dirname {} \\;              "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} +                         "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in a single line <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo Regex Regex {}            "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0 | xargs -0 -I {} echo {}                 "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex                                    "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r    | head - Quantity                     | awk Program     "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Display the output of \"bash\" as a table with columns with number of rows and columns, and format the result as a table with columns with number of rows and columns of the output. <|target> column -t -s Regex -s Regex | column -t -d"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them matching pattern 'pattern' <|target|> find Path -name Regex | wc -l   | tr Regex Regex      | tr -c Re"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the file names and directory of the last one found <|target|> find Path -exec echo Regex Regex Regex {} +   | tail -n Quantity       | xargs -"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the current directory with regards to the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -type f -exec du -s -h -c {} \\; | sort | cut -d Regex -"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^' in all the regular files under current directory and show the matched lines with the matched lines along with the file names <|target|> find Path -type f -exec grep -q Regex {} + | sed"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of files that are not in the same directory as the current one. <|target|> find Path -type f -name Regex -prune -or -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first of a series of regular files from the current directory tree that are not newer than 'file1' <|target|> find Path -type f -not -newermt Regex -print0 | xargs -0 -I {} cp -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than /tmp/test and do not contain the filename \"test.sh\" <|target|> find Path -newer File -not -name Regex -execdir rename Re"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names begin with \"~\" and end with \"~\" and delete them <|target|> find Path -name Regex -mtime +Timespan -exec rm -r -f {}"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex                                              "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them matching the regex '^MASTER_SITE_SUBDIR' <|target|> find Path -name Regex -exec grep -l Regex"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the current working directory and its subdirectories <|target|> find Path -type d -exec ls -a -l {} \\;   | awk Program        | sed Program "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest files in the current directory tree. <|source|> find Path -type f -inum Quantity -exec ls -l {} \\;  | tail - Quantity | xargs -I {} ls -l {}  | xargs -I {}"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common file name pattern \"file.txt\" is used to describe all files in a current folder. For each file, its subdirectories, and their subdirectories, format the output as a table with the first field removed. <|target|> find Path -name Regex"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Image: /u/bill <|target|> find Path -type f -name Regex -exec cat {} \\; | sort | uniq -c | sort -n | tail -n Quantity | grep -v Regex      | grep -v Regex"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f \\( -name Regex -or -name Regex \\) -print0 | xargs -0 -I {} dirname {}                    "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of each of them <|target|> find Path -name Regex -exec echo Regex Regex Regex Regex Regex {} +          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the current directory, starting with the current directory. <|target|> find Path -name Regex -execdir echo Regex Regex Regex Regex Regex \\;       | xargs -I {} ls -l {}"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long and detailed list of all the files in the current directory tree that were modified in the last 180 minutes <|target|> find Path -mmin -Quantity -type f -exec ls -l {} \\;  | awk Program       "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -iname Regex -exec grep -i Regex {} \\;    | awk Program               | awk Program              "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the name 'foo' in their names under current directory and below and below. <|target|> find Path -name Regex -exec grep -l Regex {} \\;          "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them matching regular expression 'file' <|target|> find Path -regex Regex | xargs -I {} wc -l {} | wc -l   |"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec grep Regex {} \\;        | grep Regex           | xargs -"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -type f -execdir echo Regex Regex {} \\;         "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tracelog.txt -u Regex                                            "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file 'images.txt' that is located in the current directory. <|target|> find Path -name Regex -type f -execdir grep -H Regex {} \\;    | head - Quantity "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process with no output at the beginning of each line. Print the first 10 lines of each line and save the output to variable 'outputfile' <|target|> tail -n +Quantity File | tee File       "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -name Regex | wc -l   | sed Program      | tr -s Regex"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the \"work\" directory that is located in the user's home directory. <|target|> find Path -name Regex -print0 | xargs -0 -I {} find Path {}        "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for the regex'subdomainA.example.com' in all the files under current directory and print the matched lines with the matched lines <|target|> find Path -type f -exec grep -i Regex Regex {} + | sed Program "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <number> <|target|> find Path -type d -exec echo Regex Regex Regex {} \\;    | tr"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all the files in the current directory tree that are less than 50 days old and print them along with their timestamps and file names <|target|> find Path -mtime -Timespan -type f -name Regex -printf"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex Regex \\;   | tr -c Regex                "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories which have been modified in the last 60 minutes and display the last 10 of them. <|target|> find Path -mmin -Quantity -type f -name"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree and print the names of the files whose names begin with \"~\" <|target|> find Path -name Regex -exec basename {} \\;  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have been modified in the last 60 minutes. <|target|> find Path -mmin -Quantity -type f -exec ls -l {} \\;"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for use with the \"less\" command in the current shell. <|target|> less  | xargs -I {} grep -l Regex {}           "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> find all the files in the current folder and search for \"example\" in those files and display the matched lines along with the file names <|target|> find Path -type f | xargs -"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new type of 'thing' that exists only in the name of 'job' and not in the other. <|target|> find Path -name Regex -exec echo Regex Regex Regex \\;  "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in all the files from the current directory tree <|target|> find Path -type f -exec sed -i Program {} \\;       | xargs -I {} mv {} File"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. By replacing the first word of each line in \"file\" with the number of occurrences of the word \"subdomain\" in the output <|target|> sed -e Program File | awk Program | grep Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f -name Regex -mmin +Quantity -delete  -type f -name Regex -mmin +Quantity        -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                    Regex                 "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> and \"vim\" (case insensitive)\n <|target|> find Path -iname Regex -iname Regex -exec grep -i -l Regex {} \\;    "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} +    "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long series of regular files from the current directory tree that contain the string \"foo\" in their names. <|source|> find Path -type f -exec grep -H"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints long listing of all files in a current folder and subfolders. <|target|> find Path -type f -exec ls -l {} \\;   |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec grep -i Regex {} \\;       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -name Regex -exec grep -l Regex {} \\;   | wc -l            | tail -"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | cut -d Regex -f Number          | tr Regex Regex Regex            "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all regular files in the current directory tree that were modified in the last 24 hours. <|source|> find Path -type f -mtime Timespan -exec ls -l"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user who is running the current script. <|target|> find Path -user Regex -execdir rename Regex Regex Regex Regex {} \\;   "
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of files in the current directory tree that are not newer than the file $file, and which are not in the directory $dir <|target|> find Path -type f -not -newermt Regex! -name Regex -exec ls -l {}"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last 10 lines of the output <|target|> find Path -name Regex -exec tail -n +Quantity -exec sed -i Regex -e Program {} \\;      |"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree whose names end with \"~\" and delete them <|target|> find Path -name Regex -print0 | xargs -0 -I {} rm -r -f {}         "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10 megabytes. <|target|> find Path -size +Size -size -Size -exec ls -l -h {} \\; | wc -l        "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are bigger than 100MB. <|target|> find Path -size +Size -size -Size -print       | grep Regex           | xargs"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below that have been modified in the last 60 minutes <|target|> find Path -mmin -Quantity -type f -mmin -Quantity                  "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex                                   "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f -exec grep -r Regex {} \\;                Regex           Regex             Regex  "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -name Regex -execdir echo Regex \\;       | xargs -I {} echo Regex {} "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and unique file-in-depth look at the history of each file in the current directory. <|target|> find Path -type f -iname Regex -exec echo Regex {} \\;   | xargs -I {} history -m     "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type d -mtime Timespan -exec chmod Permission {} \\;           "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   -exec echo Regex Regex Regex Regex \\;   "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the name 'Makefile' in the current directory and below. <|target|> find Path -name Regex -exec grep Regex {} \\;            "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of all files in the current directory tree and count the number of lines in them. <|target|> find Path -type f -exec wc -l {} + | wc -l  | awk Program        |"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0  -print0      -print0          "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -type f -exec echo Regex Regex Regex {} + | sed Program        | tr Regex Regex  "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names end with \"~\" and delete them <|target|> find Path -type f -name Regex -mtime -Timespan -print0 | xargs -0 -I {} rm"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex Regex Regex \\;  | tail - Quantity             | tail - Quantity | cut -f Number "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;          | grep Regex       "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and copy them to /tmp/directory <|target|> find Path -type f -perm Permission -print0 | xargs -0 -I {} cp -a -v -f File {}   "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the first line of the contents of \"infile\" <|target|> head - Quantity File                      | sed Program         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path to them in the output <|target|> find Path -type f -exec echo Regex Regex Regex {} +               "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex Regex                                                     "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are not newer than the file $newerthan and do not contain the string 'new' in their names. <|target|> find Path -type f -name Regex -not -newer File! -"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that were last modified between 1 and 3 days ago <|target|> find Path -mtime -Timespan -mtime +Timespan -execdir touch {} \\;          "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory and below that have been modified in the last 30 minutes <|target|> find Path -mmin -Quantity -type f -mmin -Quantity                "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} \\;                   Regex   "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the beginning of history, the first word of every line in \"file\" is printed first. <|target|> paste <( sed Program File ) <( sed Program File )              | sed Program File    "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -exec wc -l {} +  | awk Program               | xargs -I {} echo Regex Regex Regex Regex {}          "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n\nName:  \"filename\"                                         "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec grep Regex {} \\;      | grep Regex          | grep Regex     "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type f -exec echo Regex Regex Regex Regex Regex Regex Regex Regex      "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all the files in the current directory tree and below that have been modified in the last 60 minutes <|target|> find Path -mmin Quantity -type f -exec ls -a -l"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nAutomatically create a new directory in the current directory and below with superuser privilege <|target|> mkdir -p Directory                      "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep Regex {} \\;                              "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest modified files in the current directory, sorted by oldest to newest, with appended indicators. <|source|> find Path -type f -printf '%T+ %p\\n' | sort"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use of anyone who is 21 or older and has the permission to edit it. <|target|> find Path -mmin -Quantity File | xargs -I {} chmod -R Permission {}  "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user who has the most users in the current directory. <|target|> find Path -type f -user Regex -exec echo Regex Regex \\;          "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} grep -l Regex {}       | grep -E Regex           "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the first 10 lines of their contents <|target|> find Path -group Regex -exec cat {} \\;  | sort  | tail"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not newer than the file $newerctime and delete them <|target|> find Path -type f -name Regex -not -new"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of all the files in the current directory tree <|target|> find Path -type f -exec echo Regex Regex Regex Regex {} +           "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all the files in the current directory tree that are newer than the file \"file\" <|target|> find Path -type f -newer File -print0 | xargs -0"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree whose names begin with \"~\" and delete them <|target|> find Path -name Regex -exec rm -r -f {} \\;  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree whose names are not \"filename\" <|target|> find Path -type f! -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> ==========([0-9] =] ==========([0-9] ==========([0-9] ==========([0-9] ==========([0-9] ==========(["
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory which have been modified in the last 60 minutes <|target|> find Path -mmin -Quantity -type f -exec split -l Quantity {} \\;"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} \\;                                "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not newer than \"file1\" and not newer than \"file2\" <|target|> find Path -type f! -newer File!"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below that are larger than 100MB and have not been modified in the last 30 minutes <|target|> find Path -size +Size -mmin +Quantity -mmin -Quantity -type f        "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that were last modified more than 30 days ago <|target|> find Path -mtime +Timespan -exec ls -l {} \\;    | tr -d Regex Regex      "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files under current directory and below that are larger than 100 megabytes <|target|> find Path -size +Size -type f -exec sed -i Program {} \\;      | sed -i Program      "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in the current directory <|target|> find Path -name Regex -execdir echo Regex Regex {} +       | xargs -I {} dir"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of small files from the current directory tree that are not newer than the file $tmp/ and do not contain newlines <|target|> find Path -type f -newer File -or -newer File -or -name Regex -print  "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the users who are currently logged in and the groups who are currently logged out <|target|> find Path -maxdepth Quantity -user Regex -type f -printf \"%s\\n\" | wc -l   | sed Program  "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Image: Source (filename) | grep Regex        | sed Program              | sed Program               | grep Regex       "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype posix-egrep -regex Regex                                            "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Print the names of the directories from the paths expanded by the variable $path. <|target|> find Path -type d -exec echo Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the beginning, the file 'file' was created with the same name as the file 'file' in the current directory. <|target|> find Path -name Regex -execdir rename Regex {} +                "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the current directory, showing the last 10 lines of the process tree. <|target|> find Path -size Size -exec ls -l {} \\;  | tail -n Quantity          "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are bigger than 10MB and smaller than 10 MB. <|target|> find Path -size +Size -exec ls -l -h {} + | sed -e Program | xargs"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -user Regex -atime +Timespan -user Regex                                      "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory and below. <|target|> find Path -type f -mmin -Quantity -exec ls -l {} \\;  | awk Program           "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the files they are in the current directory <|target|> find Path -name Regex -prune -or -print   | xargs -I {} echo"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that have been modified in the last 60 minutes. <|source|> find Path -mmin -Quantity -type f -exec ls -l {} \\;  | sed Program  "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the output to console <|target|> find Path -name Regex -exec echo Regex Regex \\;      | tee File      "
    }
  ],
  "7.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l {} \\; | awk Program    | sed Program       "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 megabytes in size <|target|> find Path -size +Size -exec echo Regex {} \\;    | awk Program     "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} echo {}        | sed -i Program         "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Error | grep -E Regex | grep -E Regex | awk Program  | sed Program    | grep -E -v Regex          | awk Program          "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are owned by the user 'tom' under current directory tree and print the path names of the directories they are in <|target|> find Path -user Regex -execdir -pwd -i {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, in-depth look at the current directory tree, showing differences between files and directories. <|target|> find Path -type d -name Regex -exec echo Regex \\; -or -type f -print0 | xargs -"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>print file name of the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system containing the file system"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file\" and do not search in the sub directories. <|target|> find Path -newer File -type f -name Regex -exec ls -l"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -mmin -Quantity            | xargs -I"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;                  | xargs -I {} -I {} mv {} File \\;       "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of the regular file, showing the last modification time. <|target|> find Path -type f -mtime -Timespan -printf '%T+ %p\\n' | tail -n Quantity | xargs -0 -I {} ls -"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head      | tail       | head        | sort        | head              | tail  "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files that are owned by user 'david' in the current directory. <|target|> find Path -user Regex -exec ls -l -s {} \\;     | grep Regex | xargs -I {} ls -l -d"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed more than 30 days ago <|target|> find Path -atime +Timespan -type f -name Regex        | wc -l       "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the current directory tree is \"Are you sure you want to continue?\" <|target|> yes Regex | grep -o Regex | awk Program | sort | uniq -c | sort -n -r -k Number | sed Program | sort -n -r -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory tree that were modified more than 30 minutes ago <|target|> find Path -mmin +Quantity -mmin -Quantity              | xargs -I {} ls -l"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -print         | xargs -I {} ls -l {}       "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -type f -perm -Permission -exec chmod Permission {} \\;       | sed -n Program  "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that are larger than 10MB and are less than 50MB. <|target|> find Path -size +Size -size -Size -exec ls -l -h {} \\; | awk Program      | x"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'tom' <|target|> find Path -user Regex -exec chmod Permission {} \\;               file      "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named \"file.ext\" is in the current directory tree, and it is located in the current directory's parent. <|target|> find Path -name Regex -execdir rename Regex {} \\;                  "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that were last modified more than 30 minutes ago <|target|> find Path -mmin +Quantity -mmin -Quantity -type f | xargs -I {} ls -l {}  | grep Regex | awk Program   "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -iname Regex -print0 | xargs -0 -I {} file {}                                   "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec echo {} + | awk Program                   | xargs -I {} mv File"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB in size <|target|> find Path -size +Size -size -Size                      | xargs -I {}"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that were last modified more than 30 days ago. <|target|> find Path -mtime +Timespan -type f -exec ls -l {} \\;   | awk Program     | xargs -I {} ls -"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                                                          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory that is not accessible by all users. <|target|> find Path -type d -not -path Regex -not -path Regex -not -path Regex           | xargs -I {} ls -l -d {} "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Search the current directory tree for files whose names start with \"file\" <|target|> find Path -name Regex -exec echo {} +    | tr Regex Regex            | xargs -0 -I {}"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are not owned by the user 'tom' <|target|> find Path -not -user Regex -not -name Regex       | xargs -I {} rm -r -f {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                                                         "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that were modified more than 30 minutes ago. <|target|> find Path -mmin +Quantity -not -name Regex -type f -exec ls -l {} \\;  | awk Program        |"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex                                                          "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names without extension <|target|> find Path -name Regex -exec echo Regex Regex {} +     | tr Regex Regex       | xargs -0 -I {}"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 10 megabytes in size <|target|> find Path -size +Size                        | grep -i Regex "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +        | xargs -I {} chmod Permission {}       "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are owned by user 'pete' <|target|> find Path -user Regex -name Regex -print0 | xargs -0 -I {} mv {} File         "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents. <|target|> find Path -name Regex -exec ls -l -d {} \\;    | tr Regex Regex       | sed Program    "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -print                            "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the filenames <|target|> find Path -execdir echo Regex Regex Regex {} \\;                 "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo {} \\;   | grep Regex             | tr Regex Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and have not been modified in the last 30 days <|target|> find Path -size +Size -not -mtime +Timespan -name Regex   "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory that are not owned by the user 'pete' <|target|> find Path -not -user Regex -not -user Regex -ok rm {} \\;       "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are not readable by their own or their owners <|target|> find Path -type f! -perm Permission            | xargs -I"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'pete' <|target|> find Path -user Regex -print0 | xargs -0 -I {} sed -i Program {}      "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all the files in the current directory tree that are owned by the user joe. <|target|> find Path -user Regex -exec ls -l {} \\;     | grep Regex      "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with the extension of the directory containing them <|target|> find Path -name Regex -execdir echo Regex \\;   | sed -e Program      "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were last modified more than 30 days ago and delete them <|target|> find Path -mtime +Timespan -type f -exec rm -r -f {} \\;    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v -e File File File                       cp -r File File                 "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec echo {} \\; | wc -l   | awk Program        | sed Program   "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} + | xargs -I {} chmod Permission {}    "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;            | xargs -I {} tar -c -v -f File {} \\;       "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of files in the current directory tree that were last accessed more than 30 min ago. <|target|> find Path -amin +Quantity -type f -ls | grep -v Regex  | xargs -I {} ls -1 -m"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new set of numbers from the last 10 minutes of the day show the average time of a single request to the system host. <|target|> ping -c Quantity -o -c Regex | awk Program | sed Program | sed Program  | sort |"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;        | sed Program     "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 30 minutes ago <|target|> find Path -mmin +Quantity -mmin +Quantity            | grep Regex"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB in size <|target|> find Path -size +Size -size -Size            | sort    "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory that are larger than 100 megabytes and print their sizes in descending order <|target|> find Path -size +Size -exec ls -s {} + | awk Program     "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files under and below the home directory that were accessed more than 30 days ago and print the names of the files that were accessed more than 30 days ago <|target|> find Path -type f -atime +Timespan -exec ls"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were accessed in the last 30 minutes <|target|> find Path -amin -Quantity -type f -amin -Quantity | xargs -I {} rm -r -f {}          "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that were accessed more than 30 minitues ago <|target|> find Path -type f -amin +Quantity -amin -Quantity        | sed Program        "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -r -f {} \\;                | grep -i -i -Z Regex                    "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source| source|> Find all files/directories under current directory tree that were modified less than 60 min ago <|target|> find Path -mmin -Quantity -name Regex -print0                  "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed more than 30 min ago <|target|> find Path -type f -amin +Quantity -iname Regex                    "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories that are not owned by the user 'pete' in the current directory tree and delete them <|target|> find Path -nouser -user Regex -print0 | xargs -0 -I {} rm {}    "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you want to quit? Are you sure you want to continue? Are you sure you want to continue? Are you sure you want to continue? Are you sure you want to continue? <|target|> find Path -maxdepth Quantity -type f -iname Regex! -print"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the name 'Tes' in their names under current directory tree <|target|> find Path -name Regex -mtime +Timespan                     "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file 'file' <|target|> find Path -newer File -print           | grep Regex            "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB and do not have the word \"file\" in their names. <|target|> find Path -size +Size -iname Regex -exec ls -l {} \\;   | grep -"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first word of the name \"string\" in the output of the ls command will be replaced with the second word of the first word of the file. <|target|> ls -1 | grep -e Regex | awk Program"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source/path/to/file/ is a regular file in the current directory, that is a symbolic link to file /tmp/ <|target|> find Path -type f -name Regex -exec echo Regex Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are larger than 10 megabytes and do not have write access to others <|target|> find Path -size +Size -perm -Permission -exec ls -l"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files in the current directory tree that were last modified more than 30 minutes ago and delete them. <|target|> find Path -mmin +Quantity -mmin +Quantity -delete  "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program         | sed Program       | sed Program         | sed Program         | grep Re"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe first line of every directory tree that is not under the user's home directory and not the directory /home/user/test/ <|target|> find Path -type d -not -path Regex -not -path Re"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that were modified more than 30 minutes ago. <|source|> find Path -mmin -Quantity -mmin +Quantity | xargs -I {} ls -l {}"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -name Regex -atime +Timespan -exec tar -c -f File {} \\;           | xargs -I {} tar -c -f File {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to find files in the current directory and its sub-directories. For each file, replace the first occurrence of \"string1\" with \"string2\" in the output of the current directory's command line arguments. For each line, replace"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed more than 30 minutes ago <|target|> find Path -amin +Quantity -amin +Quantity           "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -iname Regex                                   "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir that are owned by user 'pete' <|target|> find Path -user Regex -mmin +Quantity                  "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not readable by anyone <|target|> find Path -type f -perm -Permission -print0 | xargs -0 -I {} date '+' | sed -n Program      "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that were last modified more than 30 minutes ago. <|target|> find Path -mmin +Quantity -exec ls -l {} \\;   | grep Regex            "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'tom' <|target|> find Path -user Regex -print0 | xargs -0 -I {} rm -r -f {}         "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -exec chmod Permission {} +         | xargs -I {} chmod Permission {}       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l {} \\; | sort -n -r                 | head                    "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -exec sed -i Program {} +    | wc -l   | grep Regex  | awk Program        | awk Program        | sed Program "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were modified less than 1 day ago <|target|> find Path -mtime -Timespan -daystart -exec sed -i Program {} \\;       | cut -d Regex -f"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 2 weeks ago <|target|> find Path -mtime +Timespan -type f -exec ls -l {} \\;  | awk Program         "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that were modified less than 60 minutes ago. <|target|> find Path -mmin -Quantity -mmin -Quantity | xargs -I {} ls -l {}  | awk Program"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -printf \"%s %p\\n\" | awk Program    | sort  | uniq -c "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source/in/replace with other users name and password before user confirmation <|target|> ssh-keygen -l -n -p Regex             | ssh-keygen -l -l "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory where a file like \"file_name\" is located. <|target|> find Path -name Regex -prune -or -name Regex -print        | xargs -I {} dirname"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source| Source | grep -o -P Regex <( find Path -name Regex ) <( find Path -name Regex ) | xargs -I {} cp -a -v -e -r File File       "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed more than 30 minutes ago <|target|> find Path -amin +Quantity -amin -Quantity -or -amin +Quantity         | xargs"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of all the files in the current directory tree that were last modified more than 7 days ago. <|target|> find Path -mtime +Timespan -type f -exec ls -l {} \\;  | awk Program    "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -or -type l -or -type l -or -type l -or -type l -type l                           "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their paths <|target|> find Path -exec echo Regex Regex {} \\;     | xargs -I {} ls -l {}   "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were last modified more than 30 min ago <|target|> find Path -mmin +Quantity -exec ls -l {} \\;     | grep Regex    | grep"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 30 minutes ago and print their names and paths <|target|> find Path -mmin +Quantity -mmin -Quantity        | xargs -I {}"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first person to be logged on to the system is automatically created. <|target|> ssh-user File -O Regex                             | awk Program"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are at least seven levels in size <|target|> find Path -mindepth Quantity -type f -size +Size -exec echo {} \\; | awk Program        "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed command's/^/\\(.*log.txt\\)' on them <|target|> find Path -name Regex -exec sed Program {} \\;       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by any user <|target|> find Path -nouser -or -user Regex -print    | xargs -I {} ls -l {}     "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you wish to continue? (case insensitive search)\n <|target|> find Path -iname Regex -exec rename Regex {} \\;      | sed Program            | grep Regex  "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for 'what' in all files with '.txt' extension under current directory tree and show the output by separating each line with a comma. <|target|> find Path -name Regex | xargs -I {} mv {} File    "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\;    | awk Program         | xargs -I {} grep -i Regex {}             "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by the user 'user' <|target|> find Path -user Regex -type f! -user Regex          | grep Regex   "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 100MB. <|target|> find Path -size +Size -exec ls -l -s {} \\;   | awk Program           "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are less than 50 bytes in size <|target|> find Path -size -Size -Size -print | xargs -I {} sed -i Program {}     "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory that are not newer than the file \"file.tar.gz\" and do not search in the subdirectories. For each file, append a file extension of the file name. <|target|>"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee -a File                                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'file_name.txt' and older than 'file_size.txt' and print the filenames of the files/directories that match with the filename in '"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for 'whatIWantToFind' in all regular files under current directory and show the matched lines with line numbers <|target|> find Path -type f -exec grep Regex {} + | xargs -I {} grep -"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 30 minutes ago <|target|> find Path -mmin +Quantity -exec echo Regex {} \\;        | awk Program"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the most used utilities in Unix's crontab system, sorted from most frequent to least frequent. <|target|> find Path -type f -fprintf '%TY-%Tm-%Td %TT   %p"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and unique set of numbers from the output of history is displayed in the first column of each line. <|target|> history | awk Program | xargs -I {} awk Program | xargs -I {} sed -i Program {}  "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and replace every occurrences of'subdomainA.example.com' with'subdomainB.example.com' in their paths under /home/www and below <|target|> find Path -type f |"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n|source|> Find all files/directories under current directory that are owned by user 'tom' <|target|> find Path -user Regex -name Regex -print            | xargs -"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E Regex | grep Regex | awk Program | xargs -I {} chmod Permission {}                      "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a reverse sort of file, with the first field removed from the first field of each line, and the second field removed from the last one. For each line whose first field is not in the first field of the"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory and print the names of the directories they are in <|target|> find Path -type f -exec echo Regex Regex Regex {} +   "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the current directory and its sub-directories. <|target|> find Path -name Regex -maxdepth Quantity -type f -exec mkdir -p Directory \\;    "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by the user with superuser privilege and delete them <|target|> find Path -type f -not -user Regex -perm -Per"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all files/directories under current directory tree that are newer than the file /tmp/daily/daily_test.sh <|target|> find Path -newer File -print0 | xargs -0 -"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that start with the word \"file\" in their names and end with the extension \".txt\" <|target|> find Path -name Regex -type f"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all files in the current directory tree that have been modified in the last 30 minutes, using sed to delete them. <|target|> find Path -mmin -Quantity | xargs -I {} rm -r -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which have been modified in the last 24 hours. <|target|> find Path -mtime Timespan -type f -name Regex -print       | x"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -maxdepth Quantity -type f -name Regex -mnewer File -delete  -delete          | xargs -I {} rm -f {}     "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                                      "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <| grep -r -E Regex -o Regex File | wc -l   | awk Program    | xargs -I {} grep -E Regex File |"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running question for the answer to \"Are you sure you sure? [y/N] \" is no prompt <| grep Regex | sed -n -e Program | awk Program |"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that were last modified more than 30 min ago <|target|> find Path -type f -mtime +Timespan    "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second most common file in the current directory tree, and it is the one that is most at home in the directory tree of the current user. <|target|> find Path -name Re"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'user' and have the same owner <|target|> find Path -user Regex -name Re"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the pattern '*.js' in their paths <|target|> find Path -name Regex | xargs -I {}"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files in the current directory tree that are not newer than the file $newerthan and not newer than the file $olderthan <|target|> find Path -type"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all files in the current directory that have been modified in the last 30 min. of the day. <|target|> find Path -mmin -Quantity -type f -fprintf \"%"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed more than 30 minitues ago <|target|> find Path -name Regex -type f -atime"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common error is when two files of the same name are not the same file. For each file, the first field of each line must be expanded to the full path of the file. For each line in file \"file\", the first field of each line must be expanded to the full path of"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex 'pattern' in all files under current directory <|target|> find Path -type f -name Regex | xargs -I {} grep -E Regex {}      | grep Regex       "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '^.*/' in their paths <|target|> find Path -regextype sed -regex Regex              | grep"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100MB and less than 50MB <|target|> find Path -type f -size +Size -size -Size -exec ls -l -h {} \\; | awk Program   "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that start with 'a' in their names under current directory tree. <|target|> find Path -name Regex -print0 | xargs -0 -I {} file {}           "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'pete' <|target|> find Path -user Regex -type f -atime +Timespan -exec rm -r {} \\;        |"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of the current working directory, using the system hostname \"new\" to display the full pathname of each file. <|target|> find Path -type f -exec ls -l {} + | awk Program  | xargs -I"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep Regex | grep -v Regex | grep -v Regex | cut -f Number                                     "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} + | grep Regex | sed Program | xargs -I {} file {}               "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are owned by the user \"phil\" in the current directory and its sub-directories. <|target|> find Path -user Regex -print            | xargs -I"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'ian' <|target|> find Path -user Regex -exec mv {} File \\;       | grep Regex   "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -exec chmod Permission {} +              | xargs -I {} ch"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by the user \"user\" and do not search in the sub directories of the current directory. <|target|> find Path -maxdepth Quantity -type f -not -user Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new and greater than one month old version of the current directory tree is in place. <|target|> find Path -mtime +Timespan -type d -printf \"%h\\0\" | tr Regex Regex | xargs -0 -I {} tar"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 30 minitues ago <|target|> find Path -mmin +Quantity -or -mmin +Quantity -print          "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> find Path -type d -name Regex -exec echo {} + | xargs -0 -I {} rm -r -f {}                    | xargs"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/you/file and set their permission to 640 <|target|> find Path -type f -mtime Timespan -exec chmod Permission {} \\;      | awk"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file 'file.txt' and delete them <|target|> find Path -newer File -print0 | xargs -0 -I {} rm -r -f {}"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep -i Regex {} +    | xargs -I {} grep Regex {}                       "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that were modified in the last 24 hours and show the last 10 files <|target|> find Path -mtime Timespan -exec rm -r -f {} \\;      | tail"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not readable by all <|target|> find Path -type f! -perm Permission  | sed Program      | tr -d Regex Regex      "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^#' in all files under current directory and also show the matched lines along with the filename <|target|> find Path -type f | xargs -I {} grep -E Regex {}  | sed -n -e Program"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( nginx master )          Regex                                          "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the files that are newer than file 'file' and older than file 'file' and show the differences. <|target|> find Path -newer File -type f -name Regex -or -name Regex -or -newer File -print "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and filetype names <|target|> find Path -execdir echo {} \\;                       "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files in the current directory tree that were last accessed more than 30 min ago <|target|> find Path -amin -Quantity -type f -amin +Quantity                 "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than $dateTime in regards of modification time <|target|> find Path -newer File -or -newer File -print            | x"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is a part-only of the current directory, and not in the sub-directories. <|target|> find Path -maxdepth Quantity -name Regex  -print                   "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -1 -b -u -s File | wc -l   | awk Program        | awk Program         | sort | uniq  | xargs -I {} wc -l   "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | xargs -I {} -n Quantity -I {} echo Regex Regex {}                | tr Regex Regex      "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -name Regex -exec grep Regex {} +       | xargs -I {} dirname {}           | xargs -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the history of the file \"file\" and its sub-directories. <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} grep Regex"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and its sub-directories. <|target|> find Path -type f -exec ls -l {} \\;      | grep Regex       |"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -execdir echo {} +        | xargs -I {} ls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 10MB in size and print their names <|target|> find Path -size +Size -name Regex -exec echo Regex Regex Re"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;              |"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory tree is a process tree that contains the current user's files. <|target|> find Path -mmin -Quantity -name Regex              | xargs -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long-running, long-running, and real-time leader, the file system containing a current job. For each file, the file name must be specified in the current working directory. For each file, the file name must be specified"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -type f -exec grep -H Regex {} +             | grep -H Regex             "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user whose name is 'Cam' in the current directory. <|target|> find Path -name Regex -or -name Regex -or -name Regex -or -name Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'user' <|target|> find Path -user Regex -exec rm {} \\;      "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe current directory is the first directory to which the user has permissions to read and write to. <|target|> find Path -type f -perm Permission -exec echo Regex Regex Regex {} + "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first 100 lines of a file named \"file.txt\" are to be expanded by removing all spaces. <|target|> cat File | xargs -I {} sed -i Program {}     | sed"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>/usr/share/doc/cron/Developer/ <|target|> find Path -depth -name Regex -exec bzip2 -z -d -c Regex {} +      |"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of the current directory, sorted by oldest modified to newest modified. <|target|> find Path -type f -printf \"%T@ %p\\n\" | sort | un"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -type f -name Regex -exec echo Regex Regex \\;                   "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100M and have not been accessed in over 90 days and delete them <|target|> find Path -type f -atime +"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path Path -type f -exec chmod Permission {} \\;                           "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have been modified in the last 24 hours. <|target|> find Path -mtime -Timespan -type f -exec ls -l {} \\;    |"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 30 minutes ago <|target|> find Path -mmin +Quantity -mmin -Quantity                     "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are less than 100MB in size under current directory tree <|target|> find Path -size +Size -print0 | xargs -0 -I {} ls -l -s {}  | grep -E Regex   "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a process that is run every two seconds. <|target|> yes Regex | sed Program            | sed Program             | sed Program          "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file 'file' and have not been modified in over 90 days <|target|> find Path -type f -mtime +Timespan -exec rm -r -f {} \\;  "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 10 MB in size and delete them. <|target|> find Path -type f -size +Size -exec rm -f {} \\;  | xargs -I {} rm -r -f {}   "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'tom' and have been modified in the last 30 min <|target|> find Path -user Regex -mtime +Timespan -type f -exec ls -l -t {}"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'user' <|target|> find Path -not -user Regex -name Regex          | xargs -I {} ls -l {}"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype posix-extended Regex              | grep -E -v Regex                          "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were last modified more than 30 days ago. <|target|> find Path -mtime +Timespan -exec ls -l {} +  | xargs -I {} chown Regex {}      "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are at least 100MB in size <|target|> find Path -size Size -size +Size -print      | xargs -I {} chmod -R Permission {}     "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for 'file' in all files under current directory and show the matched lines with the filename. For each file, the file name must be expanded to match the full path of the current directory. For each line, replace all newlines with the current line. <"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'pete' <|target|> find Path -not -user Regex -not -path Regex -not -path Regex   -"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex -or -name Regex -atime +Timespan                          "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most recently accessed files in the current directory. <|target|> find Path -iname Regex -type f -and -not -iname Regex -exec ls -l {} \\;  | awk Program "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified less than 1 day ago <|target|> find Path -mtime -Timespan -name Regex -print0 | xargs -0 -I {} rm -f"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target of a command\n <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex \\;      | sed -n Program      | tr Regex Regex "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for the regex 'foo' in all regular files under current directory and also print the matched lines in the sorted result. <|target|> find Path -type f -exec grep -l Regex {} + | sed Program | sort | uniq  "
    }
  ],
  "8.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/daystart and older than the file /tmp/monthstart <|target|> find Path -newer File -print      "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -s Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the pattern 'file_name' in their paths <|target|> find Path -name Regex | xargs -I {} grep -E Regex {}     "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -print | grep -v Regex | xargs -I {} ls -l -d {}          "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the current directory and its subdirectories <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex    "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'file1' <|target|> find Path! \\(newer File -or old File \\) -print    | grep Regex  "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their total file systems disk usage <|target|> find Path -type f -exec du -h -c {} + | awk Program         | sort"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all regular files from the current directory tree that are newer than the file $file and do not contain the string \"filename\" <|target|> find Path -type f | xargs -I {} ls -l {} | grep Regex"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in series of \"bigpicture\" series, starting with the last entry. <|source|> Find all files/directories under current directory tree that are larger than 10MB in size <|target|> find Path -size +Size -ls"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by user 'ian' <|target|> find Path! -user Regex -print0 | grep -v Regex          | grep"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -type f -exec chmod Permission {} +         | xargs -I {} mv {} File     "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -mtime -Timespan -exec echo {} \\;   | grep Regex            | cut -d Regex -f"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail - Quantity       | head          | more                             "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'file' <|target|> find Path -newer File -print          | xargs -I {} ls -l -S -S {}   "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '<script type=\"text\" for 'infile' in their paths <|target|> find Path -exec grep -H Regex {} +   | wc -l     "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>> Find all files/directories under current directory and print the last 10 lines of their output to the console <|target|> find Path -exec echo {} \\; | tee File           | tail         | cut -d"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -type f -exec ls -l {} \\;    | awk Program        | sed Program         "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /path/to/file <|target|> find Path! -newer File -print             | grep Regex    "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than '2015-08-30' and print their names <|target|> find Path -type f! -newermt Regex! -newermt Regex! -name Regex  "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -print0 | xargs -0 -I {} gunzip -c {}         | tail -"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'phil' <|target|> find Path -user Regex -perm Permission                          "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 10MB in size <|target|> find Path -size +Size -exec ls -l {} \\;     | awk Program     | grep Regex        "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -path Regex -type f -print0          | tr Regex Regex               "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [^/]* in their paths and print their paths <|target|> find Path -type f -print0 | xargs -0 -I {} dirname {} | grep -E -m Quantity Regex  "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory that is not accessible to the user. <|source|> find Path -type d -execdir Regex {} \\;           | grep Regex                  | tr"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/foo and older than /tmp/foo by modification time <|target|> find Path -newer File -not -newer File -print           "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Image: iStock/iStock/BAM/\n <|source|> Find all files/directories under current directory tree that are owned by the user 'ian' and have the group 'ian' in their pathname <|target|> find Path -user Regex -exec grep -i Regex"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                                                          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first instance of a pattern in the current directory tree is found by comparing the file system containing the file path of the current working directory. <|target|> find Path -type f -exec file {} \\; | grep Regex            | sed Program   "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the current directory <|target|> find Path -print0 | xargs -0 -I {} dirname {}                      "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex '^.*/course*' in their paths <|target|> find Path -iname Regex -exec grep -i -l Regex {} \\;     | tr Regex Re"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -name Regex                                                          "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '^(c|h|cpp|h)$' in their paths <|target|> find Path -path Regex -type f -exec sed Program {} \\;        "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex                                                    "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'pete' <|target|> find Path -user Regex -exec ln -s {} \\;           | sed Program      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were last modfied between 90 and 100 days ago <|target|> find Path -mtime +Timespan -print0 | xargs -0 -I {} du -c -h {} | tail -n -Quantity |"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -exec gzip -d {} \\;     | grep Regex            "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'pete' <|target|> find Path -user Regex -execdir pwd \\;      | sed Program               "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source/path/file/prefix/file.txt | grep Regex | cut -d Regex -f Number | tr Regex Regex Regex | xargs -I {} echo Regex Regex Regex Regex Regex {}             "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -print0 | xargs -0 -I {} ls -l {}                      "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec du -h {} \\; | awk Program             | sort    "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -l -s {} \\; | sort -n | awk Program        "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the current directory <|target|> find Path -name Regex -prune -or -print0 | xargs -0 -I {} echo Regex {}    "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all regular files in the current directory and the last 10 files to be sorted. <|target|> find Path -type f | sed Program | sort | tail - Quantity | cut -d Regex -f Number | sed Program | sort | uniq"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -type f | xargs -I {} ls -l {}    | awk Program       | sed Program "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the pattern 'file_name' in their paths and copy them to /tmp/file <|target|> find Path -name Regex | xargs -I {} cp -i File {}"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file $newerthan and older than the file $olderthan and print the last 10 of them <|target|> find Path -newerthan -name Regex -and"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all the files in the current directory tree that are not owned by the user nor are they owned by the user. <|target|> find Path -type f! -user Regex -exec ls {} \\;      | sed Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory tree that match the pattern '*serv_*' in their paths and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -R -i File File File                                            "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'ian' <|target|> find Path -user Regex -exec grep -l Regex {} \\;  | wc -l    "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and the file paths to their parent paths <|target|> find Path -print0 | xargs -0 -I {} dirname {} | awk Program    "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;                 | tar -c -v -f File {}         "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory tree that are larger than 10 megabytes in size <|target|> find Path -size +Size -print | xargs -I {} cp -a {} File       "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec echo Regex \\;      | sed Program                             "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -maxdepth Quantity -type f | grep -E -v Regex              | sed"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -exec echo Regex | xargs -I {} ls -l {} | awk Program      "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'user' <|target|> find Path -user Regex -exec sort -n -r {} File \\;          "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -print          | grep Regex           | grep Regex "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E Regex | grep -v Regex                  | tr Regex Regex              | tr Regex   "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user'sometrins' <|target|> find Path -type f -not -user Regex -print0 | xargs -0 -I {} rm -r -f {}  "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file $date_time in regards of modification time <|target|> find Path -newer File! -name Regex               "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}                                      "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 360 days ago <|target|> find Path -mtime +Timespan -print0 | xargs -0 -I {} echo Regex Regex Regex {}       "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'user' <|target|> find Path -user Regex -not -user Regex          | awk Program       "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match pattern 'file*' and print the last space separated field <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo Regex {}     | rev |"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the name 'document' in the current directory tree and count their number of lines <|target|> find Path -name Regex -exec grep -n Regex {} + | wc -l    | awk Program  |"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified within the last day <|target|> find Path -mtime -Timespan -print                         "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the current directory <|target|> find Path -maxdepth Quantity -type f | grep Regex | sed Program             | awk Program   "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;                         "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all files/directories under current directory, without the last entry. <|target|> find Path -maxdepth Quantity -ls | awk Program       | sed Program    "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by any user <|target|> find Path! -nouser | grep Regex           "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n| Source | grep Regex | grep Regex | cut -d Regex -f Number | grep Regex | cut -c Number   | tr Regex Regex | cut -b Number   | tr Regex Re"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all files/directories under current directory, use the find command to extract them. <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex | xargs -I {}"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | grep Regex | sed Program | grep Regex | sed Program | sed Program | sort | uniq | tr -d Regex            | tr -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are larger than 10MB. <|target|> find Path -size +Size -ls | xargs -I {} ls -l {}    | grep"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common file name for a long list of all regular files in the current directory tree, separated by a space. <|target|> find Path -type f | sed Program | sed Program | xargs -I {} ls -l -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -atime +Timespan -name Regex -print0 | xargs -0 -I {} tar -c -v -f File {}              "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f | sed Program | xargs -I {} sort -n | uniq -c       | sort -n  | cut -f Number      "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to directories <|target|> find Path -exec ls -l {} \\; | sort | uniq | xargs -I {} tar -c"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'pete' <|target|> find Path -user Regex -print0 | xargs -0 -I {} grep -l Regex {}        "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'phil' and do not have the user's permission to them <|target|> find Path -not -user Regex -perm Permission -print       "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file called \"file.txt\" is created in each directory under the current one. <|target|> find Path -type d -exec file {} \\; | awk Program         | sed Program           "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex -exec echo Regex Regex {} \\;                      "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|>Chapter 1: Chapter 2: Chapter 3: Chapter 4: Chapter 5: Chapter 6: Chapter 7: Chapter 8: Chapter 9: Chapter 10: Chapter 11: Chapter 12: Chapter 13: Chapter 14: Chapter 15: Chapter 16: Chapter 17: Chapter 18: Chapter 19: Chapter 20: Chapter"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and count their number of lines in them. <|target|> find Path -ls | wc -l  | sort | tail - Quantity | awk Program        | wc -"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r | head -n Quantity                               "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by user 'pete' and are not newer than their parent <|target|> find Path! -newer File -print0 | xargs -0 -I {} wc -l {}  "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex [y/n]*[^]* in their paths <|target|> find Path -regextype posix-egrep -regex Regex       "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified within the last 24 hours <|target|> find Path -mtime -Timespan -print0 | xargs -0 -I {} ls -l {}  | tail - Quantity     "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the case insensitive regex '.*serv_id=.*serv_id=.*serv_data' in their paths and print their names <|target|> find Path -type f | grep"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents. <|target|> find Path -exec cat {} +   | sort -n   | head           | cut -d"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users may wish to rename their home directory to that of their last name.pub. <|target|> find Path -type f -execdir rename Regex {} \\;           | sed Program     "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not newer than the file /tmp/test/file <|target|> find Path! Path! Path! Path -newermt Regex         "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'pete' <|target|> find Path! -user Regex -exec cp {} File \\;          "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'index.html' and print the file paths along with their timestamp and ownership <|target|> find Path -newer File -exec echo Regex Re"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory tree that are owned by the user'me' <|target|> find Path -user Regex -or -name Regex -or -name Regex -or -print   "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -execdir grep -i Regex {} \\;                                       "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to other files <|target|> find Path -exec echo Regex Regex {} +                  "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use of the user who is logged in as user \"user1\" <|target|> who | grep Regex | grep Regex | grep -o Regex       | cut -d Regex -f Number "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than 'ttt' by modification time <|target|> find Path -newer File          | grep Regex         "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and print their names <|target|> find Path -mmin -Quantity | xargs -I {} echo Regex Regex Regex Regex Regex Regex Regex        "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'ian' <|target|> find Path -user Regex -exec grep -H Regex {} \\;    | wc -l      "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all the files in the current directory tree that are larger than 10 megabytes. <|target|> find Path -size +Size -exec ls -l -h {} \\;  | awk Program      | sort  | uniq "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of all files under current directory that are newer than the file \"file\" and whose names match the pattern \"file_name\" in their respective directories. <|target|> find Path -name Regex -newer File -print      |"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex | xargs -I {} echo Regex {}                    "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not newer than the file 'index.html' <|target|> find Path! \\( -newer File -or -name Regex \\) -exec ls -l {} \\;    "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -iname Regex -exec awk Program {} \\;      (case insensitive)               | grep Regex              "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe current directory tree is the directory where the file 'file' is located. <|target|> find Path -name Regex -exec dirname {} \\;       | grep Regex              "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user'my_user' <|target|> find Path -user Regex -print          | grep Regex       "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 10MB and print their names and sizes <|target|> find Path -size +Size -exec ls -l -h {} + | awk Program   "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex Regex | xargs -I {} dirname {} "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File                                                    "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match pattern '*prefs*' in their paths <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -l Regex {}"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex | tee File         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files in the current directory tree that were last modified more than 30 days ago <|target|> find Path -mtime +Timespan -type f -exec ls -l {} \\;   | sort  | un"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;             | grep Regex     "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> find all the files in the current directory and subdirectories that have been modified in the last 24 hours <|target|> find Path -mtime Timespan -type f -print0 | xargs -0 -I {} ls"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -exec echo Regex Regex Regex {} +        | tr Regex Regex   "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -type f -mtime Timespan -exec ls -l -d {} +   | awk Program   "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -path Regex -exec echo Regex Regex Regex Regex Regex Regex   "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'tom' <|target|> find Path! -user Regex -print0 | xargs -0 -I"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to create a temporary file in the current directory and save it to variable 'tmp' <|target|> mktemp -u -t Regex                 "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories that have not been accessed in the last 30 minitues. <|target|> find Path -type f -atime +Timespan -exec ls -l"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for all the files in the current directory tree which have the same inode number <|target|> find Path -inum Quantity -exec grep -i Regex {} +   | grep Regex   "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the current session of the \"Statistics\" session. <|target|> find Path -name Regex -exec grep Regex {} +             "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -print0 | xargs -0 -I {} cp File File {}       "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory tree that are owned by the user john <|target|> find Path -user Regex -exec mv {} File \\;       "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -exec echo Regex {} \\;    | tr Regex Re"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -maxdepth Quantity -name Regex -type f -mmin +Quantity -delete                 | xargs -I {} rm -f {} "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                | mv File                   "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are not owned by the user nor are they owned by the group. <|target|> find Path -type f -name Regex! -user Regex -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most used files in the current directory <|target|> find Path -type f -exec ls -l {} \\; | sort -n | tail - Quantity | aw"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified in last 24 hours <|target|> find Path -mtime Timespan -execdir chmod Permission {}"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path | sed Program | awk Program | xargs -I {} ls"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | grep Regex | sed Program | sed Program       | grep Regex          | grep Regex  "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>| grep Regex for all files with spaces in their names and prints total count. <|target|> find Path -name Regex -exec wc -l {} + | awk Program  "
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for \"foo\" in the current directory and print the first two lines of the output <|target|> find Path -maxdepth Quantity -name Regex | sed Program | head -n Quantity"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex      | xargs -I {} grep Regex {}  "
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their file information <|target|> find Path -name Regex -exec echo Regex {} \\;    |"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree whose names are \"Tes\" <|target|> find Path -name Regex -exec echo {} \\;   | grep Regex                "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 'foo' by modification time <|target|> find Path -newer File! -newer File             | grep Regex  "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'foo' in their paths <|target|> find Path -regextype posix-egrep -regex Regex             "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file will be used to display all files in the current directory tree that are not owned by the user 'ian' <|target|> find Path -not -user Regex -type f -exec ls -l {} \\; | sort -r | cut -d Regex -f"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'ian' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} file {}         | grep"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory tree that are not owned by the user 'phil' <|target|> find Path -nouser -or -nouser         | grep Regex    "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user'sar' <|target|> find Path -not -user Regex                   | grep Re"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat $( ls File | grep Regex ) | grep Regex   | grep -v Regex        | tr Regex Regex                          "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory that are owned by the user 'phil' <|target|> find Path -user Regex -print0 | xargs -0 -I {} grep -l Regex {}        | grep Regex "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use of the user whose name is \"Cam\" in the current directory. <|target|> find Path -user Regex -type f -exec basename {} \\;           | grep Regex     "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file '2015.03.01' <|target|> find Path! -newer File          | xargs -I {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the pattern 'pattern' <|target|> find Path -name Regex -exec rename Regex {} \\;               "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by user 'pete' <|target|> find Path -nouser -user Regex -print0 | xargs -0 -I {} grep Regex {}  "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -type f | sed Program | xargs -I {} ls -l -d {}         | sed Program"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB in size <|target|> find Path -size Size -size +Size -print                 "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -empty -exec rm -r {} \\;      | tr Regex Regex      "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under /home/user/data/ that are owned by user joe <|target|> find Path -user Regex -type f -not -name Regex         "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print the last 10 commands followed by the last one <|target> find Path -exec echo {} Regex | tail        | tr Regex Regex    "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user 'user' and do not have the same permissions as those found in the current directory. <|target|> find Path -not -user Regex -not -i"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user'my_user' <|target|> find Path -user Regex -exec rm -r -f {} \\;             "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec echo Regex {} \\;     | sed Program                       "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not executable by all <|target|> find Path! Path                   | grep Regex       "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex Regex                                                   | xargs"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user `ian' <|target|> find Path! -user Regex -print0 | grep -v Regex        | tr Regex Regex "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -print0 | xargs -0 -I {} echo {}                     "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -maxdepth Quantity -type f -printf \"%p\\n\" | awk Program             "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f -exec echo {} \\;                         "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f | grep -E Regex | sed Program     | sed Program               "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> wc -l File | awk Program      | awk Program       | wc -l          | sort   | uniq         | wc -l "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user who is logged in to the system. <|target|> who | tee File | grep Regex                      "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to their parents <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex Regex Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -maxdepth Quantity -type f | xargs -I {} echo Regex {}     "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word in all the files in the current directory and print the output of those files <|target|> find Path -exec grep -i Regex {} + | sed Program   | grep -i Regex  "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'foo' under current directory tree <|target|> find Path -name Regex -print                 "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and times <|target|> find Path -print0 | xargs -I {} ls -l {} | awk Program     "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/file1 <|target|> find Path -newer File           |"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '^\\(error_log\\)\\(error_log\\)\\(log\\)\\(user_name)\\(config_file)\\("
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Series of numbers from 1 to 10 with dot-delimited sequence of numbers. <|target|> find Path -type f | sed Program | grep -E -e Program | sed Program | sort | uniq -c | sort"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;              | grep -v Regex            "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the last modified file in the current directory and its subdirectories. <|target|> find Path -name Regex -print0 | xargs -0 -I {} ls -l {}"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest file in the current directory <|target|> find Path -type f -mtime Timespan -exec ls -l {} \\; | sort | uniq -d   "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex | xargs -I {} dirname {}       "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -type f -exec ls -l -d {} \\; | aw"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'bluher' <|target|> find Path -user Regex -exec bzip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Quantity: Change the permissions of all regular files in the current directory tree to 644 and print the number of files changed <|target|> find Path -type f -exec chmod Permission {} + | sed Program "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the last file/directory entry 'file_with_newlines' <|target|> find Path! \\( -newer"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec split -l Quantity File {}             "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path Path -type f -exec chmod Permission {} \\;                           "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target> Find all files/directories under current directory <|target|> find Path -name Regex                      "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 10MB and print their sizes in megabytes <|target|> find Path -size +Size -exec ls -l -h {} \\; | awk Program        "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory tree that are not newer than the file '2015-08-25' and older than the file '2015-08-25' by modification time <|target|> find Path -newer File! -newer File"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex '^\\(error\\|classical\\)\\(error\\|classical\\)$' in their paths and print their paths to the console and append their paths to the file names <"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file' under current directory tree without traversing into subdirectories <|target|> find Path -maxdepth Quantity -name Regex -print0 | xargs -0 -I {} gunzip -c {} | grep -v"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the pattern given by the variable \"filename\" <|target|> find Path -name Regex               | grep Regex      "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are less than 50 megabytes in size <|target|> find Path -size -Size -size -Size -print | wc -l    | sort  | tail - Quantity   | awk Program"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are not owned by user 'ian' <|target|> find Path! -user Regex -exec grep Regex {} +     | grep Regex        "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype posix-egrep -regex Regex                                            "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all files/directories named 'document' under current directory tree. <|target|> find Path -name Regex -print0 | xargs -0 -I {} chmod Permission {}          | grep Regex  "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -exec basename {} Path               | grep Regex          "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'phil' and have not been modified in the last 30 days. <|target|> find Path -nouser -mtime +Timespan -"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/t. <|target|> find Path! -newer File -and! -newer File       | sort"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex -print                              | grep Regex   "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question for all the users of the current directory tree is \"what is the difference between the file 'file' and 'file'?\" <|target|> find Path -mmin -Quantity | grep Regex | xargs -I {} echo Regex"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by any user <|target|> find Path -not -user Regex                    "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to files/directories <|target|> find Path -exec echo Regex {} \\;                "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -print0 | sort -u | xargs -0 -I {} cat {} | sed Program         |"
    }
  ],
  "9.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not in the \"test\" directory tree <|target|> find Path -type f -not -path Regex -not -path Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                     Regex                     Regex  "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last 10 lines of output before the files/directories are sorted <|target|> find Path -exec echo Regex | sort | head - Quantity | tail - Quantity | cut -"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names do not end in \"1\" or \"2\" <|target|> find Path -maxdepth Quantity -not -name Regex -or -name Regex -or -name Regex -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This will print the names of the directories in the current directory and all subdirectories <|target|> find Path -type d -exec basename {} \\; | tr Regex Regex         | xargs -I {} dir"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that contain the string 'blowjob' in their names and do not contain the string 'blowjob' in their contents <|target|> find Path -type f -exec grep -H -i"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all the files in the current directory tree that are not in the directory \"dir1\" <|target|> find Path! -path Regex -type f -print0 | xargs -0 -I {} ls -l -d {}"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not owned by user \"pete\" <|target|> find Path -type f! -user Regex! -user Regex -exec echo Regex {} \\;   "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last 10 lines of their contents <|target|> find Path -exec cat {} + | tail - Quantity | tr Regex Regex | cut -d Regex -f Number |"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Prints process tree of a process having id \"$1\" and saves output to 'pid' variable. <|target|> pstree -a -p -i -I Regex Regex | tee File       "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|target|> find Path -type f -iname Regex -exec mv {} File \\;        | grep -i Regex       | xargs -I {} mv {} File          "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not newer than /tmp/1 and older than /tmp/2 and sort them according to their modification time and print the total sizes of them <|target|> find Path -type f -mtime +Timespan -exec"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -name Regex -maxdepth Quantity -exec cat {} \\; | tail -n Quantity           | head        | tail -n Quantity           |      |"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files in the current directory tree, starting with \"files-to-find\" and ending with \"files-to-exclude\" <|target|> find Path -name Regex -exec ls -l {} \\; | tr -d Regex   "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the number of lines in the output <|target|> find Path -name Regex -exec wc -l {} \\; | wc -l   | tail  | cut -d Regex -f Number"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex Regex {} \\;  | tr Regex Regex         | tr Regex Regex    "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the files in the current directory tree that are not in the path \"./dir/to/search/for/' <|target|> find Path -path Regex -prune -or -type f -exec ls -l {} \\;  "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'pete' <|target|> find Path -user Regex -exec grep -l Regex {} \\;         | grep Regex      "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not readable by anyone <|target|> find Path -type f! -perm Permission -print | xargs -I {} rm {}                "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory and below that have been modified in the last 180 min of a day. <|target|> find Path -mmin -Quantity -type f -exec ls -l -d {} \\; | awk Program    | x"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'pete' <|target|> find Path -user Regex -perm Permission -print0 | xargs -0 -I {} chmod Permission {}        "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints the names of all files in a current folder without descending into sub-directories. <|target|> find Path -type f -exec basename {} \\;  | sed Program             | tr Regex Regex  "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;                  | grep Regex    "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of each file under the current directory <|target|> find Path -type f | xargs -I {} ls -l {} | head - Quantity    | sed Program      | sed Program           |"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l {} +  | awk Program      | sort | tail - Quantity    | cut -d Regex -f Number   "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current working directory with the current user's full path prepended with \"dir\" <|target|> pwd | grep Regex   | cut -d Regex -f Number                    "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print only the names of the directories in the directories they are in <|target|> find Path -type d | sed Program | sort | uniq | xargs -I {} dirname {}      | grep Re"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File              Directory         Regex            File                 Directory     "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'phil' <|target|> find Path -user Regex -exec echo Regex \\;    | grep Regex        | xargs -I {} find {} -name Re"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo {} \\;    | sort  | uniq  | tr Regex Regex         | sort  | grep -E -"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for \"foo\" in the current directory tree and number the output <|target|> find Path -name Regex -type f | xargs -I {} grep Regex {} | nl   | grep -v Regex | cut -d Regex -f Number "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                          find Path -iname Regex                      find Path  "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} \\;      chmod Permission File                 |"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex      | grep -E -v Regex         | grep -E -v Regex            | grep -v Regex      "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -exec basename {} \\;      | tr Regex Regex          | xargs -I {}"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are not owned by the user 'pete' and are not newer than the file $newerthan. <|target|> find Path -type f -not -user Regex -print0 | xargs -0 -I {} du -s -h {} |"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for all files in the current directory tree that are not owned by the user tommye or which cannot be read by all <|target|> find Path -type f! -user Regex! -perm -Permission -exec gzip -l {} \\;   |"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are not owned by the user 'tom' <|target|> find Path -not -user Regex -name Regex -print0 | xargs -0 -I {} mv {} File      "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not in the user's home directory. <|source|> find Path -type f! -name Regex -exec ls -l -d {} \\;  | grep Regex      | sed Program    "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex {} \\;    | tr -d Regex                    "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -mindepth Quantity -maxdepth Quantity -exec mv {} File \\;              | tr"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the home directory, and one that is not clear to all. <|target|> find Path -type f -exec grep Regex {} \\;  | tr Regex Regex       | grep Regex   "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest file in the current directory, with the last modification time set to the same format as the file /tmp/master/timestamp. <|target|> find Path -type f -name Regex -printf '%T+ %p"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files from the current directory tree <|target|> find Path -type f | xargs -I {} sed -i Program {}              | sed Program   "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of the last modified file in the current directory tree. <|target|> find Path -type f -mtime Timespan | xargs -I {} chmod Permission {}         | tail - Quantity  "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for regular files whose names are \"some-thing\" <|target|> find Path -type f | xargs -I {} sed Program {}   | tr Regex Regex      | grep Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory without descending into hidden directories and print the names of the directories they are in <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -name Regex -execdir"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the beginning of the file, the first field of the list is the part following the last one. <|target|> cut -d Regex -f Number -f Number -e Program     | awk Program   | xargs -I {} echo"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list all the files in the current directory which have not been accessed in the last 30 min. <|target|> find Path -type f -maxdepth Quantity -exec ls -l -r -s {} \\;  | tr Regex Regex    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -R File File File        | cpio -p -d -u -m -p Regex                        "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the word \"test\" in all the files in the current directory tree and display the number of lines in the output <|target|> find Path -type f | xargs -I {} grep -l Regex {} | awk"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec echo Regex {} +     | grep Regex   | sed Program          | grep Regex      | sed Program    "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -r -f File {} \\;     | tar -c -v -f File               | tar -c -f File   "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not in the directory tree /path/to/dir. <|target|> find Path -type f! -name Regex -exec cp {} File \\;      | grep"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory that are not in the directory tree /tmp/ but instead are in the subdirectory tree /tmp/dir. <|target|> find Path -type f -name Regex -not -name Regex -"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;  | sed Program         | tr Regex"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644. <|target|> find Path -name Regex -exec chmod Permission {} \\;          | xargs -"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of find's command, with newline replacing the second comma. <|target|> find Path -type f | xargs -I {} ls -l -t -r {} | head - Quantity | cut -d Re"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the first time in the current directory and contains a list of all files and folders that are newer than the file /tmp/test/*.txt <|target|> find Path -name Regex -newer File -print0 | xargs -"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;     | grep Regex      | tr Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that have newline in their names and copy them to folder /tmp/foo/bar. <|target|> find Path -inum Quantity | xargs -I {} cp File {} {}       | xargs"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all the files/directories under current directory that are not newer than the file 'index.html' <|target|> find Path -name Regex -newer File        | grep Regex         "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -f {} \\;             | xargs -I {} rm -r -i {}                       "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline as the delimiter <|target|> find Path -print0 | xargs -0 -I {} echo Regex {}       | tr Regex Regex    "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the files/directories in the current directory <|target|> find Path -exec awk Program {} \\;    | sed Program             |"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex '^' in all the.c and.h files in the current directory tree and also print the names of the files in the subdirectories <|target|> find Path -name Regex -exec grep -l Regex {} \\;  |"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the current directory's subdirectories and the number of lines in them <|target|> find Path -maxdepth Quantity -type d | wc -l   | grep Regex | wc -l   | tr -s Regex |"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not readable by all <|target|> find Path! -perm Permission         | grep Regex      | grep -v Regex       "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for 'foo' in all the regular files in the current directory tree and also print the file names and the file sizes <|target|> find Path -type f | xargs -I {} grep -E -m Quantity -i -l Regex {}  | xargs -I {} ls"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all the files/directories under current directory that are newer than the file '2015.1.1.2' <|target|> find Path -newer File -exec ls -l -d {} \\;   | sort   | grep Regex  "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by the user www-data. <|target|> find Path -type f -not -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Print the list of all regular files in the current directory tree <|target|> find Path -type f | xargs -I {} ls -l {}  | awk Program     "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Display the last line of the file 'file' in the current directory tree <|target|> find Path -name Regex -exec awk Program {} \\; | sort | tail - Quantity | cut -d Regex -"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nTo find all the files in the current directory which are not in the path \"./dir\" <|target|> find Path -type f! -path Regex -exec chmod -v Permission {} \\;   "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | grep Regex | cut -d Regex -f Number | xargs -I {} echo Regex Regex {}          | xargs -I {} echo Regex Regex"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>| grep Regex -m Quantity Regex -s  | awk Program  | xargs -I {} grep Regex -i -l Regex {}         | tr Regex Regex  "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory that are not owned by any user or group. This is a list of files that are not owned by any user or group. <|target|> find Path -type f -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -iname Regex -mtime +Timespan -exec bzip2 -l {} \\; | sed Program | xargs -I {} tar -c -v -f File {}     "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> or\n <|target|> find Path -type f -exec sort -u -k Number -k Number -k Number -k Number -k Number -n Quantity -t Regex       | sort -u"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have been modified in the last 60 minutes. <|source|> find Path -mmin -Quantity | xargs -I {} ls -l {} | tail -"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory name without the last dot (dot) separated from the beginning <|target|> find Path -maxdepth Quantity -type f -iname Regex -printf '%f\\n' | sort | uniq | tr -d Regex | cut"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of the regular file in the current directory, with the file name containing the current directory's version number. <|target|> find Path -type f -ls | xargs -I {} ls -l -t -v -r {} | tail -"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user joe <|target|> find Path -user Regex -exec date '+%a %x %Y'  \\;    then print  '%a %x %y"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that contain the string 'console' in their contents. <|target|> find Path -name Regex -exec grep -i -l Regex {} +   | grep -i -l Regex    "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than 'Q*.pdf' <|target|> find Path -not -newer File -print0 | xargs -0 -I {} rm {}           "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have new lines in their names or are not in the list \"files\" <|target|> find Path -type f -not -iwholename Regex -print0 | xargs -0 -I {} ls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -S -h {} \\; | sort -n -r  | head         | sort -n  | tail       | xargs -I {} du -a {}"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file or directory in the current directory is a target of double-dir access. <|target|> find Path -type f -exec ls -l {} \\; | sort -r -n | head  | cut -f Number | xargs -I {} ls -l {}  "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files/directories in the current directory tree that are newer than the file $input and older than the file $output <|target|> find Path -newer File -exec ls -l {} \\; | awk Program  \\;   |"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | xargs -I {} du -a {} | sort -n | tail - Quantity | cut -f Number | xargs -I {} echo {} | sort -n |"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and print their contents <|target|> find Path -type f -exec cat {} \\; | tr Regex Regex | xargs -I {} cat {} | sed Program | x"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the contents <|target|> find Path -exec du -h {} \\; | sort -n -r  | head -n Quantity      | sed Program  "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace all newlines with : in the output <|target|> find Path -type f | xargs -I {} sed -i Program {}      | sed -i Program"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the time and mount point of each file/directory <|target|> find Path -mmin -Quantity -printf \"%TY-%Tm-%Tm-%Td %"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in the current directory <|target|> find Path -name Regex -exec cp {} File \\;          "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -maxdepth Quantity -name Regex -exec cat {} \\; | tr Regex Regex        |"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, in the past, I modified the file /etc/motd.sh to have a filename of \"myfile.txt\" <|target|> find Path -name Regex -mtime Timespan -exec file {} \\; | grep"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex  \\;             "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\; | grep Regex | xargs -I {} cat {} File {}          "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\; | tr -d Regex  | xargs -I {} cat {}         "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest file in the current directory, and deletes the oldest file if empty. <|target|> find Path -type f -iname Regex -exec ls -l -t -r {} \\; | sort | uniq -c | sort"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file 'file' and print the names of the directories from the paths <|target|> find Path -newer File -mmin Quantity -exec dirname {} \\;  | tr -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the regular file system that stores the current user's user name in the 'tmp' variable. <|target|> cat <( whoami ) | grep Regex   | wc -l    | grep Regex  | awk Program"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most used files, sorted by oldest modified file, and sorted from oldest modified to newest. <|target|> find Path -type f -printf \"%T+ %p\\n\" | sort | uniq | sort -k Number -n | tail"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find the file that is the first file found in the current directory and which is not the first file in the current directory. <|target|> find Path -type f -not -name Regex -print0 | xargs -0 -I {} dirname {} | xargs"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of directories to the right of the directory name. <|target|> find Path -type d | grep Regex  | sort  | uniq  | xargs -I {} dirname {} | xargs -I {} echo Regex {} "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are owned by user \"pet\" <|target|> find Path -user Regex -exec ls -l {} \\;  | tr Regex Regex | grep -v Regex     "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -name Regex -exec grep -E -m Quantity -n Regex {} \\;         | xargs -I {} grep -E -i Regex {}     | grep -E -m Quantity -n Regex "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the output of the ls command, that is the command which finds all files in the current directory and removes them. <|target|> find Path -type f -exec grep -l Regex {} + | sed -n Program | xargs -I {} rm {}"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -l -d {} + | awk Program      | sort  | tail - Quantity  | aw"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the files they are in <|target|> find Path -exec sed -i Program {} \\;  | awk Program        | sed"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory, with the last entry modified less than 1 day ago. <|target|> find Path -mtime -Timespan -exec ls -l -d -s {} \\;  | awk Program"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File         | tee                          | xargs -r -I {} cat {}       "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that start with 'bin' in their names and have at least one parent directory <|target|> find Path -name Regex -printf '%h\\0' | sort | uniq"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'pete' <|target|> find Path -user Regex -exec gzip -l {} \\;  | tee File      "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep -n Regex {} \\; | wc -l   | tail -n Quantity | cut -"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the top 10 most used files in the current directory. <|target|> find Path -type f -exec ls -l {} \\; | sort -u | head -n Quantity | xargs -I {} ls -l {}"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nSearch for the regex 'fileName.txt' in all the regular files under current directory tree and also show the matched lines along with the file names <|target|> find Path -type f -exec grep -H -n Regex {} \\; "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nExample usage: find Path -type l -exec grep -l Regex {} \\;     | sed Program        | grep Regex               | tr Re"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, the command \"cp\" is invoked on all files in the current directory tree. This is called \"cp\" because cp is a command. This is the same command as cp was originally created for the command \"cp\" <|target|> find Path"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to Enqueue to the terminal. <|target|> ssh into \"user@host\" on \"remote\" as user \"user\" <|target|> who | ssh Regex         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common command-line utility for converting \"bar\" to a more readable shell. <|target|> echo Regex | bash | sed Program | xargs -I {} echo Regex | tr Regex Regex"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory and remove them. <|target|> find Path -type f -exec rm -r -f {} \\;  | xargs -I {} ls File  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, it is more than a question of seconds before the file \"file\" is opened. <|target|> find Path -type f -exec sed -i Program -i Program {} \\;  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -iname Regex -size Size       | awk Program    | grep Regex      | tr Regex | cut -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for files which have not been accessed in the last 30 min. (may not be more than one minute) <|target|> find Path -amin +Quantity -type f -exec ls -l {} \\; "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec cat {} \\; | wc -l  | sort | tail -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1 | grep Regex | sed Program | xargs -r -I {} mv File {}               | tr Regex Regex       "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in. <|target|> find Path -name Regex -exec echo {} \\;   | tr Re"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -name Regex -type f -mmin +Quantity -mtime +Timespan -delete  -type f -mmin +Quantity -delete    | xargs -I {} rm {}   "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -t Directory File            | mv File                     "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This will search for all the files in the current directory and print the names of the files that contain \"foo\" in their contents. <|target|> find Path -name Regex | xargs -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -type f -exec ls -a -l -S {} \\;"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\; "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'user' and change their permission to 755 <|target|> find Path -user Regex -exec"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that are not newer than the files in the directory \"dir\" <|target|> find Path -type f! -newer File -"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | grep Regex | wc -l    | awk Program Program      | sort | uniq | xargs -I {} wc -l {}"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory and sub-directories and print their names. <|target|> find Path -exec echo Regex {} \\; | tr Regex Re"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for regular files whose names are \"file_name\" <|target|> find Path -type f | grep Regex | xargs -I {} grep"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not in the directory /path/to/dir. <|target|> find Path -type f! -path Regex -name"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for \"chrome\" in the current kernel's compile-time config file. <|target|> grep Regex | grep -o -E Regex  | cut -d Regex -f Number    | tr -d Regex | tr Regex Regex  "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path | grep -E -o -i Regex | xargs -I {} cat {} | xargs -I {} cat {}  {}       "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -path Regex -exec dirname {} \\;  | grep Regex             "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir/ that are not newer than /tmp/file/to/dir/ <|target|> find Path -newer File -exec cat {} + | sort | uniq -c | sort -n"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the regex're' in all the files in the current directory tree and display the number of lines in the output <|target|> find Path -type f -exec grep -H -n Regex {} + | grep -v -n -e Re"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are not in the path \"./dir1\" <|target|> find Path -type f! -path Regex -ls | grep -v Regex | less  | xargs -I {} ls -l"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by any user <|target|> find Path -nouser | grep -v Regex      | grep -E -v Regex     | grep -E -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | xargs -I {} grep Regex {}       | grep Regex              | grep -v Regex                   "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not readable by all and make no error for those files <|target|> find Path -type f! -perm -Permission -exec sed Program {} \\;     | grep Regex  "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for the first occurrence of \"string\" in all the regular files in the current directory tree <|target|> find Path -type f -exec grep Regex {} \\; -print | xargs -I {} grep -E Regex {}    "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file 'images.jpeg' <|target|> find Path -newer File -print0 | xargs -0 -I {} mv -t Directory {}  "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print their contents. <|target|> find Path -name Regex -exec sed -i Program {} \\;  | sed Program                  "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the contents to the console <|target|> find Path -exec cat {} \\;  | tee File           | less      "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline in their names and location <|target|> find Path -exec echo Regex Regex Regex {} + | tr Regex Regex | xargs -0 -I"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec sed -i Program {} \\;   | tr Regex Regex    | sed -i Program                     "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                       | sh                     Regex   "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;       chmod Permission File \\;    "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the current directory and its subdirectories <|target|> find Path -type f -exec echo {} \\;  | xargs -I {} dirname {}   "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -v Regex | sed Program | grep -v Regex    | tr Regex Regex | sed Program | grep -v Regex   | tail -n Quantity | cut -f Number   | tail -n Quantity    "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} \\;     | grep Regex         | xargs"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names are not \"filename\" and which contain \"image\" <|target|> find Path -type f -not -name Regex -not -name Regex -not -name Regex -print0 | xargs"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec sed Program {} \\;   | tr -d Regex | cut -d Regex -f Number            | tr -d Regex Regex      "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without going into sub-directories <|target|> find Path -maxdepth Quantity -type f! -name Regex          | xargs -I {} grep Regex {}"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( cat File | xargs -I {} -n Quantity -S {} Regex | head - Quantity )                 | xargs -I {} kill - Regex {}         "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files whose names do not end with \"file\" and do not contain \"uniform\" <|target|> find Path -type f -name Regex! -name Regex -exec grep -l Regex {} \\; "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\;  | sed Program                 | tr Regex Regex  "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 600 <|target|> find Path -type f -exec chmod Permission {} \\;   | grep Regex     | less           "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -exec chmod Permission {} \\;                   "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | grep -E -o Regex | sort | uniq | xargs -I {} dirname {}          | tr -"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> wc -l $( find Path -name Regex )  | grep -v Regex | awk Program          | awk Program         | awk Program           "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -iname Regex -exec grep -i Regex {} \\;    | tr Regex Regex               |"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find Path to directory where the file is located. <|target|> find Path -type f -name Regex -exec dirname {} \\;       | grep Regex        |"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f | xargs -I {} chmod Permission {}         "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -exec chmod Permission {} \\;       | grep Regex   "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory that have not been modified in the last 24 hours. <|target|> find Path -mtime Timespan -exec ls -l {} \\;  | tr -d"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep Regex {} \\;    | grep Regex             | xargs -I {} grep Regex {} "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are not owned by any user <|target|> find Path! -user Regex -print0 | xargs -0 -I {} cp File {}"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -mmin -Quantity -exec chmod Permission {} \\;     chmod Per"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames and not their paths <|target|> find Path -maxdepth Quantity -type f | grep -E -v Regex | x"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;        | grep Regex                   | x"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files/directories under current directory that are less than 100MB in size. <|target|> find Path -size -Size -Size -exec ls -l -S -h"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\; | sed Program | xargs -I {} tar -c -v -"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec echo Regex Regex Regex {} \\;   | tr Regex Regex              | tr Re"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically find all files/directories under current directory and print their names and sizes. <|target|> find Path -type f -exec ls -l -d {} \\; | tail -n Quantity | cut -"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of regular files in the current directory and subdirectories <|target|> find Path -type f -exec bzip2 -k File {} \\;  | grep -v Re"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of files and directories that are not in the current directory. <|target|> find Path -type f! -name Regex! -name Regex! -name Regex! -name Re"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec echo Regex \\;   | grep Regex     | xargs -I {} cat {} | xargs -I {} wc -l {}"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | split -d"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} \\;   | xargs -I {} chmod Permission {}                   "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -l -a -S -r -t {} \\; | awk"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by the user 'tom' <|target|> find Path -not -user Regex -type f -exec sed -i Program {} \\;  | tr Regex Regex     "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and file type <|target|> find Path -exec echo {} \\; | tr Regex Regex       | xargs -I {} ls -l {}     "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest file in the current directory tree. <|source|> find Path -type f -exec ls -a -l {} \\; | sed Program | xargs -I {} sed -i Program {}       | tr Regex Regex"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a part of the current directory and contains the last two lines of the file. <|target|> find Path -type f -name Regex | xargs -I {} dirname {} | tail -n Quantity | cut -d Regex -f Number | xargs -I"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that were last modified more than 30 days ago. <|target|> find Path -mtime +Timespan -exec ls -l {} \\;  | grep Regex       | xargs -I {}"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l  | tr -d Regex | grep -v Regex "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search for \"string1\" in all the.c files in the current directory tree and also print the names of the others <|target|> find Path -iname Regex -exec grep -i -l Regex {} \\;  | tr -d Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype posix-extended -regex Regex              | grep Regex                           "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that contain 'blah' in their names <|target|> find Path -name Regex -exec chown Regex {} \\;     | grep Regex          "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1 Cleaning the Stored Files from the Movies Archive Program | grep Regex | tail -n +Quantity | sed Program | cut -f Number -d Regex      | tr Regex Regex | xargs -0 -I {} chown Regex {}   "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -size +Size -exec ls -l -h {} \\;   | awk Program       | sed Program"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory that are not in the directory \"test\" <|target|> find Path -maxdepth Quantity -type f -not -name Regex -exec tar -u -v -f File {} \\"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan -user Regex -exec echo {} \\;                                "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the year, the current directory name is used to give the current directory name. <|target|> find Path -mmin -Quantity | xargs -I {} echo Regex Regex Regex Regex Regex Regex Regex {}"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $1 which are owned by user $2 or which are newer than $1 by modification time <|target|> find Path -user Regex -newer File -or -user Regex -print"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and subdirectories which have not been accessed in the last 30*24 hours. <|target|> find Path -type f -atime +Timespan -exec ls -l {} \\;     "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E -v Regex | sed Program | sort | uniq -c | sort -n | uniq -c | sort -n | uniq -c | sort -n -r  | tail -n Quantity | cut -f Number -"
    }
  ],
  "10.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for the regex 'expr' in them. <|target|> find Path -type f | grep -E Regex | grep -v Regex | grep -v Regex | xargs -I"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are newer than /bin/sh and print their names and sizes <|target|> find Path -newer File -exec echo Regex \\;       | tr Regex Re"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -maxdepth Quantity -exec echo Regex {} +       ( sed Program )         "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>With each new line in \"file.txt\" (cust3r data) converted to jpg, print the conversion and print the conversion time. <|target|> sed Program File | grep Regex | awk Program      | sed Program"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -print0 | xargs -0 -I {} cat {} | grep -E Regex | sed Program        "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree by replacing all spaces with underscores. <|target|> find Path -name Regex -exec echo Regex Regex Regex {} \\;      | tr Regex"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/is. <|target|> find Path -maxdepth Quantity -type d -exec basename {} \\;  | awk Program "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, every human being must be a machine. <|target|> Force create a symbolic link named \"myfile\" to \"myfile\" in the current directory. <|target|> find Path -maxdepth Quantity -name Regex -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and contents <|target|> find Path -type f -exec echo {} \\;  | sed Program           | grep Regex    "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -print0 | xargs -0 -I {} mv {} File {}            | xargs -0 -I {} mv {} File        "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -mtime Timespan -exec chmod Permission {} \\;          find Path -mtime -Timespan "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head        | tail           | less                | more            "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number of lines <|target|> find Path -user Regex -exec wc -l {} \\;  | tr Regex Regex | grep Regex | wc -l    | tr Re"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for 'example' in those files and display the number of lines in the output <|target|> find Path -type f -exec grep -q Regex {} + | wc -l  | grep -c Regex | cut"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -exec grep Regex {} \\;    | sed Program       | sed Program            | tr Regex Regex          "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of output from \"file\" as a table <|target|> awk Program Program | sed Program | column -t | sed Program | sed Program | sed Program | column -t | sed Program | awk Program | column -t  | sed Program"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 10 MB in size <|target|> find Path -type f -size +Size      | grep Regex       | sed Program           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are newer than /tmp and print their timestamp and file type <|target|> find Path -type f -newer File -printf \"%T+\\n\" | sort | xargs -I {} touch {}     "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -name Regex -exec wc -l {} + | sort | tail -n Quantity | xargs -I {} wc -l {}  | aw"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their permissions <|target|> find Path -perm Permission -print         | xargs -I {} chmod Permission {}               "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of files from the past week ending in \"jk\" or \"kp\" <|target|> find Path -type f -okdir Regex {} +   -ok ls -l {}  \\;  | sed Program          | grep Regex"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' and change their ownership to 'pete' <|target|> find Path -user Regex -type f -exec chown Regex {} \\;      | sed Program "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [0-9]+\\(.*\\) in their paths and show the matched lines by removing the files/directories. <|target|> find Path -regextype sed -regex Regex | xargs -"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in the home screen of a screenful of users with screen size 150 characters. <|target|> find Path -size Size -exec ls -l {} \\;    | awk Program        | sed Program           "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current folder which have not been modified in the last 7 days and force delete them <|target|> find Path -type f -mtime +Timespan -exec rm -f {} \\;            | grep Re"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of files and directories from the past 10 minutes has been accessed. <|source|> find Path -type f -amin +Quantity -exec ls -l {} \\;  | tr Regex Regex       | sed Program           "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                       File                                File   "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory tree that are newer than the file /tmp/a1 and older than the file /tmp/a2. <|target|> find Path -newer File -print       | sed Program         "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex             | sort  | uniq     | cut -d Regex -f Number         "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count the number of lines in them. <|target|> find Path -type f -exec grep -i Regex {} + | wc -l  | sort | tail -n Quantity | xargs -I {} sed -i Program {} "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -name Regex                  | grep Regex           | grep Regex                  Regex    "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;    ( sort )  | tr Regex Regex                 File "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex  -or -name Regex                        | sed -e Program                       "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace quotes ('-' with newlines) with '\\' <|target|> find Path -type f | sed Program | xargs -I {} cp -a {} File          | awk Program    "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file.old\" <|target|> find Path -newer File -exec ls -l {} \\;  | awk Program     ( sort )   | grep Regex  "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec gzip {} \\; | awk Program            | sort      | sed Program     "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex | xargs -I {} mv {} File                         "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new file named 'foo.txt' is in the current directory tree. <|target|> find Path -name Regex -print0 | xargs -0 -I {} ls -l {}      | grep Regex | cut -d Regex -f Number    "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree which are bigger than 10MB and smaller than 20 MB <|target|> find Path -size +Size -size -Size        -size -Size             Re"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of columns that show the last 10 largest files by size. <|tdrep> find Path -type f -exec ls -l {} \\; | sort -n | tail - Quantity | awk Program       | head"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0         | tr Regex Regex         "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex -prune -or -print  | tr Regex Regex            | tr Re"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and file type <|target|> find Path | xargs -I {} file {} | awk Program              | awk Program   "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the current directory tree and replace all newlines with : <|target|> find Path -type d | sed Program | xargs -I {} chmod Permission {}          "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec sed -i Program {} + | wc -l    | awk Program       "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their contents <|target|> find Path -type d -exec cat {} \\;   | grep -v Regex     | sed Program           "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -type f | sed Program     | awk Program         | sed Program     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long line of directories for each file under the current directory. <|target|> find Path -type f -name Regex -execdir rename Regex {} \\;    then create a directory named Regex with.mkv and remove"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -R -z -v File File File                             Copy File            "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files that have not changed in the last 30 days. <|target|> find Path -type f -ctime +Timespan | awk Program | sort | uniq -c | sort -n -n  | awk"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex {} \\;           | sed Program               | grep"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;           | awk Program                     "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -type f -exec ls -l {} + | wc -l   | grep Regex | tr Regex | sed Program   "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '\\(c\\|cpp\\)' in their contents <|target|> find Path -name Regex -exec grep -H Regex {} \\;    |"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | grep Regex | cut -d Regex -f Number  | grep Regex | tr Regex Regex       | tr Regex Regex        | cut -d Regex -f"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of their parents <|target|> find Path -print0 | xargs -0 -I {} echo Regex {}         | tr Regex"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths <|target|> find Path -type f -exec sort -k Number  | sort -k Number  | awk Program      | awk Program    "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -type f -name Regex       | grep Regex    "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -name Regex -exec chmod Permission {} \\;       ( chmod Permission File ) "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace every occurrences of'subdomainA.example.com' with'subdomainB.example.com' in those files/directories <|target|> find Path -type f -print0 | xargs -0"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files that are newer than 'Novarice' in their status and modification time. <|target|> find Path -newer File -exec ls -l {} \\;    | grep Regex    | sed Program      "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -type f -iname Regex -print0 | xargs -0 -I {} rm -r -f {}                 | xargs -0 -I {} rm -r -f {}     "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern /path/to/dirs <|target|> find Path -maxdepth Quantity -type d | sed Program     | tr Regex Regex      | sed Program "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under your home directory that match the regex '<script type=\"text\\/javascript\" on Mac OS X> find Path -type f -exec grep -H Regex {} \\;     | awk -v Program    "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory tree that are newer than 'file1' by modification time <|target|> find Path -newer File -print  | xargs -I {} rm {}              "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and ask the user for confirmation before running the file command.\n <|target|> find Path -type f -not -name Regex -ok true | xargs -I {} file {}       | grep Regex "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file $FTIME in regards of modification time <|target|> find Path -newer File -print      | sort   | sed Program         "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without descending into subdirectories <|target|> find Path -maxdepth Quantity -mindepth Quantity -type f -name Regex           | xargs -I {} find {} -"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that were last accessed between 90 minutes and print the timestamps of them <|target|> find Path -amin -Quantity -amin +Quantity -printf \"%T@ %p\\n\" | sort | uniq | xargs"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and their sizes <|target|> find Path -type f -exec ls -l {} \\;  | awk Program       | sort"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec cat {} \\;    | awk Program       "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline prepended <|target|> find Path -print0 | xargs -0 -I {} echo {}       |"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace all newlines with : (colon) in the output <|target|> find Path -type f -exec echo Regex Regex Regex Regex Regex {}"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the subdirectories of the current directory <|target|> find Path -maxdepth Quantity -type d -exec echo Regex {} +         | tr Re"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +          | tr Regex"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than \"file\" by modification time <|target|> find Path -type f! -newer File -print | grep -v Regex    "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -maxdepth Quantity -type f -name Regex -mtime +Timespan -exec echo {} \\;          | zcat Regex          "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec sed -i Program {} \\;        | sort    | awk Program        | sort     "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for 'pattern' <|target|> find Path -name Regex | xargs -I {} ls -l {}  | awk Program   "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show their file information <|target|> find Path -iname Regex -exec grep -i Regex {} \\;      | awk Program           |"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print only the names without extensions <|target|> find Path -type f -name Regex -exec sed -i Program {} \\;    | grep -v Regex           "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a row (one) column of numbers. <|target|> yes Regex | head -n Quantity | sed Program | awk Program | sed Program | awk Program | sed Program | sort | uniq | column -t | sort -u    |"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Prints long listing of all the files in a current folder, without recursion, and removing the last 3 lines from the output. <|target|> find Path -maxdepth Quantity -type f -exec ls -l {} \\; | sed Program    "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory tree that match 'copy' in their paths and copy them to /var/www/html/ <|target|> find Path -name Regex | grep -v Regex | xargs -I {} cp -p {}"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, I changed my password to my current one. <|target|> ssh-keygen -f File           | sed Program                      "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r       | less                            "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and their sizes <|target|> find Path -type f -exec ls -l {} \\; | awk Program       | sort   | awk Program       |"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of files and directories of the /etc directory tree <|target|> find Path -type f | awk Program | sort | uniq -d  | sort -t Regex | cut -d Regex -f Number    | tr Re"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the lines matching \"foo\" <|target|> find Path -type f -exec grep -l Regex {} + | sort | tail -n Quantity | cut -d Regex -f Number | xargs -I {} grep"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>File | grep Regex | grep Regex | sed Program | awk Program | xargs -I {} ls -l {}     | sed Program             | awk Program      "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nAutomatically create a symbolic link named \"~/mylink\" to \"~/mylink\" in \"/tmp/oldlink\" <|target|> ln -s File Regex Regex     | grep Regex     "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find all the files in the current directory and print them. <|target|> find Path -type f -exec echo Regex Regex Regex {} \\;        | sed Program    "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|target|> Find all the files in the current directory tree whose names begin with \"file1\" and move them to Folder1 <|target|> find Path -name Regex -mmin -Quantity -exec rename Regex {} +    "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from Folder1 and Folder2, merging with their parent directories in the process. <|target|> find Path -type d -exec cp {} File \\;           "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -print0 | xargs -0   | xargs -0      | sed Program       "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '<script>find Path -regex Regex      in their paths <|target|> find Path -regex Regex      "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -exec grep Regex {} +          | grep Regex                              "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;    | tr Regex Regex     "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +       ( chmod Permission )       "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their path and owner <|target|> find Path -type f -exec grep -i Regex {} \\;       | tr Regex Regex          "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 640 <|target|> find Path -newer File -exec chmod Permission {} \\;        Change the permission to 644        with x"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for \"foo\" in those files and show the first 10 of the matched lines with the first line deleted <|target|> find Path -type f -exec grep -H Regex {} + | sed Program | xargs"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 600 <|target|> find Path -type f -exec chmod Permission {} \\;         | awk -F Regex Program       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a shell option that is not found in all regular files. <|target|> find Path -type f -name Regex -exec echo Regex {} \\;       ( sort )       | grep Regex    "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count them <|target|> find Path -type f -name Regex | xargs -I {} wc -l {}  | grep Regex | sed Program          | sed Program"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -print0 | xargs -0 -I {} wc -l {}   | wc      | grep Regex    | tr"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\;   | grep -v Regex               | xargs -I {} grep -i Regex {}      "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for 'foo' in those files and show the first 10 lines of the output <|target|> find Path -type f | xargs -I {} grep -i Regex {} | head -n Quantity | cut -"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time series one, we expect the output to be of the first character of each line. <|target|> awk Program Program     | sort -u | head -n Quantity       | sed Program      "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec sed Program -i -l Program {} + | xargs -I {} wc -l {}  | tail"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '<filetype>' in their paths and show the matched lines with their filenames <|target|> find Path | awk -F Regex Program | sort"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File                                                 "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than '20150105' by modification date <|target|> find Path -newer File        | grep Regex     "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed within the last hour <|target|> find Path -amin -Quantity -exec bzip2 {} \\;      | tee File     "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/ <|target|> find Path -type d -exec basename {} \\;     | awk Program   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not newer than the file $newerthan and not newer than the file $olderthan and delete them <|target|> find Path -type f! -newer File! -name"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths <|target|> find Path -type f -newermt Regex! -newermt Regex! -name Regex        | tr Regex"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex {} \\;    | tr Regex Regex          "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths <|target|> find Path -type f -mtime Timespan     | sed Program       | sed Program        |"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -user Regex -exec echo Regex Regex Regex \\;       Print"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Sort \"file\" by the first and second of two columns <|target|> sort -u -t Regex -k Number -k Number -k Number -k Number -k Number -k Number -k Number File |"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for the regex 'expr' in those files <|target|> find Path -exec grep Regex {} File \\;      | tr Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Line 2 of code is used to create intermediate directories as required and directories as required. <|target|> mkdir -p Directory            | tr Regex Regex   "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> View the contents of \"file1\" in the current directory tree in a buffer with zeroes and remove any lines that are not in the same file as \"file2\" <|target|> find Path -maxdepth Quantity"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for 'example' in those files and display the number of lines that contain 'Example' and the files differ <|target|> find Path | grep -E -"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory tree that are not newer than the file \"file.txt\" <|target|> find Path -type f -newer File! -name Regex  -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths <|target|> find Path | sed Program | grep Regex | sed Program | awk Program | xargs -I {} mv File {} "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Username: <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex Regex Regex Regex Regex Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -name Regex -maxdepth Quantity -mmin +Quantity -delete  \\;   | xargs -I {} rm {}              "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                         | xargs -I {} mv {} File    "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to change the owner of all the files in the current directory to \"user1\" and group to \"user2\" <|target|> find Path -name Regex -exec grep Regex {} +"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of files that are newer than the file $newerthan and older than the file $olderthan. <|target|> find Path -type f -name Regex -and"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -execdir echo Regex {} +       "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} +      "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link without dereferencing named \"file.txt\" to \"file.txt\" <|target|> ln -s -n File Regex     "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex for '<|target|> find Path | xargs -I {} wc -l {}  | grep Regex | awk Program        | sort"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex Regex Regex {} \\;    | grep -v Regex       "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> >> Find all files under current directory that are newer than /etc/motd/ and print their timestamps and paths <|target|> find Path -type f -newer File -exec echo"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their contents <|target|> find Path -type f -exec grep -i Regex {} \\;  | xargs -I {}"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/master <|target|> find Path! -newer File                | tail - Quantity   "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of files newer than /tmp/file. <|target|> find Path -type f -newer File! -name Regex -exec ls -l {} \\;    | awk Program            "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and show a few lines of output from the beginning <|target|> find Path -type f -exec echo Regex {} \\;      | head              |"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file1' by modification time <|target|> find Path -newer File -type f -printf '%TY-%Tm-%Tm-%Td %TT "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -ls | wc -l  | grep Regex | awk Program     | sort | uniq -c | sort -n"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the current directory, starting with \"1\" and descending. <|target|> ls -l | grep Regex | awk Program | xargs -I {} rm -r -f {}              |"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 775 <|target|> find Path -type f -exec chmod Permission {} \\;      | sed Program               "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f -exec pgrp Regex {} \\;  | grep Regex          | xargs -I {} cat {}  {}                     Re"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0  | xargs -I {} grep -E Regex {}           | tr Re"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a process-based mapper that compresses all files in a current folder and compresses only the files that match the name pattern \"*.bills\". <|target|> find Path -type f -name Regex -exec bzip2 -v -n {} + | grep"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a shell script designed to replace the syntactically correct substitution of 'previousword' with 'newword' in all files under current directory. <|target|> find Path -type f -exec sed -i Program {} \\;     "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for'mykeyword' in them. <|target|> find Path -type f -exec rename Regex Regex {} \\;     | sed Program       "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the top 10 most used utilities in the current directory. <|target|> find Path -type f | xargs -I {} ls -l {} | sort | uniq -c | sort -n  | head  | awk Program"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files which have not been accessed in the last 30 days and which are bigger than 50MB in size in the Downloads folder of the dirge (GNU VERSION) <|target|> find Path -type f -atime +Timespan -size +"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'foo' by modification time <|target|> find Path -newer File -print      | sed Program          "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print 'directory' appended with a null character at the end of each line <|target|> find Path -empty -print0 | xargs -0 -I {} dirname {} | sed"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that were modified within the last 24 hours <|target|> find Path -mtime -Timespan -type f   | sed Program      | sed Program     "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>    create a tar ball of all the files in the current directory tree that have not been accessed in the last 30 min.    then remove them.   then create a tar ball of all the files in the current directory <|target|> find Path"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and search for the regex '^' in those files. <|target|> find Path -name Regex | xargs -I {} grep -E Regex {} | xargs -I {} grep -H Regex {}"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their md5sum results <|target|> find Path -depth -exec md5sum {} \\; | awk Program       | sort  | md5sum    "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree <|target|> find Path -type f -print0 | xargs -0 -I {} sed -i Program {}      | sed -i Program       "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for'search string' in them. <|target|> find Path -type f | xargs -I {} grep Regex {} | xargs -I {} grep -I {} grep Regex {}    |"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill -n Quantity -H Regex             | sed -n Program                               | less  "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that were accessed in less than a day ago <|target|> find Path -type f -atime -Timespan -exec sed -i Program {} \\;            | grep"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} cp -u -p {} File                    "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $newerthan and delete them <|target|> find Path -type f! -newer File -exec rm -r {} \\;           "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths <|target|> find Path -type f -exec echo {} \\;     Print  '-execdir ls -l {} \\;'    | tr Regex Regex"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files under current directory and print their contents <|target|> find Path -type f -exec cat {} \\;  | grep Regex            | tr Regex Regex       "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -l -u -s -b File | awk Program  | sort | uniq -c | sort -n -r   | awk Program          | sort -n  | uniq -c      "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfn create a symbolic link in the current directory for each file in the current directory and subdirectories. <|target|> find Path -name Regex -exec ln -s {} Regex \\;     "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec grep Regex {} \\;   | tr Regex Regex         Regex         "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfn create directory jobs <|target|> find Path -type f -name Regex -exec mkdir Directory         | sed Program              |"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are larger than 100000 bytes and have not been accessed in the last 10 minitues. <|target|> find Path -size +Size -atime +Times"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (fn) Find all files/directories under current directory and search for 'file' in those files <|target|> find Path -name Regex | xargs -I {} file {}       | grep Re"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex with sed -e Program Program        | grep Regex           | sed Program               "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files under current directory and print their paths and times <|target|> find Path -type f -exec echo {} +  | awk Program       | tr Regex Regex"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for 'example' in their path names and show the first one found <|target|> find Path -mmin Quantity | head  | grep -o -P Regex"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, there has been no apparent limit to the number of lines in the file \"file\" <|target|> find Path -type f -name Regex -exec wc -l {} \\;  | aw"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -type f -exec grep -H -n Regex {} \\;         | grep Regex              | grep -"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory tree that are at least 1 level deep and print their names and parent directory names <|target|> find Path -mindepth Quantity -maxdepth Quantity -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '^.*' in their names <|target|> find Path -name Regex -exec grep -H Regex {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (This will be the first time that a file like \"file\" is found.) <|target|> find Path -name Regex -type f -exec ls -l {} \\;    | grep Regex"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the beginning of the line, \"This is the first line of the output of [1] <|console> display the differences between the first and second line of the output of [2] <|console> diff <"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files under and below the current directory that match pattern \"./sr*sc\" in their contents and print the lines matching with newline and original word \".\" <|target|> find Path -"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +     | awk -F Re"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames of the files that match the user has selected <|target|> find Path -name Regex | xargs -I"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path -type f -exec chmod Permission {} \\;       | grep Regex                    "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec grep Regex {} \\;     | grep Regex            | tr Regex Re"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [stringWithPattern]* <|target|> find Path -name Regex -exec sed -i Program {} \\;       | awk -F Regex Program   "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that have not been modified in the last 30 minitues. <|source|> find Path -type f -mmin +Quantity | xargs -I {} ls -l {} | grep Regex | cut -d Regex -"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [0-9]+.* <|target|> find Path -type f -regex Regex | sed Program | xargs -I {} sed -i Program {}        "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the null delimited variable \"candidates\" <|target|> find Path -maxdepth Quantity -name Regex -execdir grep Regex {} +      | sed Program      "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 640 <|target|> find Path -type f -size +Size -exec chmod Permission {} +        | sed Program         | head  "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long listing of the files from the current directory tree, showing only the names of the files not matching the patterns 'ignored_directory', 'ignored_directory', 'ignored_pattern' and 'other_pattern' <|target|> find Path! -name Regex! -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than '1.1.1' by modification time <|target|> find Path -newer File         | grep Regex         "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -print | sed Program                  | awk Program                | sed Program           "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '.*/course*' in their paths and show the matched lines with their filename and file name <|target|> find Path | grep -E Regex | xargs -I {} chown Re"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines <|target|> find Path -exec grep -l Regex {} + | wc -l   | tr Regex Regex | sort | tail -n Quantity | cut -d Regex -"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of smaller files, starting with the current directory. <|target|> find Path -type f -size +Size -exec ls -l {} \\;  | sort | awk Program      | head "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process with 3 levels of parallel processing and 4 parallel processes. <|target|> pwd | grep Regex | tr Regex Regex | grep Regex | cut -d Regex -f Number | xargs -I {} rm -"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -user Regex -atime +Timespan -user Regex -ls           | awk Program                      "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for 'foo' in their file information and display the matched lines. <|target|> find Path -type f | xargs -I {} grep Regex {}      | grep"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that contains the string TEXT and print the filenames <|target|> find Path -name Regex -print0 | xargs -I {} grep -E Regex -e Regex"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, the output of awk (.) is used to create symbolic links in the current directory. <|target|> awk Program Program | sed Program | sed Program | awk Program | xargs -I {} mv Program {} "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the directories under current directory <|target|> find Path -type d -exec sed -i Program {} \\;    | sort   | awk Program      | sort   |"
    }
  ],
  "11.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a recursive process that would rename all files in the current directory to lower case. <|target|> find Path -type f -iname Regex -exec mv {} File \\;     | grep -i Regex    "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/foo/ and prints only the files that match pattern 'file-pattern' <|target|> find Path -name Regex | xargs -I {} grep -l Regex {}     "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than /tmp/dir1 and delete them <|target|> find Path -maxdepth Quantity -not -newer File -exec rm -r {} \\;  "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/user/daily/ and print the names of the files that match with the pattern '%./[0-9]*' <|target|> find Path -name Regex | xargs -I {}"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose names begin with \"album\" and end with \"vacations\" and delete them. <|target|> find Path -name Regex -or -name Regex -or -name Regex -or"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'foo.txt' <|target|> find Path -newer File -not -name Regex -print | xargs -I {} cat {}   |"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and subfolders which have not been accessed in the last 30 days. <|target|> find Path -atime +Timespan -print        | awk Program      "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under the home directory that are larger than 100 Kilobytes. <|target|> find Path -size +Size -size -Size  | tail -n Quantity | cut -f Number        "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive command that removes all files in the current directory that have newlines in their names. <|target|> find Path -type f -print | grep -i Regex | xargs -I {} rm -f {}     "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;          | grep -i Regex           | xargs -I {} mv {} File    "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new version of \"vim\" is in the process of running a script with new line in its name. <|target|> source <( sed Program )  | grep Regex       | xargs -I {} mv File         "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -name Regex | head     | tail         | xargs -I {} -n Quantity -I {}         {}          | tail        "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/directory/* <|target|> find Path -maxdepth Quantity -type d -exec basename {} \\;             "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than $date_time in their names and do not search in the subdirectories of the current directory. <|target|> find Path -maxdepth Quantity -name Regex -not -name Regex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of information for the world. <|source|> find Path -type f -exec sed -i Program {} +    | awk Program        | sed -i Program           | tr"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive recursive file with no output from the beginning. <|source|> find Path -type f -exec ls -l {} \\; | sort -n | tail - Quantity | cut -f Number -d Regex         | awk Program "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than /bin/sh and do not have newline in their names <|target|> find Path! -newer File -name Regex -print   | grep -E -v Regex "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines matching the regex '<scriptName=\"^0-9\\n\"\\n>' from those files <|target|> find Path -type f -not -name Regex -exec sed -i Program"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory that contains the current directory's subdirectory. <|target|> find Path -maxdepth Quantity -name Regex -type d -execdir Regex \\;  | sed Program               | xargs "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/you/dir and change their permission to 755 <|target|> find Path -type f -perm Permission -exec chmod Permission {} +       -exec chmod Permission {}        "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $1 and delete them. <|target|> find Path -type f! -newer File -exec rm -f {} \\;  | sed Program      | sed Program      "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -type f -exec wc -l {} +  | wc -l File | wc -l | grep -v Regex | wc -l "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/jassi/ directory that are newer than /tmp/foo/bar and older than /tmp/foo/bar/ respectively and print the lines containing the file names <|target|> find Path -newer File -not -name Regex"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first line of every txt file in the current directory tree contains a line starting with \"foobar\" <|target|> find Path -exec sed -i Program {} +  | grep Regex       | sed Program           | tail -n"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by any user <|target|> find Path! -user Regex -type f -exec ls -l {} \\;  | awk Program       | sort  | uniq    | sed"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number and file type of each one <|target|> find Path -name Regex | xargs -I {} -n Quantity -I {} file {}       | awk Program     "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown Regex File             user Regex                                 user Regex          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive pattern '^.*/[0-9]+/[0-9]+*' in their names <|target|> find Path -iname Regex           | grep"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l {} + | sed Program       | tr Regex Regex      | tr Regex Regex     "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'wn' <|target|> find Path! -user Regex -not -name Regex -not -name Regex -not -name Regex  | xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex              | xargs -I {} grep Regex {}          {}             | grep Regex        "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not empty <|target|> find Path -not -empty -type f -exec echo Regex {} +   | tr Regex Regex          | sed Program     "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex   -and -name Regex                                  | grep Regex             x"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern '*-*' <|target|> find Path -maxdepth Quantity -type d | sed Program   | xargs -I {} ls -l {}  | sed Program       "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f | grep Regex | sed Program | sed Program | sed Program | sed Program | sed Program | sed Program | sort | uniq  | tr -d Regex       | tr -d Regex        "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -exec grep -i Regex {} \\;   | sed Program               | awk Program   "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec mv {} File \\;        | sed Program            | xargs -"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the current and last directories in the directory tree <|target|> find Path -type d -exec basename {} +   | sed Program      | sed Program        | sed Program       "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree <|target|> find Path -user Regex -exec basename {} \\;     | tr -c Regex         | cut -d Regex -f Number   "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names <|target|> find Path -type f | xargs -I {} echo Regex Regex {}      | sed Program            "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory and its subdirectories <|target|> find Path -name Regex -exec grep -l Regex {} \\;  | grep -l Regex        | tr"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user 'raptor' <|target|> find Path! -user Regex -print  | tr Regex Regex          |"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command'sudo ls' on each of them <|target|> find Path -name Regex | xargs -I {} echo Regex Regex {}        "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current user has set the permissions to 755.\n <|target|> chmod Permission $( which Regex )                | xargs -I {} chmod Permission {}     "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/ that have not been accessed for 5 minutes <|target|> find Path -amin +Quantity -exec sed -i Program {} \\;    | grep -i Regex  "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 775 <|target|> find Path -type f -exec chmod Permission {} +      | grep Regex          | sed Program"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not newer than the file $oldfile and delete them <|target|> find Path -type f! -newer File -exec rm -f {} \\;   | grep Regex | sed Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print only the file names <|target|> find Path -type f | sed Program | xargs -I {} echo Regex {}  | cut -d Regex -f Number       |"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v -p --exclude Regex File File                                    | cpio -p"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under Folder1 and copy them to Folder2. <|target|> find Path -type f -name Regex | xargs -I {} -n Quantity -I {} -exec basename {} | wc -l "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex \\;     | tr Regex Regex       | cut -d Regex -"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;            | xargs -I {} tar -c -v -f File {}         |"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest and most-read website, Regex.com, has been in the top 10 for the past 10 days. <|target|> find Path -type f -daystart -exec ls -l {} +%h | sed Program | xargs -"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} +  | tr Regex Regex        | xargs -I {} echo {}   "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for the regex '^pipe' in those files <|target|> find Path -exec grep Regex {} +    | xargs -I {} grep Regex {}     "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} +      | sed Program       "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/username/tmp/daily/ that are greater than 100k and do not have the write permission for anyone. <|target|> find Path -type f -perm -Permission! -perm Permission -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>NEW YORK (The) -- A group of environmentalist groups has been working hard to create a world in which all environmentalist groups are welcome in the current directory. <|target|> find Path -iname Regex -or -iname Regex -or -"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -v Regex     | grep Regex           | grep -v Regex            | grep -v Regex        "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose permissions are not 644 and do not traverse the subdirectories of the directories <|target|> find Path -maxdepth Quantity -type f! -perm Permission  | grep -E Regex   | sed Program"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files/directories under current directory <|target|> find Path -name Regex        | sed Program               | grep Regex      "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}                  | xargs -0 -I {} rm -r -f {}       "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all the files in the current directory tree and its subdirectories. <|target|> find Path -type f -exec basename {} Regex \\;  | awk Program               "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec awk Program {} \\;  | sed Program          | sed Program             "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec sed -i Program {} + | sed -i Program {} +  | sed -i Program              "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace \"foo\" with \"bar\" in their names <|target|> find Path -type f -exec sed -i Program {} +  | grep Regex         | sed -i Program   "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -name Regex -exec grep -H Regex {} +   | grep -H -n Regex       | sort  | uniq     | sed Program          "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -type d -not -iwholename Regex             | grep -E -v"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This script is for the job \"gradle\" created by the user \"katal\" with the current user in mind. <|target|> find Path -name Regex -exec sed Program {} \\;     | awk Program        | xargs -"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l {} \\; | sort -n | awk Program      "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -name Regex | xargs -I {} echo Regex          "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by | grep Regex | cut -d Regex -f Number | grep -E Regex -e Regex      | cut -d Regex -f Number  [^:.]      "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for files which have not been modified in the last 5 weeks and which are newer than /tmp/daily_list. <|target|> find Path -type f -mtime +Timespan | xargs -I {} ch"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace the first instance of \"string1\" to \"string2\" <|target|> find Path -type f | sed -e Program | xargs -I {} -n"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | grep Regex | sed Program | xargs -I {} ls -l {}  | awk Program                    "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Statistics show the total disk usage of all files in the current directory than the file $FILE. <|target|> du -s -h --total File | tail -n Quantity | cut -d Regex -f Number | sed Program"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -name Regex -mtime +Timespan | xargs -I {} bzip2 -d {}   | awk Program       | tac       | tail"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>numbers in /usr/bin, and output the result to the screen. <|target|> find Path -type f | sed Program | sort | xargs -I {} grep -n Regex {}  | sed Program  "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec ls -l -d {} \\;   | sort    | uniq    |"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -iname Regex -execdir echo Regex \\;       | sed Program       | tr Regex    "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of files from the current directory tree that were modified within the last 60 minutes <|target|> find Path -mmin -Quantity | xargs -I {} ls -l {}      | tail -n Quantity      "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file\" <|target|> find Path -newer File -and -print0 | xargs -0 -I {} ls -l {}  | grep Regex     "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/$$ <|target|> find Path! -newer File! -newer File       | grep -E Regex      "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files under current directory that are not newer than '._' and older than '._*' and delete them <|target|> find Path -type f! -newer File! -newer File! -newer File -exec rm -f {} \\"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec ls -l -d {} +  | sed Program            | grep Regex        "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -printf '%s %p\\n' | sort -r -n | head -n Quantity         | awk Program              | xargs -I {}"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Print the names of all files under current directory and its sub-directories. <|target|> find Path -type f -exec echo Regex \\;  | sed -n -e Program      | sed -n Program      "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $dir directory tree that match the regex '<script type>\\(c|h\\|cpp\\)' in their names <|target|> find Path -name Regex -exec sed -i Program {} \\;   |"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec ls -a -l {} \\; | awk Program      | sort | uniq | xargs -n Quantity -I {} echo Regex"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/files and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +     ( chmod Permission File ) "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generate the reverse history for each entry in the current history list, then reverse the order of the first 3 entries. <|target|> history | reverse -u Quantity | awk Program       | sort | uniq | xargs -n"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the lines of their contents <|target|> find Path -type f -exec sed -i Program {} +  | grep Regex         | sed -i Program "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names begin with \"~\" and whose name ends with \"~\" <|target|> find Path -name Regex -and -mmin Quantity -print0 | xargs -0 -"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the files from the current directory tree that are not newer than file `Nov' <|target|> find Path -type f! -newer File! -newer File! -exec cp {} File \\;  "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -v Regex | sed Program  | sed Program   | sed Program     | sed Program      | tr Regex Regex       | tr Regex Regex       "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -exec cat {} + | xargs -I {} ls -l {}         |"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path Path Path -type f -name Regex             | xargs -I {} grep -l Regex {}                    "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;  | sed Program            | grep Re"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command [oracle code] that is specified by the environment variable PATH. <|target|> find Path | grep -E Regex        | xargs"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /path/to/directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} +      | grep -v Regex      | tr Regex"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory tree contains a large number of files and directories that are not accessible to the public. <|target|> find Path -type f | grep -E Regex | sed Program | grep -E Regex | sed Program | awk Program | xargs -I {} ls"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which are bigger than 10MB and less than 50 MB. <|target|> find Path -size +Size -size -Size -exec ls -l -s -h {} \\; | awk Program        "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the year, the current directory tree has been modified to a directory named'somename'. <|target|> find Path -name Regex -type d -exec mkdir -p -- Regex {} \\;          "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and parent directories <|target|> find Path -type f | xargs -I {} echo Regex Regex {}         | sed Program        "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The first 100 lines of output of \"bash\" are the output of \"bash\" interactive script, and the last 100 lines of \"output\" are the output of \"bash\" <|target|> source $( sed Program | cut -f Number -d Regex | sed Program | sed"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the ls command on each of them to create a single tar ball of the files. <|target|> find Path -name Regex | xargs -I {} tar -c -v -f File {}"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -name Regex -exec awk Program {} \\;   | sort  | grep -i -v Regex      | head -n Quantity         | awk Program          "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec sed -i Program {} +    | awk Program         | sort | uniq  | sort -"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|source|> Find all files under current directory and print their names and lines <|target|> find Path -type f -exec sed -i Program {} +   | grep -E Regex     | cut -d Regex -f Number  "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a process that compresses all the files in the current directory and compresses the files in the sub-directories. <|target|> find Path -depth -exec compress File {} + | sed Program          |"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -l -s {} + | awk Program  | sort | uniq    | tail   "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | xargs -I {} -P Quantity tail -n Quantity                                       "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec basename {} \\;   | grep Regex      | cut -d Regex -"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their contents <|target|> find Path -type f -exec cat {} + | tee >( wc )     | sort  | uniq  | sort  | grep -"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a question I have been using for a while now. <|target|> find Path -name Regex -exec grep Regex {} +    | xargs -I {} grep Regex {}     | xargs -I {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +    | grep -E -v Regex       |"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +     | grep Regex      | xargs -I"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their path names <|target|> find Path | xargs -I {} ls -l -d -i {}     | grep Regex       | tr -"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a command to create a tar of all the files in the current directory tree that have not been accessed in the last 30 weeks. <|target|> find Path -mtime +Timespan -exec tar -r -v -f File {} \\"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755. <|target|> find Path -name Regex -exec chmod Permission {} + | xargs -I {}"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis is a long listing of all the files in the current directory which are bigger than 10KB. <|target|> find Path -size +Size -iname Regex -exec ls -l -s {} \\;"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>gggen | grep for the regex '^ERROR' <|target|> find Path -regex Regex | xargs -I {} grep Regex {}  | grep Regex       | tr -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis will be the first directory in the list of directories that are not empty. <|target|> find Path! -maxdepth Quantity -type d! -empty  | sed Program       | tr"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Find all files/directories under current directory and run the command \"cp\" on each of them <|target|> find Path -size Size -exec cp {} File \\;    "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the path names of their parent directories <|target|> find Path -type f | xargs -I {} ls -l -S -h {}   |"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and times <|target|> find Path -exec basename {} +     | sed Program       "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and lines number and filepath <|target|> find Path -type f -exec grep -i Regex {} + | sed Program    "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print only the file names of the directories that match the pattern \"*.html\" <|target|> find Path -name Regex -execdir grep -H -n"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f -name Regex -mmin +Quantity -delete       | xargs -r -I {} rm {}      "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File                    | xargs -I {} mv -f File File     "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex Regex | sed Program  | grep Regex | sed Program   | wc -l    | awk Program        | sed Program "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under /path/to/files/dir and print their names and contents <|target|> find Path -name Regex -exec ls -l -"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that have not been modified in the last 180 hours. <|target|> find Path -mtime +Timespan -exec ls -"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under /path/to/dir/ and print their paths and sizes <|target|> find Path -exec ls -l -d {} +  |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | grep Regex | sed Program | cut -d Regex -f Number | xargs -I {} grep -n Regex {}       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -v Regex | awk Program  | sed Program  | sort | uniq | wc -l  | sort -u  | sed Program  | sort -n | tail -"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory name without the last two extensions. <|target|> echo Regex | awk Program  | sed Program          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that are less than 100 kB in size. <|target|> find Path -size -Size -and -size -Size "
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print the lines of output to the console and view the result in a screencap. <|target|> find Path -name Regex"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f | xargs -I {} ls -l -s {} | awk Program    | awk Program          |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of three columns that describe the process by which the file $something is modified. <|target|> find Path -type f -exec file Regex \\; | awk Program  | sed Program       | sed Program   "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} +    | sed Program             | grep Regex      "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree <|target|> find Path -type f | sed Program | sort | uniq | sort | uniq | wc -l | sort -u  | sed Program | sort -n  | sed Program"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are greater than 100000 bytes in size <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | grep Regex | sort | uniq | grep -E -o -"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /dir/ <|target|> find Path -type f -exec ls -l {} \\;    | tr Regex           | tr Regex Regex     "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;  | tr Regex Regex         | sed Program     "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f | xargs -I {} grep -R Regex {}  | xargs -I {} grep -P Regex {}                              "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /tmp/files that match the regex '^.*/' in their names <|target|> find Path -name Regex -exec grep -i Regex {} +  | xargs -I {} grep -l Regex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>> Find all the files/directories under current directory and search for'search string' <|target|> find Path -name Regex | xargs -I {} grep Regex {}        | grep -E Regex        "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory tree <|target|> find Path -type f -exec ls -l {} +   | sed Program           | awk Program    "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories. <|target|> find Path -maxdepth Quantity -type f -name Regex       | sed Program           | grep Regex "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, the word \"re\" has been used to describe all regular files under and below the current directory. <|target|> find Path -type f -exec grep Regex {} +    | xargs -I {} readlink File {}"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and sizes <|target|> find Path -type f -exec basename {} \\;     | sed Program            | awk Program"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec wc -l {} + | wc -l    | tail -n Quantity | cut -f Number |"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/daily/ that are less than 100MB in size <|target|> find Path -size +Size -size -Size -exec rm -r -f {} \\;   | grep Regex   "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the /etc directory tree that are not modified in the last 180 days <|target|> find Path -mtime -Timespan -type f  | grep -v Regex         "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -type d | grep Regex | sed Program | tail -n Quantity | sed Program | sed Program | xargs -I {} rsync -a -v -v --stdout Regex File    "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for \"search string\" in those files and display the matched lines along with the file names <|target|> find Path -name Regex -exec grep -H Regex {} +   | sed Program"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /usr/local/bin that are newer than the file /tmp/test/ but do not match the file/directory name <|target|> find Path -newer File -exec rm -r -f {} \\;"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files from Folder1 whose names begin with \"foo\" <|target|> find Path -type f -exec sed -i Program {} + | sed -i Program            | sed -"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f | xargs -I {} ls -l -s {} | awk Program         | sort  | uniq "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( master Regex )          | ssh -o kill $( master Regex )                        | ssh -o kill $( master Regex ) "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file or regular file named 'foo.txt' is a symbolic link between two HTML files. <|target|> ln -s File Regex         | sed Program          | grep Regex   "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex \\;    | xargs -I {} dirname {}        | xargs -I {} dirname"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest file or directory in the current directory. <|target|> find Path -maxdepth Quantity -not -name Regex -not -name Regex -printf \"%T+\\t%p\\n\" | sort | tail -n Quantity |"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree whose names begin with \"foo\" and which have not been modified in the last 3 days. <|target|> find Path -name Regex -mtime +Timespan -exec chmod Permission {} \\; "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of three consecutive line catchers. <|target|> cat File | grep Regex | cut -d Regex -f Number | tr Regex Regex | xargs -0 -I {} find Path -iname Regex {}   "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -exec awk Program {} \\; | awk Program       | sort | uniq  | sort -n   | cut -f Number   | xargs -I {} wc -w {}     |"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E Regex | sed -e Program | grep -e Program | sed -e Program | grep -e Program | sed -e Program | sed -e Program | xargs -I {} echo Regex {}   "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the output of the ls command, and the output of the ls command. <|target|> find Path -name Regex -exec ls -l -s {} \\;         "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, the directory /tmp/test/ is used to store the current date in the format specified by the variable'month' <|target|> find Path -type f -printf '%Y %p' |"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -exec echo Regex \\;      | grep -v Regex    "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -d {} +  | sed Program        | aw"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep -H Regex {} +    | sed Program           | tr Regex Regex Regex     "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below that are larger than 10M. <|target|> find Path -size +Size -exec ls -l -d -s {} \\;  | awk Program "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Domain name is for domain name, not domain name. <|target|> dig Regex Regex Regex       | grep Regex        | grep Regex     "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -l -s {} \\; | awk Program    "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;         | grep -v Regex         | grep -E -i Regex "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files on the system whose names begin with \"oracle' <|target|> find Path -name Regex -or -name Regex -or -name Regex -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive process that is designed to display the number of lines in files in the current directory and subdirectories. <|target|> find Path -type f -exec wc -l {} + | sed"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files under current directory and subdirectories and print the names of the files they are in the directory <|target|> find Path -type f -exec echo Regex {} +  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for files that are writable by others and remove them. <|target|> find Path -maxdepth Quantity -perm Permission -exec rm -r -f {} \\;      | sed Program"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|target|> find Path -type f -iname Regex -exec bzip2 -d {} \\;    | grep Regex             "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all the files in the current directory tree whose names are shorter than 10 characters. <|target|> find Path -type f | grep -E Regex | sed Program | sed Program | cut"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and sizes <|target|> find Path -exec ls -l -s {} +  | sort -n | cut -f Number | sed Program"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and search for 'example' in each of them and display their contents <|target|> find Path | xargs -I {} grep -E Regex -e Re"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path -type f -exec chmod Permission {} \\;                      | xargs -I {} chmod"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -group Regex -exec grep -l Regex {} +    | grep -l Regex     | tr Regex Regex       "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not readable by all <|target|> find Path! -perm Permission        | grep -E -v Regex       | sed Program     "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common file name for all files under the current directory tree <|target|> find Path -type f | xargs -I {} ls -l {}  | awk Program      | tr Regex Regex         | grep Regex "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file/directory and do not contain any files/directories <|target|> find Path -not -newer File -print0 | xargs -0 -I {} sed -i Program {}"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and run the command \"gradle\" on each of them <|target|> find Path -name Regex -exec sed -i Program {} \\;               | xargs -I {}"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a process tree that is run on Windows, using interpreter'stdin'. <|target|> find Path -iname Regex -exec cat {} + | grep Regex     | xargs -I {} chmod Permission {}        "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory tree <|target|> find Path -type d | wc -l  | sed Program | awk Program  | awk Program  | sort | uniq | sort -n -r | cut -d Re"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Domain name is for domain name. <|> Find all files under current directory and set the domain of each file to the name of the current user. <|target|> find Path -type f | xargs -I {} dig Regex Regex {}      "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex        | grep -E -o Regex         | xargs                       | xargs   "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} +  | xargs -I {} chown Regex {}          | tr Regex Regex  "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100 MB and have not been modified in the last 10 days. <|target|> find Path -size +Size -mtime +Timespan -exec ls -l {} \\;    | sed"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for the regex '^#' in those files <|target|> find Path -exec grep Regex {} +  | xargs -I {} grep -E Regex {} "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace every word in the output with the current date and save the file names to the variable 'files' <|target|> find Path -iname Regex -exec sed Program | sed Program | sed"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -type f -atime +Timespan -user Regex -exec ls -l {} \\;       | awk Program                 "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '<file_name>' in their paths <|target|> find Path -regex Regex      | sed Program     "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/username/path/to/files/ directory <|target|> find Path -name Regex -or -name Regex -or -name Regex -or -name Regex -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | grep Regex | cut -d Regex -f Number | xargs -I {} ls -l {}  | sed Program       | grep Regex       | tr Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest file in the current directory. <|target|> find Path -type f -printf '%T@ %p\\n' | sort | uniq -c | sort -n | tail -n Quantity | cut -"
    }
  ],
  "12.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory which have been modified in the last 24 hours <|target|> find Path -mtime Timespan -type f -or -mtime Timespan -exec echo Regex {} +   | x"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                                              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -a -l -r -t {} + | xargs -0 -I {} echo Regex {}   "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user 'warwick' <|target|> find Path -not -user Regex          | sed Program     "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the names of the files that match the pattern '*.js' <|target|> find Path -name Regex -exec sed -i Program {} \\;   | tr Re"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and lines <|target|> find Path -iname Regex         | sed Program            "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest file in the current directory, and last modified is the day before it was last modified. <|target|> find Path -type f -mtime Timespan -exec ls -l -d {} \\; -printf \"%T"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory contains a list of all regular files whose names are \"some_directory\" and which files differ between them. <|target|> find Path -type f -iname Regex -exec echo Regex {} \\;  | tr Regex Regex"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Print the list of all regular files owned by the user with super user privilege <|target|> find Path -type f -user Regex -exec ls -l -r -s {} \\;  | tr Regex Regex   "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names begin with the letters 'Foo' and end with 'Bar' and contain the string 'PENDING' <|target|> find Path -name Regex -prune -or"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -iname Regex -type f -exec mv {} File \\;  -exec cp {} File \\;    | grep Regex                        |"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for use with the Erlang.org command. <|target|> find Path -name Regex   -mtime -Timespan     | awk Program        | xargs -I {} ls -l {}     "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head       -print0  | xargs -0 -n Quantity -I {} -0 tail       {}    | head -n Quantity           "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest toymn shop is in a remote part of the world, and the process of reviving the current user is not in the physical shop. <|source|> Find all files owned by user joe at home in the home directory and below. <|target|> find Path -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files whose names are \"file.ext\" in the current directory tree and print them with line numbers and line numbers <|target|> find Path -name Regex -exec grep -i -n Regex {} + | wc -l    "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} \\;        ( wc -l )     ( echo )    ( echo )"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names under current directory <|target|> find Path -name Regex        | xargs -I {} chmod Permission {}              "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are newer than the file 'Nov' <|target|> find Path -newer File       | xargs -I {} grep -m Quantity -r Regex {}    "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 7 days ago <|target|> find Path -mtime +Timespan -type f -exec rm {} \\;       | xargs -I {} rm {}   "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | cut -d Regex -f Number | xargs -I {} gunzip -c {}     | tr Regex Regex          | grep Regex          | cut -d Regex"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file/directory in their names <|target|> find Path -newer File -print   | xargs -I {} chmod Permission {}            "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} \\;  | tr Regex Regex                           "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and below that are larger than 100 MB. <|target|> find Path -type f -size +Size -exec ls -l {} \\;   | grep Regex         | sort  | awk Program"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'core' (case insensitive) under current directory <|target|> find Path -iname Regex -type f       -print                | xargs -I"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;     -print0  | xargs -0 -I {} chmod Per"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory and its sub-directories that are not owned by the user www-data <|target|> find Path -not -user Regex -type f -printf \"%y %p\\n\"        | sed -e Program"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files in the current directory tree and count them <|target|> find Path -type f -exec ls -l -r -t {} \\;  | wc -l   | awk Program      ( sort -u )   | sort"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                | xargs -I {} chown -R Regex File                              "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and remove them. <|target|> find Path -type f -exec sed -i Program File File \\;   remove             {} rm File \\;             "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex      | sort  | grep Regex       | sed Program              | sed Program   "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec rm {} \\;                    | tr Regex Regex        "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                               | grep Regex                       "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest and most used carmine (Perfume) source of regular use. <|source|> find Path -type f -iname Regex -exec sed -i Program {} \\;  | tr -d Regex       | tr -d Regex Regex "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex      -print  | xargs -I {} grep -i -l Regex {}         | grep Regex                  "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show the last 10 lines of output <|target|> find Path -exec ln -s File {} \\;   | tail -n Quantity   | cut -c Number   | tail -n Quantity    "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long and detailed listing of the current directory, with the sizes and file sizes for all files and folders. <|target|> find Path -type f -exec ls -a -l -S {} \\;  | sort -n | tail - Quantity | cut -f Number | xargs -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the current user <|target|> find Path -not -user Regex -print0 | xargs -0 -I {} gzip -d {}    | grep -E -v Regex "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file/directory 't.txt' <|target|> find Path -newer File -print0 | xargs -0 -I {} mv {} File {}         "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} Regex \\;   | tr Regex Regex           | grep Regex         |"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'document' in the current directory tree <|target|> find Path -name Regex                 | grep -i Regex           "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a row search \"search_result\" for \"search_result\" <|target|> find Path -name Regex -execdir mv {} File \\;     | awk Program      ( )   "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files in the current directory tree and count them <|target|> find Path -type f | xargs -I {} ls -l -d {} | wc -l     | grep Regex     "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of directories from the current directory tree that are not directly under the current working directory and do not search in the sub directories. <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -not -name Regex -exec"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file/directory in the current directory <|target|> find Path! \\( -newer File -or -old File \\) -exec rm {} \\;   "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -perm Permission            | sed Program             | xargs -I {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* This file contains a list of all regular files from the current directory tree, do not search in the sub directories of the current directory. <|target|> find Path -type f -print0 | xargs -0 -I {} sed -i Program {}   "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0 | xargs -0 -I {} echo Regex Regex {}             "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex  | sed Program  | grep Regex  | sed Program         | tr Regex Regex          | cut -d Regex -f Number        |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0  -name Regex -print0         | tr Regex Regex  "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a --exclude Regex File File File         /tmp/src/exclude/ --exclude Regex       /tmp/destination         /tmp/exclude"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the file names <|target|> find Path -name Regex | xargs -I {} echo {}    | awk Program        | sort "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by any user and change their ownership to the current user's. <|target|> find Path -type f -not -iwholename Regex -exec chown Regex"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;     \\;              | awk Program            "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> list of all the files which have been modified in the last 24 hours. <|target|> find Path -mtime -Timespan -type f -exec ls -l {} \\;  | awk Program           |"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the files which match the pattern 'pattern' in their paths <|target|> find Path -name Regex | xargs -I {} grep -i Regex {} |"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* This file contains a list of numbers from 1 to 10 with numeric suffixes of length 2 to 10. <|target|> awk Program Program Program       | sed Program         | tr Regex Re"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0 | xargs -0 -I {} echo Regex Regex Regex {}        "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/user/demo and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} \\; -or -type d -exec ls -l {} \\; "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not executable by all <|target|> find Path -type f! -perm -Permission -print | grep -E -v Regex        "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>in the current directory, print0 is used to handle files with new lines in their names or only spaces in their names <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} echo Regex {}  "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, it is called \"rename\". (This will be expanded to every directory under the current directory.) <|target|> find Path -inum Quantity | sed Program | xargs -I {} rm {}              "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of the most used utilities in the current kernel. <|target|> find Path -name Regex -exec ls -l {} \\; | sort -u  | grep -E -v Regex | xargs -I {} ls -l {}  \\;  |"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -r -f {} \\;     ping -c -i -w Timespan     | grep -E -v Regex        | sed -n Program        "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} \\;                   Regex     "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them <|target|> find Path -exec echo {} \\;   | awk Program  \\;        | sed Program  \\;         File "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not owned by the user \"pete\" and do not have the group \"pete\" in their name <|target|> find Path -not -user Regex -not -group Regex -iname Regex"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use of the user \"pete\" <|target|> find Path -type f -name Regex! -name Regex! -name Regex! -name Regex          | xargs -I {} ls -l -d"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 640 <|target|> find Path -type f -atime Timespan -exec chmod Permission {} \\;              file       "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -newer File! -newer File -exec chmod Permission {} \\;      Print  '' for each file/"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive process that is repeated one minute per line. <|target|> find Path -maxdepth Quantity -name Regex -type f -exec echo Regex \\;  | less                  | xargs"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and sub-directories whose names begin with \"file\" and which contain \"file\" <|target|> find Path -name Regex -execdir rename Regex {}"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null delimiter <|target|> find Path -print0  -null -s -r -e Regex       "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | awk Program File          / ( sort )       ( sort File )        | awk Program         "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -execdir echo Regex {} \\;       ( wc -l ) "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory whose names begin with \"file1\" and whose contents contain the string \"file2\" <|target|> find Path -name Regex -exec grep Regex {}"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all the files in the current directory tree whose names are \"file1\" and list them with the string \"file2\" in their paths <|target|> find Path -name Regex | grep -v Regex | grep -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /dir/to/search/ and change their permissions to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -iname Regex -atime +Timespan -exec bzip2 -f File \\;  -ok rm {} \\;          | tar -c -v -z -f"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sort | uniq -c | sort -r   | tail -n Quantity | cut -f Number  | xargs -I {} sort -k Number  | awk Program      "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> at the end of the line. <|target|> find Path -iname Regex -exec ls -l -d {} \\;  | awk Program        | sort   | uniq "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -iname Regex -type f | wc -l    | sort | uniq  | tr -d Regex   | grep -E -m "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} \\;     | awk Program                 "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all files that are not owned by the user joe. <|target|> find Path -not -user Regex -print0 | xargs -0 -I {} date -r -v -z -c -p Regex {}     "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec basename {} \\;    | tr Regex Regex        | sed Program      "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files in entire file system that are owned by the user 'pete' <|target|> find Path -user Regex -exec rm -r -f {} \\;       | grep Regex      | xargs"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory tree that are not newer than /tmp/file and print them with null character as the delimiter instead of '/\\0' <|target|> find Path -type f -newer File! -newer File -print0 "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r  | head -n Quantity        | xargs -I {} ls -l -S {}           "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} \\;       ( echo )     ( grep -E -i Regex )"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in a single line <|target|> find Path -exec echo Regex {} \\;  | tr Regex Regex         | cut -c Number  | tr Regex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex with inode number $inum and print the output <|target|> find Path -inum Quantity -exec grep Regex {} \\; -exec echo {} \\;     | tr -d Regex Regex         "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Download \"file1\" with null character as a null character <|target|> find Path -type f -print0 | xargs -0 -I {} echo Regex Regex Regex Regex Regex Regex Regex | xargs -0 -I"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current folder which have not been accessed in the last 100 hours <|target|> find Path -type f -atime +Timespan  -exec ls -l {} \\;  | sort  -n -r  | head -"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number and filepath where each one is found <|target|> find Path -type f -exec grep -n Regex {} +   | xargs -I {} file"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and below that are not newer than the file \"file.old\" <|target|> find Path -newer File -and! -newer File      | grep Regex "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files under current directory that are not newer than the file $1 and delete them <|target|> find Path -type f! -newer File -exec rm {} \\;     | sed Program       "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the release of the first 100 lines of the \"Statistics\" file, I have been using \"stats.txt\" to sort the data. <|target|> cat File | sort | uniq | xargs -I {} cat {}     | sed"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} +     | grep Regex             |"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -name Regex -type f -print          | xargs -I {} find Path -name Regex -type f -print                  "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count them <|target|> find Path -type f -exec grep -l Regex {} + | wc -l   | tr Regex Regex | grep -v Regex   "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 10 megabytes in size <|target|> find Path -size +Size           | grep Regex      "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list all the files in the current directory which have fully read and write permission to the user and display the list of files which are present in the sorted order of their permissions <|target|> find Path -perm Permission | sort | uniq -c | sort -n  "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the looks of the calendar, the current month is in the current month. <|target|> find Path -mtime Timespan -daystart -type f -exec ls -l {} \\;       | awk Program       |"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under Folder1 and copy them to Folder2 <|target|> find Path -type f -exec cp {} File \\;    | grep Regex     | tr Regex Regex    | tr Regex "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in sorted order <|target|> find Path -exec dirname {} \\;  | tr Regex Regex        | xargs -I {} dirname {}  "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with nullglob <|target|> find Path -name Regex -exec echo Regex \\;      | tr Regex Regex         "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source/directory/file/file.txt | awk Program        | grep Regex       | sed Program            | grep Regex        | sed Program"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with either of the case insensitive pattern anaconda.* or the case insensitive pattern anaconda.* in their paths under Folder1 and copy them to Folder2. <|target|> find Path -iname Regex -print0"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -name Regex -exec grep -i -n Regex {} \\; -exec grep -i -w Regex {} \\;       | awk Program                   "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex        | sort  | uniq    | xargs -I {} grep -i Regex {}      |"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified between the dates specified in the file \"files.txt\" and \"today\" <|target|> find Path -newermt Regex! -newermt Regex! -newermt Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file/directory's/files' <|target|> find Path! -newer File             "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory which are not readable by all and display the file sizes <|target|> find Path -type f! -perm Permission! -size +Size -exec ls -l {} \\;  |"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File                           | tracelog -c                   "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under Folder1 and below that contain the string 'hasheap' in their names <|target|> find Path -type f -name Regex -exec grep -H Regex {} + | xargs -I {}"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'foo.txt' under current directory tree <|target|> find Path -name Regex -exec compress -b {} \\;  | tee File         | b"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} \\;       ( echo )         "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse sort of search. Search the regular files from the current directory tree for \"foo\" <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\; -exec grep -i Regex {} \\"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -newermt Regex! -newermt Regex       | awk Program    "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex {} \\;  | awk -F Regex Program                    | tr Regex"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -mtime +Timespan -exec chmod Permission {} \\;    | awk Program    "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> may be for the first time or for the first time if they are the same as the current kernel release <|target|> uname -s -n -r | head -n Quantity | tr Regex Regex | x"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for'myfile' in those files/directories <|target|> find Path -name Regex -or -name Regex   "
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec ls -l -d {} \\;   | grep Regex          | cut -d Regex -f Number  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -v Regex | awk Program  is a command for use with the command 'vim' <|target|> echo Regex | xargs -I {} vim {}         "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n|source|target|> find Path -size Size -type f -exec ls -l {} \\; | tr Regex Regex             | tr Regex Regex"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current folder and search for a word in them. <|target|> find Path -type f -exec grep Regex {} \\; -print  | xargs -I {} grep Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for 'expr' in those files <|target|> find Path -name Regex | xargs -I {} grep -i Regex {} "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the three largest files from the current directory tree <|target|> find Path -type f -exec basename {} \\; | sort -n -r | head - Quantity  | awk Program  "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | awk Program  user created files are those that are not created in the current directory. <|target|> find Path -name Regex -prune -or -name Regex -print  | grep -E -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -maxdepth Quantity -type f -name Regex -mmin +Quantity -delete  \\; -type f -exec rm {} \\;   -delete           "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File File         | mv File File                      "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with name 'js' under current directory tree and search for'my regex' in those files <|target|> find Path -name Regex -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the oldest normal file in the current directory. <|target|> find Path -type f -printf \"%T+%p\\n\" | sort -u | head -"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print 'file' for each of them <|target|> find Path -print0 | xargs -0 -I {} file"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -i Regex | cut -d Regex -f Number | xargs -I {} ls -l -d -R {}  | sed Program        | grep"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -v Regex -n -e Regex     | grep -v Regex File      | cut -d Regex -f Number     "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word in two files and display the matched lines along with their count. <|target|> grep -v Regex File | wc -l     | awk Program"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that contain the string '2015' in their pathnames <|target|> find Path -type f -exec grep -i Regex"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex         | tr Regex Regex          | cut -d Regex -f Number      "
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -n -r Regex Regex        | tr Regex Regex      | grep -i Regex        "
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -exec dirname {} \\;    | grep Regex         | cut -d Regex -"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec basename {} \\; -exec ls -l -d {} \\;   | awk Program      "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories named \"file1\" in the current directory tree and print them with null character as the delimiter instead of newline <|target|> find Path -path Regex -print0           "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the year, the current directory tree is named \"dirname\" <|source|> find Path -type f -iname Regex -execdir sort -u {} \\;  | awk Program        | sort -u  | aw"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names under current directory <|target|> find Path -name Regex -print0 | xargs -0 -I {} ls -l {}       | grep Regex     "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of regular files from the current directory whose names do not end in \"*.txt\" <|target|> find Path -type f -not -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the null character as the delimiter <|target|> find Path -print0     -print0      | tr -d Regex          "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep Regex | xargs -I {} cat {}     | xargs -I {} grep Regex {}                           Regex    "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file \"file1.txt\" <|target|> find Path -newer File -print  | xargs -I {} ls -l {}     | sort  | awk"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -type f -exec wc -l {} \\; | awk Program  | xargs -I {} wc -l {}  | sort"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file.ext' under current directory tree <|target|> find Path -name Regex -type d -mtime Timespan       -exec mv {} File \\;  "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec rename Regex {} \\;      ( wc -l )           "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files in and below the home directory that were accessed in the last 30 minutes. <|target|> find Path -amin -Quantity -type f -amin -Quantity      | tr Regex Regex     "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +      | awk Program        "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source| source | grep -a Regex       | grep Regex        | cut -d Regex -f Number       | tr Regex Regex       "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                  | sed Program                         | sh   "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and run the sed script \"s/$1/output\" on them <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -execdir rm {} \\;       "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files whose names end in \"rb\" <|target|> find Path -name Regex -type f  -mtime Timespan   | grep -E -o Regex    | xargs -I {} rm"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter instead of newline <|target|> find Path -print0 -or -print0 | tr -d Regex       "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their owner to the current user. <|target|> find Path -user Regex -exec chown Regex {} \\;        ( chown Regex File )  "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755. <|target|> find Path -perm Permission -exec chmod Permission {} \\;        chmod Permission File     "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0 -print0 -name Regex -exec echo {} \\; -0          "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user whose name is 'n' <|target|> find Path -name Regex -type f -print0 | xargs -0 -I {} file {}  | grep Regex        | tr Regex Regex  "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> ssh -s Regex command                 | ssh -f File                                "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which are not readable by all <|target|> find Path! -name Regex          | sed Program          | grep Regex        "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file' by modification time <|target|> find Path -newer File         | xargs -I {} ls -l -t -r {} "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with at least 644 permission under current directory <|target|> find Path -perm Permission        | xargs -I {} chmod Permission {}          "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under $x directory and take the first field from the list and remove the rest fields <|target|> find Path -type f -print0 | xargs -0 -I {} chmod Permission {}        "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a row. (Sort by most recent) <|target|> find Path -iname Regex | xargs -I {} echo Regex {}  | sort | tail -n Quantity   | sort  | uniq  | awk Program  "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> wc -l $( find Path -name Regex -printf \"%i %n )  | awk Program           | wc -l    | wc       | cut -d Regex -f Number"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>(find all files in the current directory and sub-directories <|target|> find Path -maxdepth Quantity -name Regex -exec echo Regex {} +    | tr Regex Regex     "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | awk Program      is"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them along with their contents. <|target|> find Path -type f -name Regex -exec echo {} \\;  | xargs -I {}"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec echo Regex Regex \\;      | tr Regex Regex Regex          | grep Regex"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all the files in the current directory and do not search in sub-directories. <|target|> find Path -maxdepth Quantity -type f -name Regex        |"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Line 1 lines | tr Regex Regex | grep Regex | cut -d Regex -f Number   | tr Regex Regex                   "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -execdir echo Regex Regex {} \\;             "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and sub-directories. <|target|> find Path -mmin -Quantity     | xargs -I {} ls -l {}        |"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not in the directory tree \"dir1\" <|target|> find Path! Path -type f | grep -E -i Regex | xargs -I {}"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -type f -exec grep -H -n Regex {} + | grep -v Regex      | xargs -I {} grep -H -n Regex {}    "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in each line with the string 'The SAS System' in their name <|target|> find Path -name Regex -exec echo Re"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use with cookies or any other shell that uses cookies in its path. <|target|> find Path -name Regex -exec grep -i Regex {} \\; -and -exec rm -"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;         |"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not owned by the user \"warwick\" <|target|> find Path -not -user Regex -type f -not -name Regex"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec bzip2 -k -v {} \\;  | awk Program   <( zcat Regex ) <( echo Regex )"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than /tmp/file <|target|> find Path -newer File! -newer File       "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all regular files from the current directory tree that were modified in the last 24 hours. <|target|> find Path -type f -mtime Timespan | xargs -I {} ls -"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace every occurrences of \"string1\" with \"string2\" in those files/directories <|target|> find Path -type f -exec"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} \\;   -exec chmod Permission {} \\;       | xargs -I {} chmod Permission {}    "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | cut -d Regex -f Number | tr Regex Regex | grep Regex | cut -d Regex -f Number | tr Regex Regex        |"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest gun shop is in the name of Mount Royal, but it is also home to a number of other gunsmiths. <|target|> find Path -name Regex -type f -exec mv {} File \\;      | grep -E Regex "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -name Regex -exec chmod Permission {} \\;      | cut -d Regex -f Number   | xargs -"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/file and print them along with their timestamps and paths <|target|> find Path -newer File -print  -exec sed -i Program {} \\;  |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the name \"MyCProgram.c\" in the current directory tree and count the number of lines in them <|target|> find Path -name Regex -exec wc -l {} + | wc -l  | grep"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 small files. <|target|> find Path -type f -size +Size -exec ls -l {} \\; | awk Program        | sort  | head - Quantity     | sort -u "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* This is a list of regular files from the current directory tree that are newer than the file Musica. <|target|> find Path -type f -newer File -and -not -newer File | wc -l    | sort | tail -n Quantity | w"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run a single command to their respective directories: \"find Path -execdir mv {} File \\;  \"   | sort  | uniq       | awk Program     "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex            | awk -F Regex Program                              file     "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link in the current directory for each file in the current directory that contains \"foo\" <|target|> find Path -maxdepth Quantity -name Regex -execdir ln -s -f File {} \\;  }   | sed Program    "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory is a shell with built-in support for storing symbolic links. For each file that is modified after the file \"index.html\" is found, it will be pointed to the directory pointed by index number. <|target|> find Path -type f -not -newer File -"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> without clobbering or clobbering the file system, create a symbolic link to file \"/usr/local/bin/test/\" <|target|> ln -s File File           | tr Regex"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of find's regular files, starting with the file proc. <|target|> find Path -type f -exec rm -r -f {} \\;   | rev | cut -d Regex -f Number"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -and -atime +Timespan        | grep Regex         | grep Regex              | awk Program"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Download file \"file\" with zcatal (case insensitive) and search for the pattern \"match\" in each line <|target|> cat File | xargs -I {} grep -i Regex {} File      | xargs -I"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file $newerthan in their full names <|target|> find Path -name Regex! -newerthan -print  | xargs -I"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec echo Regex {} \\;  | awk Program                | tr"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -i Regex Regex     | grep -i Regex     | tr Regex Regex      | tr Regex Regex               "
    }
  ],
  "13.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file_name' by modification time <|target|> find Path -newer File           | grep -m Quantity -r"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r Regex                   | read -p Regex                          "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse \"macs\" style view of the file system, using a depth of 9 to give more detailed information about the process. <|target|> find Path -type f -iname Regex -exec depth -n Quantity -printf \"%n\""
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file 'index.html' <|target|> find Path -name Regex -newer File       | xargs -I {} ls -l"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex Regex Regex \\;     ( wc -l )    <|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 128128 and 128128 bit addressing and print the byte count <|target|> find Path -type f -eth0 | xargs -I {} -0 grep -I {} | awk Program  "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not owned by any user and change their permission to 755 <|target|> find Path -type f -not -user Regex -exec chmod Permission {} \\;  | awk Program"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are in the current directory and do not descend into directories that cannot be opened by all users. <|target|> find Path -type f -maxdepth Quantity -name Regex -exec echo Regex Regex Regex {}"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run them through the ls -l command, one by one. <|target|> find Path -name Regex -exec ls -l {} \\;  | cut -c Number  "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with line numbers and file names <|target|> find Path -nouser | xargs -I {} grep -n -i Regex {}       "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;     | xargs -I {} mv {} File                         "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than $DAYS_TO-SAVE days <|target|> find Path -type f! -newermt Regex! -mtime -Timespan -print0 | xargs -0 -"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -name Regex | head         | tail                                           ping -"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* By default value, the current directory name is used to create directory \"dir1\" <|target|> find Path -type f -execdir rename Regex {} \\;               ssh-keygen -l   to  /"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100 megabytes in size <|target|> find Path -size +Size -size -Size        | grep Regex     | tr Regex Regex   "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>> Find all files/directories under current directory tree unless they are directories <|target|> find Path -name Regex! -type d -print0 | xargs -0 -I {} echo Regex Regex Regex {}         ( echo Regex Re"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents. <|target|> find Path -perm Permission         | xargs -I {} ls -l {}       | awk Program    "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -exec grep -l Regex {} +  | wc -l       | grep Regex  | cut -d Regex -f Number "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file $newerthan and delete them <|target|> find Path -type f -not -newer File -exec rm {} \\;     | xargs -I {} rm"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by group `staff' <|target|> find Path -nouser -not -group Regex       | xargs -I {} gunzip {}      "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line containing the line number <|target|> find Path -perm Permission | xargs -I {} grep -n Regex {}       | xargs -I {} chmod Permission {}   "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user 'Us' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} ls -l -R -t {}          "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'warwick' <|target|> find Path -user Regex -type f -exec dirname {} \\;   | grep Regex           | xargs -I"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose name is \"filename\" and show the last one <|target|> find Path -type f -name Regex -exec basename {} \\; | tail - Quantity   | xargs -I {} ls -l {}      "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names and replace spaces with underscores (.) <|target|> find Path -name Regex -execdir rename Regex {} \\;     | tr Regex Regex           | tr"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex Regex {} \\;    | awk Program                     "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and run the \"file\" command on them. <|target|> find Path -type f -exec file {} +   | grep Regex        | tr Regex Regex     "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File             | sed Program                      ssh                     "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/foo.tmp by modification time <|target|> find Path -newer File -and! -newer File           | grep Regex   "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count how many of them are present <|target|> find Path -name Regex | xargs -I {} ls -l -t -r {} | awk Program         | sort  | uniq"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than $date_time in regards ranging from small to large <|target|> find Path -name Regex -size +Size -print0 | xargs -0 -I {} rm {}     "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                      changed      to Path               Directory            changed "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the last space separated field of each line in \"file\" <|target|> cat File | tr Regex Regex | cut -d Regex -f Number | rev | cut -d Regex -f Number | rev  | uniq   | rev   "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex  -or -name Regex  -or -name Regex                | xargs -I {} grep -i -l Regex {}               "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex Regex \\;     | xargs -I {} ln -s -n {}         "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the files that are owned by user lal and are newer than /tmp/ but not newer than /tmp/ <|target|> find Path -user Regex -newer File -not -user Regex -exec ls -l -t -r -s {} \\;  "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec compress -n -v -R {} +   | awk Program          | awk Program       "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -execdir mv {} File \\;          | awk Program        | xargs -"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path and owner <|target|> find Path -exec ls -l -d {} \\;   | awk Program                ( rev )   "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and lines <|target|> find Path -user Regex -print               apropos  | xargs          "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec ls -l -d -r -t {} \\; | tr -d Regex      | grep Regex         | tr -d Regex    "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print the last entry without the last <|target|> find Path -exec echo Regex \\;  | rev | cut -d Regex -f Number       "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's environment and human-readable data set today show that the world is on the same page with regards to human space usage. <|target|> wc -l       | sed Program          | sed Program "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command \"mkdir\" on each of them <|target|> find Path -name Regex -exec rm -r -f {} \\;       Print  \"m"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f -perm Permission | xargs -I {} chmod Permission {}              "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree to be sorted <|target|> find Path -execdir sort -n -r -g -d Regex  \\;     | sed Program        |"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count how many of them are newer than /firstfile <|target|> find Path -maxdepth Quantity -type f -newer File! -newer File -print0 | xargs -0"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec basename {} \\; | awk Program                   |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run msgs.sh in their process tree to create a symbolic link in the current directory for each file/directory matching the pattern \"file/directory/\". <|target|> find Path -name Re"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v --include Regex --exclude Regex File File                      copy /destination/path/to/exclude        "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -type f -exec awk Program {} + | xargs -I {} wc -l {}      | sort "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory's contents <|target|> find Path -type f -name Regex -exec echo Regex {} \\;         ( nlapse seconds )        "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -r -v -f File {} \\;       cp File                           "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files from the `company' directory tree that were modified within the last 24 hours <|target|> find Path -type f -mtime Timespan -exec echo Regex Regex {} +  | sed Program "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user 'warwick' <|target|> find Path! -user Regex -name Regex         | xargs -I {}"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files found in the current directory tree and below. <|target|> find Path -type f -name Regex -exec echo Regex {} \\;     | sed Program     "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and names <|target|> find Path -print0 | xargs -0         | tr Regex Regex      "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all the files in the current directory tree whose names begin with \"file\" and which contain \"some text\" <|target|> find Path -name Regex -exec awk Program {} \\;   | sort  "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by the user 'warwick' <|target|> find Path -not -user Regex       | xargs -I {} ls -l -R"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word in a file <|target|> find Path | xargs -I {} grep Regex {}        | grep Regex         | grep Regex       "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their owner to \"user\" <|target|> find Path -type f -exec ls -l {} \\;  | awk Program         | xargs -I {} chown Regex {} "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names and replace spaces with underscores (.) <|target|> find Path -name Regex -execdir rename Regex {} \\;        | sed Program         "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}                  delete                    "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex \\;    | tr Regex Regex         | sed Program         | grep"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories named 'document' in maximum 4th of depth (max 3dpi) <|target|> find Path -maxdepth Quantity -name Regex       | awk Program        "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and run the sed script \"someserver\" on each of them <|target|> find Path -type f -exec sed -i Regex {} \\;   | sed -r Program        "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths specified in [file] keeping relative paths. <|target|> find Path -maxdepth Quantity -type d -exec basename {} \\;     | grep -v Regex        |"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are newer than file /tmp/foo and older than file /tmp/foo <|target|> find Path -type f -newer File -and -mtime +Timespan -print  | xargs -I {} ls -"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -not -newer File            | sed Program               | sed"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory that is created automatically by the user with sudo enabled. <|target|> mkdir -p Directory              ( mkdir -p Directory )         ( ls File )   "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -execdir -i Regex {} \\;    | tr Regex Regex "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Find all files/directories under current directory and print the names of their parents <|target|> find Path -exec echo Regex Regex Regex {} +         "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and sub-directories that have not been accessed in the last 30*24 hours. <|target|> find Path -type f -atime +Timespan -print0 | xargs"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print them one by one. <|target|> find Path -type f -exec echo {} Regex {} Regex \\;    | xargs -I {} ch"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and run the file command on each of them. <|target|> find Path -type f -exec file {} \\;   | grep Regex      "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file/directory <|target|> find Path! -newer File              |"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace every occurrences of 'Foo' with 'Foo' in those files/directories invoking 'yes' on each request to make the request to the server."
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -mtime +Timespan -exec bzip2 {} \\;  | xargs -I {} tar -c -z -v -f File {}          | x"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files/directories with the name 'file-to-find' in the entire file system <|target|> find Path -name Regex -type f | sort  | uniq  | xargs -I {}"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and names <|target|> find Path -exec ls -l -r -t -i -S {} \\;  | sort   |"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names under / directory names containing 'jump' or '/home/user/' or '/home/user/demo' directory <|target|> find Path -type f -iname Regex -or -iname"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 megabytes in size excluding files/directories with names like \"mmm-sh\" <|target|> find Path -size +Size -and! -size -Size     | grep"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not newer than /bin/bash and delete them <|target|> find Path -type f -not -newer File! -name Regex -exec rm -f {} \\;     | tr -d"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;   | tr Regex Regex                "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print their names without white space safety <|target|> find Path -print0 | xargs -0 -I {} rm -r -f {}               |"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them one by one. <|target|> find Path -exec echo Regex \\;  | sed Program             | sort   | uniq   "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;   | sort    | less            | tr Regex Regex                "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and file names <|target|> find Path -exec cat {} + | sed Program        | awk Program         | xargs -I {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files in the current directory tree and its subdirectories <|target|> find Path -type f -exec echo Regex {} \\;  | tr -s Regex          | cut -c Number"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long read and show for each page. <|target|> wc -l     | tail -n Quantity    | cut -c Number     | sort  | uniq   | xargs -I {} du -s -h File"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive listing of all regular files from the current directory tree that were modified less than 60 minutes ago. <|target|> find Path -mmin -Quantity -type f -exec ls -l {} \\;   | tr Regex Regex"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Mount a partition with label \"WHITE\" on \"WHITE\" with UUID \"~/mnt/root/cp/mnt/usbdisk\" and convert it to a label with \"WHITE\" <|target|> mount -t rw"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below it, using relative paths to form the output of the find command. <|target|> find Path -type f -print0 | xargs -0 -I {} ls -l {}   "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -mmin -Quantity | xargs -I {} chmod Permission {}           "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 Kilobytes <|target|> find Path -size +Size -print | xargs -I {} cp -i File {}        "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory that contains the directory containing the current script. <|target|> find Path -type d -path Regex -exec cp {} File \\;    | sed Program             "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'file.old' <|target|> find Path -name Regex -newer File       | grep -v Regex "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -exec grep Regex {} \\;                 search  `/path/to/directory'                search"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory and take the first two entries as the first argument to the script's script. <|target|> find Path -name Regex -exec grep Regex {} \\;    then search for"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -group Regex -exec echo Regex \\;  | tr Regex Regex            "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them twice in one row <|target|> find Path -inum Quantity | xargs -I {} ls -l {}    | awk Program       | sort  "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files whose names are not \"filename\" <|target|> find Path -maxdepth Quantity -type f -not -iname Regex! -mtime Timespan     | grep -E -v Regex      |"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed command \"sprintf '%h/%f' on each of them <|target|> find Path -exec sed -n Program {} \\;    | sed -n Program  "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of three columns of text file \"file.txt\" that is opened in the shell. <|target|> cat File | xargs -I {} ls -l {} | awk Program        | tail - Quantity  "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -exec echo Regex \\;    | xargs       | xargs      "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -name Regex -exec chmod Permission {} \\;      | sed Program        | grep Regex"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by user'mine' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} mv {} File         "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -print0 | xargs -0 -I {} grep -i -w -m Regex {}      | sort      | awk Program           | xargs    "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second-to-last column in the current directory's output <|target|> find Path -type f -name Regex -exec sed -i Program {} \\;  | awk Program         | sed -i Program   "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files/directories under /etc directory that have been modified in the last 180 min (daystart = 30 day) <|target|> find Path -mmin -Quantity -daystart -type f       | tr Regex Regex "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the latest version of the kernel's standard release, with descriptions of release and version, and page interactively display the last entry. <|target|> find Path -stable -regex Regex | xargs -I {} ls -"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and assign them to the variable \"ane_store\" <|target|> find Path -maxdepth Quantity -name Regex -exec echo Regex Regex \\;    | tr -d Regex "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File                                                 "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files in the current directory tree that are newer than the file 'Nov' and older than 'Nov' by modification time. <|target|> find Path -name Regex -newer File -and -not -new"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory that are owned by group `accounts' <|target|> find Path -group Regex -exec compress -v -t Directory {} \\;       | awk Program"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long time series of numbers from 1 to 10 followed by the number one. <|target|> yes | awk Program | xargs -I {} date '+' | awk Program     | sort | uniq | xargs"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec cat {} \\;  | grep -E -v Regex          "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -newer File! -name Regex            | xargs -I {} ls -l -t -r {}          "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Find all files under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | awk Program          "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which are not modified in the last 24 hours <|target|> find Path -mtime Timespan -type f! -mtime Timespan        | grep Regex     "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> map all files in the current directory to be sorted in reverse order. <|target|> find Path -type f -exec ls -l {} \\; | tr Regex Regex         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than /tmp/test/24 and do not have the same name as /tmp/test/25 <|target|> find Path -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find the \"CVS\" directory a bit older than ordinary users expect, and the directory name itself is not unique. <|source|> find Path -type d -regep Regex! -regex Re"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files under current directory and print the names of the files they are in. <|target|> find Path -type f -execdir echo Regex Regex Regex {} \\;   | tr -s Re"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -size +Size -exec ls -l -s {} \\;  | awk Program         | sed Program          "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Mount partition with /tmp/dir and remove it. <|target|> mount -t partition -i Regex Regex           | tr Regex Regex     "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the file paths they are in <|target|> find Path -exec echo Regex {} Regex \\;    | xargs -I"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print the output to console and file \"/tmp/test\" <|target|> find Path -exec echo Regex Regex Regex {} +   | tee File  "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex                     | x"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -mtime +Timespan -delete  -type f -delete              | xargs -r -"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -t Directory File                   /root/file              "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number and file name <|target|> find Path -name Regex -print0 | xargs -0 -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -name Regex | wc -l    "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex {} \\;      | x"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all files under current directory and print them. <|target|> find Path -type f | sed Program        | tr Regex Regex     "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which have been modified in the last 24 hours and show the last 4 lines <|target|> find Path -type f -mtime -Timespan | xargs"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that contain \"some text\" <|target|> find Path -name Regex -exec grep -l Regex {} + | w"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | xargs -I {} dirname {}       | xargs -I {} dirname {}         | awk"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} +     "
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec grep -i Regex {} \\;    | tee >( wc )        | tr Regex Re"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Your home directory, the directory where files are created, and which is where the files are accessed. <|target|> find Path -name Regex -or -type f -exec dirname {} \\;  | awk Program       | xargs -I {}"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading leader in the field of spaceflight, with a long list of top-level files and its unique file systems. <|source|> find Path -type f -name Regex -execdir ls -s {} \\;  | grep Regex | cut -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of their parent directories <|target|> find Path -path Regex -printf '%h\\n'        | sed Program        "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -execdir echo Regex \\; -prune      | sort | uniq   | wc  "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines. <|target|> find Path -type f -ls | xargs -I {} wc -l {}     | sort  | tail -n Quantity    | grep -"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting file-hosting file, SGID=eth0, is in dire need of a cure. <|target|> ssh -i Regex Regex command          | sed Program        "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex | xargs -I {} echo Regex {}        | xargs -I {} echo Regex     "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep -v Regex | grep -E Regex       | xargs -I {} grep -n Regex {}          | xargs                "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/master <|target|> find Path -not -newer File             | sort   | xargs -I"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory tree that are newer than Pat's by modification time <|target|> find Path -newer File -type f -and -newer File -type f -and! -newer File       "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a line-up of the latest in a series of smaller files. <|target|> find Path -type f -mtime Timespan -exec mv {} File \\;   | sort | tail -n Quantity    | cut"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last 10 lines of the output <|target|> find Path -exec echo Regex Regex Regex Regex Regex | rev | cut -d Regex -f Number | rev"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -exec dirname {} Path             | tr Regex Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E -v Regex -r -m Quantity | awk Program       (  )      | sed Program             | sed Program       "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of regular files from the current directory tree <|target|> find Path -type f -exec echo {} \\;   | tr -c -d Regex              "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                /usr/bin/my-editor/          /usr/bin/share/my-editor      "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list files in the current directory and remove them <|target|> find Path -type f -empty -execdir rm -r -f {} \\;     | xargs -I {} rm -f {}         "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'Nov' <|target|> find Path! -newer File -and! -older File       | grep Regex  "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you sure you wish to continue? (Y/N)? [Y/N] <|source|> Print \"yes\" to the console and append to \"file\" <|target|> yes Regex | tee -a File    "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are less than 50 kB in size <|target|> find Path -type f -size -Size -print     | xargs -I {} ls -l -S -h {} "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 100 megabytes and do not have 501 permission. <|target|> find Path -type f -name Regex -size +Size -perm Permission -exec ls -l {} \\;   | grep"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the first line of every line in \"infile\" prefixed by number of occurrences <|target|> grep -P Regex File | cut -f Number      | tr Regex     | tr Regex   "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by the user'me' <|target|> find Path -nouser -user Regex -print       | grep Regex        |"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( master Regex )          | ssh Regex                        | ssh               "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory that contains the \"oracle\" executable. <|source|> find Path -type d -name Regex -execdir touch -s {} \\;  | awk -F Regex Program           | x"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not readable by all <|target|> find Path -type f! -perm Permission   | xargs -I {} chmod Permission {}           "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -maxdepth Quantity -not -iwholename Regex          | grep Regex        | tr Regex Re"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $x directory and write their contents to $HOME/tmp/daily/ <|target|> find Path -exec chmod Permission {} \\;       execute rm File \\;     "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and lines <|target|> find Path -type f -exec sed -i Program {} \\;   | tr -d Regex            | tr Regex"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> wc $( ls -1 File | awk Program )          | awk Program            | sort | uniq  | wc           | sort  |"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, the current shell has been used to handle files with a size greater than 10 megabytes. <|target|> find Path -size +Size -size -Size -exec ls -l -h -s File"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Search for all files with either hot or cold and replace the word \"nb\" with \"n\" in the output <|target|> find Path -type f -exec sed -i Program {} \\; | tr Regex Regex "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex  \"*console output\" | grep Regex  \"*console output\"    | grep Regex  \"*console output\"   | tr Regex Regex       | cut"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec ls -l -s {} \\;    | grep Regex        | tr Regex Regex       | cut -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace every word with \".\" <|target|> find Path -name Regex -type f -mtime Timespan  +  | sed -r Program    "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -name Regex -exec echo Regex Regex Regex Regex Regex \\;      | grep Regex              "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree whose names begin with \"file\" and delete them <|target|> find Path -name Regex -exec rm -r -f {} \\;   | xargs -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -mmin -Quantity | xargs -I {} chmod Permission {}     "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history no one has been more than a user in the history line. <|source|> find Path -type f -user Regex -exec ls -l -r -t {} \\;   | awk"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -type f -name Regex -exec grep -H -n Regex {} \\;      | grep -E -v Regex         | tr Regex Regex "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all regular files in the current directory tree and its subdirectories. <|target|> find Path -type f -exec basename {} \\;   | grep Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the first time specified on standard input and for the first time to the console, which is the first time specified on the command line. <|target|> find Path -name Regex -type f -"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -mount -name Regex -type f   | sed Program      | awk Program           | tr Regex Regex"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 10 megabytes and print their sizes in descending order of size <|target|> find Path -type f -size +Size -exec ls -l"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the paths that contain the directory name of the directory itself. <|target|> find Path -name Regex | xargs -I {}"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -maxdepth Quantity -exec chmod Permission {} \\;     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -perm Permission -exec chmod Permission {} \\;    "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and search for the word \"CVS\" in each one. <|source|> find Path -exec grep -i Regex -l Regex {} \\;   | tr"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> chmod Permission $( find Path Path Path )                     set -x   -ok chmod Permission Permission   "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -group Regex -exec basename {} \\;   | sed Program   "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100MB and print their sizes in descending order of size <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program    "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;      | tr -s Regex         | sed Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -name Regex -exec sed -i Program {} \\;  | sed -e Program               | sed"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /tmp/ directory and show the last entry of the series <|target|> find Path -name Regex | xargs -I {} gunzip -v -t {} | awk Program        | sed"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under Folder1 and copy them to Folder2 <|target|> find Path -type f -exec cp -a {} File +    | sed Program           | xargs -I {} echo Regex Re"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's first 100 words are to be read from the current directory and append to the directory in the current user's home directory. <|target|> find Path -maxdepth Quantity -type f -exec echo Regex \\; | wc -l      | tr -d"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, Emacs has been used as the shell store for Emacs. <|target|> shopt | xargs -I {} echo Regex Regex Regex Regex Regex Regex                  "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype sed -regex Regex          | xargs -I {} file {}           {}              {}      "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files in the current directory and which are larger than 100MB. <|target|> find Path -size +Size -exec ls -l -s {} \\;  | awk Program       | xargs -I {} chown"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory tree that match pattern \"dirname{}/sr*sc\" <|target|> find Path -path Regex -type d -execdir rename Regex {} \\;     then find Path -type"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory tree that are less than 100MB in size <|target|> find Path -size -Size -print | xargs -I {} ls -l -S -h -s -t {} | awk Program "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/foo and print their sizes and names <|target|> find Path -name Regex -type f -printf \"%s %p\\n\""
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan -user Regex        | grep Regex          | awk Program              "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below that are newer than the file/directory 'file.tar.gz' <|target|> find Path -newer File          | grep Re"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under Folder1 which are not newer than the $newest_file_at (don't ask for user confirmation) and not already exist and delete them <|target|> find Path -type f! -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that are not owned by a user. <|target|> find Path -type f -user Regex! -user Regex      | grep -v Regex  "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories which have not been accessed in the last 30*24 hours and which are larger than 20 megabytes in size. <|target|> find Path -atime +Timespan -size +Size -"
    }
  ],
  "14.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file contains a list of all the files/directories under current directory, displaying only the paths to files/directories. Note that the output of this file may differ between different directories. <|target|> find Path -depth -print | grep -v Re"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex           -p Regex          Regex             | read -r -p Regex "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of information for the environment. <|source|> Find all files/directories under current directory and run the sed script command on each of them. <|target|> find Path -exec sed -n Program File \\; "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex 'pattern' in their contents <|target|> find Path -maxdepth Quantity -type f -print0 | xargs -0 -I {} grep -l"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0  | tr Regex Regex      | tr Regex Regex   "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run [whatever they are] with the file path as the argument <|target|> find Path -name Regex -exec grep -H Regex {} \\;    | grep Re"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are not owned by any user. <|target|> find Path -type f -not -user Regex -exec ls -l {} \\; | awk -F Regex Program        |"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThe list of the current directory's subdirectories is a long listing of the subdirectories of the current directory. <|target|> find Path -type d -exec ls -l -d {} + | sed Program       | x"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are owned by user \"joebob\" and are newer than \"file\" by modification time <|target|> find Path -newer File -user Regex -type f -printf \"%h\\n\" | sort -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number of lines <|target|> find Path -exec grep -n Regex {} + | wc -l      | tr -d Regex   "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;        move  folder   to  /new  location    (  )         move  folder    "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file/directory in their paths <|target|> find Path -newer File        | xargs -I {} cp File {}         "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail      | head         | tail            | more              file      "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than some_file <|target|> find Path -type f! -newer File       | grep -v Regex     | grep -v Regex  "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under $DIR directory tree that have been modified in the last 24 hours and list them with confirmation <|target|> find Path -mtime -Timespan -exec ls -l {} \\; | sed Program       "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     then print the list of the directories that contain the file or directory name <|target|"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with UED or SGID bit set <|target|> find Path -perm Permission -perm Permission      | grep -E -v Regex      | head -n Quantity     "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'Nov' by modification time <|target|> find Path -newer File -print  | grep Regex        | xargs -I {} cp File {} "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file $newerthan and print the timestamp in YmdHMS format <|target|> find Path -type f -name Regex -mtime Timespan -exec echo Regex \\; -print"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nDownload \"file.txt\" and view the output by paging through a screen filled with the current user's terminal appended to the screen. <|target|> cat File | sed Program | | less    | more     | less     | sed Program "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose permissions are 644 and show the number of lines for each file <|target|> find Path -type f -perm Permission | xargs -I {} chmod Permission {}      | awk Program   "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'file-pattern' in their paths and take the first one found. <|target|> find Path -regextype posix-egrep -regex Regex | xargs -I {} grep -l"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command provided with every command that is run every minute. <|target|> find Path -type f | xargs -I {} cp -i File {}      | awk Program       "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' in the entire filesystem <|target|> find Path -name Regex -print   | xargs -I {} ls -l {}     | tail - Quantity            |"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;         wc -l            user    "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that were modified more than 360 minutes ago <|target|> find Path -mmin +Quantity -type f -exec ls -l {} \\;  then  remove  and count them  and their sub-directories <|target|>"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex | xargs -I {} echo Regex {}         | tr Regex Regex           | grep"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File             /data/usr/bin/mongodb          /data/usr/bin/local/mongodb         /data/usr/bin/"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} +  ( )     | awk -F Regex Program         | sed Program "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'warwick' <|target|> find Path -user Regex -print0 | xargs -0 -I {} ls -l {}       | awk Program      "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are larger than 100 megabytes in size <|target|> find Path -size +Size -and \\(! -size -Size -and! -size \\)            |"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                 | grep Regex                | xargs   -I {} grep Regex {}          "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their sizes <|target|> find Path -exec ls -l -d -S File File | awk Program     ( sort -n )  | sort -n      | cut"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex   -print   | grep Regex                | xargs -I {} grep -i Regex {}            {}   "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' in the current directory tree and list them with confirmation prompt <|target|> find Path -name Regex -exec ls -l -d {} \\;       | awk Program      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Image: image by jsmith <|source|> find Path -type f -exec file -i {} \\; | sed Program   | grep Regex     | cut -d Regex -f Number     | tr Regex Regex       | sed"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec gzip -9  {} | tr -s Regex Regex       | xargs -0 -I {} cat {} | xargs -0 -I"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%s %p\\n\" | awk Program        | sed Program          "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a column with a different name pattern each. <|target|> echo Regex | awk Program    | sed Program      | tr Regex Regex           | sort | uniq | xargs -I {}"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not in the path \"./tools/bin/ls\" <|target|> find Path -not -path Regex       | xargs -I {} ls -l {}       "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     | tr Regex Regex     "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory matching the regex '<script type>\\*' in their paths <|target|> find Path -type f | grep Regex | sed Program | xargs -I {} find {} -type f -"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -not -user Regex      | tr Regex Regex     "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files from the current directory tree that are owned by user \"user1\" and are newer than any file in the current directory by at least 1 day (day starts with a number of weeks since the beginning of the week) <"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;       then remove them  = rm -r -f {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each one. <|target|> find Path -exec sed -i Program {} \\;     Print  \"file\"         "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by any user <|target|> find Path -type f! -user Regex -print0 | xargs -0 -I {} dirname {}     | sed"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are not newer than $date in their names <|target|> find Path -newer File    | grep Regex     | sed Program     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for the regex're' in those files and show the matched lines with the string \"RELEASES\" <|target|> find Path -exec grep -E Regex {} \\; |"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -a -v -e File File File          | cpio -p -d -u Regex             | tr Regex Regex      "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files that are not owned by any user, using a literal'sudo' command to find and print them. <|target|> find Path -type f -not -uid Regex -print0 | xargs -0 -I"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Finds all files that fully match the regex '\\.\\..*authors' in their paths and prints their names. <|target|> find Path -type f | sed Program | xargs -I {} grep -l Regex -i"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex | tar -c -v -f File File            | xargs -I {} tar -c -v -f File {}            "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure that the current directory is empty? (case insensitive) <|target|> find Path -maxdepth Quantity -type f -exec echo Regex Regex Regex {} + Path    | xargs -I {} cp -i File {} "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -l -s -h {} \\; | awk Program        "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the \"find command\" command on each of them. <|target|> find Path -not \\( -name Regex -or -name Regex \\) -print    \""
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, the word \"filename\" has been used to describe all files/directories with spaces in their names. <|target|> find Path -name Regex -print0         | tr -d Regex"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and times <|target|> find Path -exec basename {} \\; | tr Regex Regex        | sort  | awk Program "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use of the user with X11 forwarding disabled. <|target|> find Path -type f -iname Regex -exec echo Regex {} \\;     ( sed Program File ) ?  where  is"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and parent directory names <|target|> find Path | xargs -I {} dirname {}  | xargs -I {} dirname {}       "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by any user <|target|> find Path -nouser -exec ls -l {} \\;  | sed Program            | grep Regex  "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and lines <|target|> find Path -exec echo Regex Regex Regex Regex Regex \\;   | sed Program             | sed -"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -type f -iname Regex -print0 | xargs -0 -I {} rm -r -f {}            | xargs -I {} rm -f {}              "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -exec chmod Permission {} \\;     then print the output to the console <|target|> find Path -type f -exec echo Regex"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' under current directory tree <|target|> find Path -name Regex -exec awk Program {} \\;       then search for the first match of the regex 'file' and delete it. <"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, every user has the right to have their full and unique path expanded by the number of occurrences of \"needle\" in their file information. <|target|> find Path -type f -exec grep -F Regex {} + | sed -e Program | xargs -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} +    ( chmod Permission )  | grep Regex       ( find Path -exec sed -"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were accessed at least 7 days ago <|target|> find Path -atime +Timespan          | grep Regex         | xargs -I"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are greater than 100000 bytes in size <|target|> find Path -type f -size +Size -print0 | xargs -0 -I {} ls -l -d {} | awk Program    "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex        | xargs  | grep Regex        | xargs   | sort    | uniq  "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f | xargs -I {} chmod Permission {}      | tr Regex"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex | xargs -I {} echo Regex {}        | awk"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Perform a dry run to save the day of the week of the first day of a current month (Oct. 24) to the variable 'Oct' <|target|> find Path -daystart -mtime +Timespan -daystart"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 775 <|target|> find Path -exec chmod Permission {} \\;       chmod Permission File "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are two or more directories in the current directory. <|target|> find Path -type d -name Regex -prune -or -type f -print0 | xargs -0 -I {} echo Regex Regex Re"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 'Nov.1' by modification time <|target|> find Path -type f! -newer File -print0 | xargs"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Moves all files under current directory with name \"trc\" in the path. <|target|> find Path -execdir Regex Regex {} Path Path     | xargs -I {} mv File  "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -mtime +Timespan -exec bzip2 -z -v {} \\;  | xargs -I {} tar -c -v -f File {}         "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (finds the regex ^_^_] and redirects it to the console via the host name. <|target|> find Path -regextype posix-egrep -regex Regex -type f -exec"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match pattern \"file_name\" and save the first line to history list <|target|> find Path -name Regex | xargs -I {} ls"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 'Apr' (version 1.2) and do not contain 'other' (version 1.3) <|target|> find Path -type f! -newer File    "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than some_file <|target|> find Path -mmin -Quantity -newer File       | grep Regex         | xargs -"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file $newerthan and delete them <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} echo Regex Regex {} | x"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline as the delimiter <|target|> find Path -print0 | xargs -0 -I {} echo Regex {}       | tr Regex Regex   "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified within the last day <|target|> find Path -mtime -Timespan -print0 | xargs -0 -I {} rm -r -f {}         "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory tree that match the regex '<script> find Path -regex Regex     <|target|> find Path -regex Regex       | grep Regex      "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -S -h {} \\; | sort -r -n            | head               | sort     "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents. <|target|> find Path -exec cat {} \\; | wc -l    | sed Program       | grep Regex      | sort "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' under current directory tree and show the path by treating all paths as text separated by one or more whitespace <|target|> find Path -name Regex -exec sed -i Program {} \\;  | tr -"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are less than 50MB in size <|target|> find Path -size -Size -print | xargs -I {} ls -l {}   | awk -F Regex Program     "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified within the last day <|target|> find Path -mmin -Quantity -type f -mtime -Timespan  | xargs -I {} ls -l {} "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file \"file\" that is not in the path \"file\" <|target|> find Path -path Regex -type f -printf '%p\\n' | sort -n | head -n Quantity | cut -d"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> file1 and file2 contain the first line of their respective paths, and the last line of their respective names. <|target|> find Path -type f -exec sed -i Program File File File {} + | sed -i Program File File    "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting host, Regex, has been changed from a domain name to a private key. <|target|> dig Regex Regex      | grep Regex | cut -d Regex -f Number   "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 640 <|target|> chmod Permission File           | tr Regex Regex        | sed"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and targets <|target|> find Path -exec echo Regex -exec bash -c Regex {} +      | tr Regex Regex   "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and view their contents using the more command <|target|> find Path -exec more File | xargs -I {} cat {} | less         | sed Program "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -print0 | xargs -0 -I {} find Path {}         -type d      -name Regex           -print0   "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed script 'n;s/(.*)', replacing's with newlines;', and finally remove the first two lines <|target|> find Path -name Regex -exec"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are owned by user 'Username' under '/home/user/' directory tree without traversing the filesystem to other devices/directories <|target|> find Path -path Regex -prune -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A number of environmental groups have been working to end the current regime of human-computer interaction, with the current limit of 3,000 characters per second. <|target|> find Path -type f -exec ls -l -s {} \\; | awk Program    "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -maxdepth Quantity -mmin Quantity | xargs -I {} echo Regex Regex {}         | sed Program  "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and count their number of lines. <|target|> find Path -type f -exec wc -l {} + | wc -l   | sort -n | tail - Quantity | cut -f Number |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that contain 'foo' in their names <|target|> find Path -name Regex -execdir rename Regex {} \\;    | awk -F Regex Program     "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number of lines <|target|> find Path -exec grep -n Regex {} +  | wc -l     | tail - Quantity | cut -d Regex -f Number"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to be replaced with a regular file. <|target|> find Path -type f -exec sed -i Program {} +   | sed -i Program       | xargs -I {} rm -f {}         | x"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} +    | xargs -I {} mv {} File       {}   "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -m Quantity -r Regex {} \\;     | xargs -I {} file {}      | awk Program               | x"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f -exec read {} \\;  | tr Regex Regex      | grep Regex        | tr"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents. <|target|> find Path -exec cat {} \\; | sed Program         | grep -E -v Regex        "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has a long history of using force to force the other to quit. <|source|> Force the other to quit <|target|> find Path -type f -exec sed Program -i Program -exec sed Program -i Program -e Program -e"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and change their ownership to the current user <|target|> find Path -exec chown Regex {} \\;       | sed Program     "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File           | xargs -I {} -P Quantity -r          syscall         executed       "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files that are fully accessible by group or other <|target|> find Path -perm Permission        | grep Regex      | grep Regex     | cut"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -print0 | tee File       | tee File   "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's user folder that start with \"file1\" and end with \"file2\" and have been modified in the last 10 minutes. <|target|> find Path -type f -name Regex -m"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -print0 | xargs -0 -I {} wc -l {}   | tail -n Quantity | grep -v Re"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file/directory/ to the user's home directory <|target|> find Path -newer File -and! -newer File      "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified more than 30 min ago. <|target|> find Path -type f -mmin +Quantity | xargs -I {} ls -l -t -r File {}  |"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> The first line of output of the ls command is the line containing the ls command, and the second line of output is the contents of the ls command. <|target|> ls | grep Regex | tail -n Quantity | xargs -I {} ls -"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files and directories in the current directory and its subdirectories. <|target|> find Path -type f -exec ls -l {} \\;  | awk -F Regex Program"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, Emacs uses a \"rename\" character name for all its *.xml files. <|target|> find Path -type f -name Regex -exec rename Regex {} \\;   | grep Regex"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the current directory of each file that does not exist in the current directory. <|target|> find Path -maxdepth Quantity -not -name Regex -not -name Regex -not -name Regex -print"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -exec basename {} \\;     | wc -l   "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not in the directory tree \"/path/to/dir\" <|target|> find Path -type f -not -path Regex -and -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a pattern <|target|> find Path -name Regex -exec grep Regex {} + | xargs -I {} grep -i Regex {}        | grep Regex "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} +    ( chmod Permission )   "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all the files in the current directory and its subdirectories that contain text \"documentclass\" <|target|> find Path -name Regex -exec grep Regex {} + | xargs -I {} mv {}"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question that is found in all the files that are modified in the last 180 minutes. <|target|> find Path -mmin -Quantity -type f -exec grep -i Regex {} \\; "
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f -name Regex -mmin +Quantity -delete  -type f -exec rm {} \\;    | grep Regex     "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File           Path    | grep Regex       Path    | xargs -r -0 -I {}"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to delete all the files in the current directory which have not been accessed in the last 30 days. <|target|> find Path -atime +Timespan -type f -exec ls -l {}"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, every command in history has been executed on host. <|target|> history | awk Program                "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that have been modified in the last 30 minibills <|target|> find Path -mmin -Quantity -print | x"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word in all the files in the current directory and display the number of lines in the file. <|target|> find Path | grep -i Regex | xargs -I {}"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default value, defined as the current date in absolute format, and without any containing directories. <|target|> find Path -type d -name Regex -exec grep -H -n Regex"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep -l Regex {} + | awk Program          | grep -E -v Regex "
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the current directory name with relative paths <|target|> echo Regex | sed Program    | tr Regex Regex             | tr"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} +    ( chmod"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Find all files/directories under current directory and print the pathnames of the files before and following their parent paths <|target|> find Path -exec grep -i Re"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the year, the current directory tree is the one that matches the current user's home directory name. <|target|> find Path -name Regex -type f -exec basename {} \\;      | awk Program      "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned fully admin by the user and group their parents <|target|> find Path -user Regex -perm -Permission -print        | grep Regex     "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than lib/B <|target|> find Path -newer File      -print    | grep Regex       | sed Program    "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive process, take a file path from standard input and output the result to the screen. It is a bit more verbose than the file 'file.log' and uses it to nicely display the differences between files. <|target|> find Path -type f -exec"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -print0 | xargs -0 -I {} ln -s {}   | grep Regex        | grep -v Regex"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top gunsmith, Gunnar, has been named by the gun-toter in several cases. <|source|> find Path -type f -exec sed -i Program File {} +  | sed -i Program File | xargs -I {} rm -f {}  "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/Maildir/.SPAM/bin/ and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +     | xargs -I"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep -v Regex | xargs -I {} cat {} | grep -v Regex | xargs -I {} echo Regex {}                            "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and change their permission to 644 <|target|> find Path -type f -print0 | xargs -0 -I {} chmod Permission {}         | awk Program"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory that are not newer than the file/directory \"file\" <|target|> find Path! -newer File      | xargs -I {} find Path -type f -not -newer"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -type f -exec wc -l {} +  | tail -n Quantity   | tr Regex Regex | xargs -0"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} +   | sed -n Program        | xargs -I {}"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than $DAYS_TO_SAVE days and show only the oldest and newest file/directory <|target|> find Path -type f -mtime Timespan -exec ls"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     | sed Program      | grep Regex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories in the current directory tree that are not owned by the user 'pete' <|target|> find Path -not -user Regex -not -name Regex      | sed Program "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                  /usr/share/my-editor/bin/my-editor-executable           /usr/share/"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -execdir chmod Permission {} \\;   | tr Regex Regex       "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory tree that were modified more than 366 weeks ago <|target|> find Path -mtime +Timespan -type f  -print   | xargs -I {} ls -l -l {} "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> may be the only logical use of the current directory for the current user. <|source|> find Path -maxdepth Quantity -type d | sed Program | sort | uniq | xargs -I {} ls -1 -t -r File {}    |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/Desktop/ that match the pattern '\\./tmp/file_name' in their contents <|target|> find Path -name Regex -exec grep -i -l Regex {}"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that start with 'js' in their names <|target|> find Path -name Regex -or -name Regex -exec rm {} \\;     | grep Regex    |"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that contain \"string\" in their contents <|target|> find Path -exec grep -l Regex {} +  | tr Regex Regex      | sed Program      "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of their parent directories <|target|> find Path -type f -exec dirname {} \\;  | tr Regex Regex         | tr Regex"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( master -n )   Regex             ( interactive )      kill $( nginx )          Regex             to"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex {} \\;   | tr -print        | sed Program      "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and print their sizes <|target|> find Path -size +Size -exec ls -l -h {} \\;  | awk Program    for File   "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not newer than /tmp/foo and delete them <|target|> find Path -type f! -newer File -print0 | xargs -0 -I {} rm -r -f {}   "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number of lines with or without the name of the file <|target|> find Path -print0 | xargs -0 -I {} wc -l {}       "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their times. <|target|> find Path -exec ls -l File {} \\;  | sed -n Program         | sed -n Program  "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -exec wc -w {} +   | awk Program              | wc             | wc        "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> is a temporary file that is opened by user's terminal or by other users. <|target|> find Path -name Regex -exec echo Regex Regex Regex {} \\;     | tr Regex Regex"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their contents <|target|> find Path -exec echo Regex {} \\; | xargs -I {} echo Regex {} ; "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their names <|target|> find Path -type f | xargs -I {} dirname {} | awk Program     "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that have not been accessed in the last 30 minitues. <|target|> find Path -type f -atime +Timespan -exec ls -l {} +"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex Regex      | grep Regex         | grep Regex        | tr Regex Regex        | tr"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This will be replaced by the current date in the output of the date in variable \"month\" <|target|> date +\"%Y-%m-%d\"    = DateTime DateTime <( cal DateTime"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link named \"latest\" to the current directory, displaying progress and size of files. <|target|> ln -s $( readlink File ) Regex Regex         "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | sed Program | grep Regex | sed Program | tr Regex Regex      | tr -d Regex           | xargs -I"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default disables all 'js' (case insensitive) files. <|source|> find Path -type f -exec grep -i Regex {} +  | grep Regex   | cut -d Regex -f Number"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;      | grep -E -v Regex          | xargs -I {} grep -n"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files that are newer than 'bin' by modification time or modified more than 'bin' by modification time. <|target|> find Path -newer File -or -newer File"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the top 10 largest files in the current directory tree, sorted from most to smallest. <|target|> find Path -type f -exec ls -s {} + | sort -n | aw"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path to which each one is named. <|target|> find Path -name Regex | xargs -I {} dirname {} "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To create a symbolic link without dereferencing the current directory, use the ln command with the environment variable \"ifconfig\" instead of the default. <|target|> find Path -name Regex -exec l"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -type f -exec bzip2 -z -c File {} \\; "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -nouser -okdir -i sed Program {} \\; "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, the directory of a process with id \"48\" in the PATH variable. <|target|> kill - Regex Regex       (displays the parent process of a process with id"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | awk -F Regex Program | sort | uniq -c  | grep -E -v Regex | cut -d Regex -f Number | tr Regex Regex | tr Regex Regex "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path -type f | xargs -I {} chmod Permission {}          | xargs -I {} bit          |"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace every occurrences of \"string1\" with \"string2\" in those files <|target|> find Path -print0 | xargs -0"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +  | sed Program         | tr Regex Regex    "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 MB and have not been accessed in the last 10 minitues <|target|> find Path -size +Size -atime +Timespan -exec ls -l {} \\;  | aw"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that start with 'file' and end with 'file2' in their names without descending into directories that start with 'file2' and end with 'file1' in their names <|target|> find Path -name"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that fully match the regex 'fileNameHere' in their contents <|target|> find Path -name Regex | xargs -I {} grep Regex {}      | xargs -I {} tar"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count the number of lines in them. <|target|> find Path -type f -size +Size -exec wc -l {} \\; | awk Program         | sort  | awk"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -type f -exec echo Regex {} +  | wc -l  | grep -E -v Regex     "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command given with minmax=level (1) at the beginning of each directory path <|target|> find Path -maxdepth Quantity -type f | xargs -I {} ls -l {}   "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype posix-egrep -regex Regex  \\;     | tr Regex Regex           | grep Regex                 "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Error Message | grep Regex      | grep -E -v Regex       | awk Program       | tr Regex Regex         | tr Regex Regex      "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a target of controversy for its use in the environment. <|source|> Find all files/directories named 'File' under current directory tree and show the path names of the files/directories that match with the pattern 'FileName.~' in their paths <|"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each of them <|target|> find Path -size +Size -exec ls -l {} \\; | awk Program        "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' under current directory tree without descending into directories named 'ignored_directory' and 'ignored_directory' <|target|> find Path -name Regex -type f -exec"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex -exec ls -l {} \\;      | sed -n Program                {} \\;  "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that start with 'file' and end with 'file_name' and contain 'pattern' in their names <|target|> find Path -name Regex -mmin -Quantity -"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type f -newer File        | sed Program            | grep Regex "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are newer than /bin/sh or newer than /share/doc/html and do not have the permissions to run \"sublime\" <|target|> find Path -type f -newer File! -perm Per"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of files that are newer than /tmp/test/24 and older than /tmp/ntest/25. <|target|> find Path -newer File -and -not -newer File -print  \"file/folder"
    }
  ],
  "15.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that contain \"string\" <|target|> find Path -name Regex -exec grep -l Regex {} \\;  | tr Regex Regex     | grep Re"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                  read Regex                   set the variable \"response\"  "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under Folder1 and copy them to Folder2. <|target|> find Path -name Regex -exec echo Regex Regex \\;     | xargs -I {} dirname {} "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir that are not owned by user 'tom' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} ls -l -d"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print their names and times for each one. <|target|> find Path -exec echo Regex {} +  | awk Program     ( find Path -exec echo Regex {} + ) "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -not -name Regex         | xargs"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are newer than /bin/sh and older than /bin/sh. <|target|> find Path -type f -name Regex -newer File -print  | xargs -I {} ls -l -d"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /bin/sh and older than /bin/sh <|target|> find Path -newer File -print   \"./bin/sh\"  | awk"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than $date_time in maximumdepth <|target|> find Path -newer File -print0 | xargs -0 -I {} ls -d -l -r"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the top 10 largest files by size in the current directory and its sub-directories. <|target|> find Path -type f -exec ls -s {} \\; | sort -n -r | head - Quantity | cut -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;     | xargs -I {} mv {} File            {}         {}    "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a source of controversy for environmental and human safety groups. <|source|> Find all files under and below /path/to/directory and change their permissions to 755. <|target|> find Path -type f -exec chmod Permission {} +  -exec ch"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail  | xargs -I {} grep -n Regex {}   | tail          | xargs -I {} tail -n Quantity              "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/to/start with the null character <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep -n Regex {}  "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than '2015010101' and print their names and sizes <|target|> find Path -name Regex -and -nouser -or -type f -printf \"%y %p\\n"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and search for the regex '^pipe' in their contents <|target|> find Path -exec grep -E Regex {} \\;  | grep -v Regex       | tr -d"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file of all sizes, the file tk.txt, is bigger than any file in the current directory. <|target|> find Path -type f -iname Regex -size +Size -print | xargs -I {} ls -l -S -h {}  "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than $month and older than $year and print their timestamps <|target|> find Path -newermt Regex -printf \"%T@ %p\\n\"       |"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir/* paths that are owned by user 'pete' and are newer than file 'emp' by modification time <|target|> find Path -user Regex -mtime +Timespan -exec rm {} \\"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user'me' <|target|> find Path -not -user Regex -print0 | xargs -0 -I {} gunzip -v {}  | grep Regex    "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'pete' <|target|> find Path -user Regex -perm Permission -print   \\;  then change the permission of all other files in the current directory <|target|> find"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the file 'OldStuff' by replacing newlines with spaces. <|target|> find Path -type f -name Regex -exec ls -l -t {} \\; | awk Program      | sed Program       | sed Program"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -type f -exec dirname {} \\;  | xargs -I {} echo Regex {}       | grep Regex        |"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than /tmp/daystart and delete them <|target|> find Path -type f! -newer File -print0 | xargs -0 -I {} rm -r -f {}      | sed Program "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec echo Regex {} \\;      | grep Regex           | xargs -I {} ls {}         "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user \"pete\" <|target|> find Path -user Regex -type f -exec ls -l {} \\;    | sort   | uniq        "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are not newer than $month.csv and print their names and sizes <|target|> find Path -not -newermt Regex -type f -printf '%s %p\\n'    | sed"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File           -v File        -c Regex        -d Regex        -i Regex      -d Regex   "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -ls | awk Program      | sed Program        | sed Program        | cut -d Regex -"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are not owned by user 'pete' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} ls -l {}     | sort -u   -"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter for different fields in the file/directory name <|target|> find Path -iname Regex -print0 | xargs -0 -I {} grep -E Regex {}     |"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                     grep Regex                    Directory              "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> cat File | xargs -I {} grep -l Regex {}      | awk Program      | sed Program        | grep -"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -and -name Regex      -print       | xargs -I {} grep -l Regex {}        grep -l Regex            {}  | x"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'warwick' <|target|> find Path -user Regex -print0 | xargs -0 -I {} ln -s -F File {}          "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} \\;      ( echo Regex )      | tr Regex Regex       |"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'ian' <|target|> find Path -user Regex -exec gzip -9 {} \\;     | awk Program       | grep Regex   "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'warwick' <|target|> find Path! -user Regex -name Regex -print0 | xargs -0 -I {} mv {} File       "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are less than 50 kB in size <|target|> find Path -size -Size -print0 | xargs -0 -I {} ls -l -d {} | grep Regex       | less"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than some_file_name <|target|> find Path -newer File          -print   | xargs -I {} file {}      | aw"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d | xargs -I {} mv {} File           | xargs -"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 small files named \"1.1\" and \"2.1\" that are about the size of a regular file. <|target|> find Path -type f -name Regex -size Size -exec ls -l {} \\"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'foo.txt' by modification time <|target|> find Path -newer File -print0 | xargs -0 -I {} ls -l -d {}  "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory tree that are newer than /tmp <|target|> find Path -newer File -and -newer File      | xargs -I {} rm -r -f {}   "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Only files with GID=1000 <|target|> find Path -type f -name Regex -exec chmod Permission {} \\; | sed Program      | grep -o Regex    | xargs -I {} chmod Per"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree showing the number of lines in each file <|target|> find Path -exec sed -i Program {} \\;  | awk Program             "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of regular files from the /usr/bin directory tree that were last modified more than 5 minutes ago <|target|> find Path -mmin +Quantity -type f -exec ls -l -d {} \\;  | grep Regex   "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a list of regular files from the current directory tree, that are not newer than /tmp/file and do not contain any hidden files. <|source|> find Path -type f -not -newer File! -name Regex -exec ls -l"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec grep Regex {} \\;   | sed Program       | tr Regex Regex         | tr Re"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v --exclude Regex File File              cp -a --exclude Regex File             cp File File     "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -print0 | xargs -0 -I {} wc -l {}    "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Program the process of creating a new userscores file for each user to run in the background. <|target|> cat <( wc ) <( echo Regex ) <( echo Regex )      | tr Regex Regex "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> tar File File         -c -f File            find Path -iname Regex -exec tar -c -v -f File {} \\;        "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that contain'some text' in their names <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}  | xargs -"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory tree that are newer than \"foo.txt\" by modification time <|target|> find Path -newer File -print  | xargs -r -I {} dirname {}      |"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This command finds all files in the current directory tree whose name is \"dirname\" and prints the pathnames of the files. <|target|> find Path -type f -exec ls -l {} \\; | tr Regex Regex     "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in-depth look at the history file \"history\" <|target|> history | cut -d Regex -f Number       | head - Quantity   | cut -d Regex -f Number    "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's first and last gun-control years have been a long time coming. <|source|> Find all files under current directory tree whose names begin with \"s\", and which contain at least one character in their names. <|target|> find Path -name"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive process with no user or group. This file is for the user only. <|target|> find Path -nouser -or -nouser -or -nogroup -print   \"./file/%P\\n"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;   | tr Regex Regex      "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the directories in the current directory tree that contain the current directory and the current user's home directory. <|target|> find Path -type d -exec ls -d -l -r -s {} \\;   | tr Regex Regex      "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -print | xargs -I {} ls -l {}   | grep Regex        | tr"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -type f -iname Regex -print0 | xargs -0 -I {} rm -r -f {}       | grep Regex             | xargs -0 -I {} rm -i {} "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /tmp/foo and older than /tmp/foo and sort them according to the version of the file changed <|target|> find Path -name Regex -newer File | awk Program  "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than some_file_ts and delete them <|target|> find Path -type f -not -newer File -exec awk Program {} \\; | xargs -I {} rm -f {}"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top gunsmiths have been working for more than 20 years. <|target|> find Path -type f -exec basename {} Regex \\;   | xargs -I {} rm -f {}        | xargs -I {} rm {} "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest car wash inoperable car, with a depth of 3 and a size of 10. <|target|> find Path -type f -name Regex -size +Size -exec ls -l -a -s {} \\; | sed Program     | sed Program "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the timestamp in YmdHMS format along with their paths <|target|> find Path -mtime +Timespan -printf \"%TY%Tm%Td %TH%TM%TS|%p\\n"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'Makefile' <|target|> find Path -name Regex -newer File      | grep Regex     | xargs -I {} ls -l {} "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print their path names <|target|> find Path -type f -exec echo {} Regex \\;   | tr Regex Regex       ( echo )      ( echo ) "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex  in bash. | bash  | grep Regex       (displays the last slash-separated part of a file.) | tr -s Regex     | tr Re"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to be replaced with a literal name for each line in the output of each line in file \"inputfile\" <|target|> awk Program Program | xargs -I {} sed Program {}      | grep Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\;   | grep Regex  "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the same inode number <|target|> find Path -inum Quantity -exec chmod Permission {} \\;    then change the permissions to 664 and print them."
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <| source of the physical current directory and its sub-directories <|target> find Path -mindepth Quantity -type f -exec basename {} Path -maxdepth Quantity <|target|> find Path -mindepth"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print their names and sizes <|target|> find Path -print0 | xargs -0 -I {} ls -d -1 -s -s -h {}    "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|source|> Find all files/directories under current directory and change their permissions to 755 <|target|> find Path -exec chmod Permission {} \\;      | xargs -I {}"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -atime +Timespan -exec bzip2 -z -v {} \\;  | awk Program    ( zsh )       | tac     "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;  | sort  | awk Program    "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -name Regex -exec ls -l {} \\; | sort -k Number -n | cut -f Number    | sed Program   | sed Program    "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'joebob' <|target|> find Path -user Regex -print0 | xargs -0 -I {} grep Regex {}        | xargs"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -type f -ctime -Timespan -exec basename {} \\;  | sed Program           | grep Regex  "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the contents of \"file1\" <|target|> cat File File | sed Program      | sed Program        File    | awk Program      ( sort File )     "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of every file that is found in the current directory tree <|target|> find Path -name Regex | sort | uniq -c | sort -n   | head -n Quantity   | cut -d Regex -f Number "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> find Path -name Regex -exec rm -r -f {} \\;      | xargs -I {} rm -f {}               {}          "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than'sample1' by modification time <|target|> find Path -newer File       | grep Regex      | xargs -I {} ls -l"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -print0 | xargs -r -0 -I {} du -h {}  | sort -r   | tail          | awk Program           | sort "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\; | wc    | grep Regex      | sed Program           | sort"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -print0 | xargs -0 -I {} echo Regex Regex {}           | sort   | awk"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file1' by modification time <|target|> find Path -newer File -print | xargs -I {} ls -1 -s -t File {}      | sort"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under Folder1 whose names are \"file1\" and whose details match the pattern \"file_pattern\" in their paths <|target|> find Path -name Regex -and! -path Regex -and"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 MB in size <|target|> find Path -size +Size -exec ls -l {} + Path | sort -r  | head - Quantity    |"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps <|target|> find Path -print0 | xargs -0 -I {} echo Regex Regex Regex Regex Regex {}     "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory and print their paths and sizes <|target|> find Path -execdir echo $( pwd ) \\; | xargs -I {} ls -l -d -s -s -r {}  | aw"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top gunsmith has been found, and the gunsmith's gunsmith has been found. <|source|> Find all files under current directory tree that are owned by the top user <|target|> find Path -user Regex -exec cp {} File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> map all files from current directory to /path/to/search/ <|target|> find Path -iname Regex -exec cp {} File \\;    | grep Regex   | sed Program         | sed"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than file 'file1' by modification time <|target|> find Path -newer File -print | xargs -I {} find Path -print  | xargs -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f \\( -name Regex -or -name Regex \\) -print0 | xargs -0 -I {} find {} -type f -name Regex -or -name Regex   -print0      "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec grep -l Regex {} \\;  | sed Program            | awk"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and delete them.\n <|target|> find Path -type f -exec rm {} \\;       | sed Program    Regex        | grep Regex "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -inum Quantity          | grep Regex        | xargs -I {} find Path -inum Quantity  "
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -mindepth Quantity -maxdepth Quantity -mmin Quantity -Quantity -type f -exec chmod Permission {} \\;  then print "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than '1.1.2' by modification time <|target|> find Path -newer File -print0 | xargs -0 -I {} echo Regex {} | grep -v"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's environment and human-computer interaction page. <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} \\;     | awk Program    "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of regular files from the current directory tree that are not owned by user `nother' <|target|> find Path -type f -not -user Regex -print0 | xargs -0 -I {} grep -n Regex {}"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -name Regex -exec chmod Permission {} \\;     | sed Program   /tmp/blah    "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'wnj' <|target|> find Path -user Regex -print0 | xargs -0 -I {} mv {} File         "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -name Regex -exec grep -i -l Regex {} \\;    | xargs -I {} grep -i -l Regex {}           | sort  | xargs -I {} grep -i -l"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, every user in the home directory must be logged in. <|target|> find Path -type f -name Regex -exec sed -i Program {} \\;  \\;    | grep Regex       | xargs"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and make a list of their contents <|target|> find Path -name Regex -exec cat {} \\;  | grep Regex      | awk Program       \\"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest source of raw data for environmentalist groups, the NSF has been used to create a large archive of all the files in the current directory tree that are newer than the file in question and do not search in the current directory. <|target|>"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have been modified in the last 24 hours. <|target|> find Path -mtime -Timespan -type f -exec ls -l {} \\;  | awk Program       |"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File   -s   /sys/kernel/debug/trac/trace_pipe         /sys/kernel/debug/trac/trace              "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 2013.08.01 and older than 2013.08.01 <|target|> find Path -newer File -print0 | xargs -0 -I {}"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'file' by modification time of last modification <|target|> find Path -newer File -print | tee File        |"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -name Regex -exec wc -l {} + | awk Program   \\; | grep -v"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and content <|target|> find Path -name Regex -execdir cat {} \\;  | grep Regex       | cut -d Re"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'el' or are newer than file 'el' by modification time <|target|> find Path -user Regex -newer File -print   "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print only the filenames <|target|> find Path -type f -exec echo Regex {} \\; | sed Program       | grep -n  | cut -d"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link in the directory /tmp/foo to \"foo/bar\" <|target|> ln -s File Regex       | tr Regex Regex      | ssh Regex  "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec chmod Permission {} \\;     | grep Regex     | tr Regex Regex      | cut -d Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common first name for all files in the current directory tree, separating names with commas. <|target|> find Path -name Regex -exec sed Program -i Regex {} +   | grep Regex "
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and sub-directories and display their contents. <|target|> find Path -type f -exec cat {} \\; | tr Regex Regex      "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> To find all files/directories under current directory tree that match the pattern \"filepattern-to-exclude\" in their paths, and search for the regex \"filepattern-to-exclude-here\" in those files"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} +     | sed Program   "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which have not been accessed in the last 30 min <|target|> find Path -type f -amin -Quantity -name Regex -print       | xargs"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -execdir cat {} \\;   | sed Program       | sed Program "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree whose names do not match regular expression \".*/\\(.*\\(.*\\)\\(.*\\(.*\\)\" in this directory <|target|> find Path"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the first line of output from history <|target|> history | cut -d Regex -f Number | grep Regex | sed Program | sort | uniq | grep -E -v Regex | cut -d"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f -name Regex -mmin +Quantity -delete  -type f -delete      -type d -name Regex -exec rm {}"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File                 docker container               ln -s File Re"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> du -h -c File | awk Program      | grep"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the pattern 'file_name' in their paths <|target|> find Path -name Regex | xargs -"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting hostname in long-run format, with a transfer time of 1 minute for every line in file1 and file2. <|target|> cat File File | x"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines matching their names with null delimiter <|target|> find Path -maxdepth Quantity -print0 | xargs"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\; "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec wc -l {} + | grep Regex     | awk Program    | sort  | uniq  |"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 775 <|target|> find Path -exec chmod Permission {} \\;     "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed script 'gpiod.sh' in their paths to produce a sorted list of the output from the beginning of each line"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> cat File | xargs -I {} cat {} | xargs -I {} grep -n"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file1' by at least in the last 90 minutes and delete them <|target|> find Path -mmin +Quantity -name Regex -print0 | xargs -0 -I"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than'sample' by modification time <|target|> find Path -newer File -print0 | xargs -0 -I {} ls -l {}      | grep Regex"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the console <|target|> find Path -path Regex -prune -or -exec dirname {} \\;       then echo Regex      "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than $1 and older than $2 and print the filenames <|target|> find Path -newer File -type f -print0 | xargs -0 -I {} wc -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'bin/warmer' by modification time <|target|> find Path -newer File -print  -and -newer File   | sort | xargs -I {} ls -"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than'sample' by modification time <|target|> find Path -newer File -print   | xargs -I {} rm -r -f {}        "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/me/test/ directory <|target|> find Path -print0 | xargs -0 -I {} grep Regex {}     | grep Regex     | xargs -0 -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f | xargs -I {} grep Regex {}      | grep -v Regex      | grep -v Regex              | xargs -I {} grep -n Re"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Print the list of files and directories of the current directory <|target|> find Path -exec sed -i Program {} \\;      | sed -i Program           | xargs -I {}"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree whose name is not \"MyFile\" <|target|> find Path -not -iwholename Regex      | grep Regex        | xargs -I"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type d -mtime Timespan       | xargs -I {} ls -l -d {}  | awk Program    "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory of process ID #1. <|target|> find Path -maxdepth Quantity -name Regex -exec mv File File \\;       | sed Program        | tr Regex Re"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 'foo.txt' by modification time <|target|> find Path -newer File -print    | xargs -I {} ls -l {}  "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that have not been modified in the last 30 minutures. <|target|> find Path -type f -mmin +Quantity -print0      | grep Regex   "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths <|target|> find Path -exec touch {} \\;   -printf '%T@ %p\\n'    | tr Regex "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex           Regex               Directory            Path         Directory "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and copy them to /tmp/ <|target|> find Path -type f -empty -exec cp {} File \\;      | tr Regex Regex   "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $DIR directory <|target|> find Path -type f -mtime Timespan   | xargs -I {} ls -l {}  | grep Regex       | xargs"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current working directory with resolved symbolic links and the file path to the current working directory. <|target|> pwd | xargs -I {} ls -p -l {}    | awk Program     | tr"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -name Regex -exec wc -l {} +  | grep Regex    | sort | uniq -c | sort -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the null character as the delimiter <|target|> find Path -print0 \"\\n\" | xargs -0 -I {} rm -r -f {}        | sed Program"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the first line of \"infile\" with \"no-match\" as the delimiter <|target|> paste -s -d Regex File File       | tr Regex Regex         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory tree and the number of lines in them <|target|> find Path -type d -exec ls -l -a -v -z -r File \\; | tr Regex Regex    "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( which Regex | xargs -I {} chmod -R Regex {} )               true )       true       ssh-keygen -f File    "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all the files which are writable by group or other <|target|> find Path Path -perm Permission -perm Permission         | grep Regex     | xargs -I {} ls -l {}    "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's first gun shop opened in the world by a man in less than 100 days. <|source|> Find all gunsmiths in the world and copy them to home directory. <|target|> find Path -name Regex -type f -exec mv {} File \\"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -printf '%20size: %6s\\n' | sort -n -r  | cut -d Regex -f Number"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under $x directory and print the path names of the directories they are in <|target|> find Path -type d -exec echo Regex \\; -exec chmod Permission {} \\;     | grep Regex  "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths <|target|> find Path -print0 | xargs -0 -I {} touch {}                 "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -1 | awk Program Program | xargs -I {} wc -c {}          | awk Program       | sed Program               wc  "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} +    | xargs -I {} chmod Permission {}"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep Regex {} \\; -or -print        \"^use strict -exec grep -H Regex {} \\; \" \" "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than /tmp/foo and delete them <|target|> find Path -type f! -newer File -exec rm -f {} \\;  | x"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and sort them according to their inode and outum <|target|> sort File | uniq | xargs -I {} ls -d -L -r -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word in all the files in the current directory and display the matched lines along with the file names. <|target|> find Path -type f -mtime Timespan -exec grep -H Regex {} \\;"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This will be the first in a long line of directories that are not newer than /path/to/oldfile <|target|> find Path -name Regex -type f -newer File  -print  | xargs -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'luke' <|target|> find Path -user Regex -exec ln -s {} Regex \\;   "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that have been modified in the last 1 day. <|target|> find Path -mmin -Quantity -print0 | xargs -0 -I {} ls -l"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +    | sed Program    "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -i Regex {} \\;   -print        | grep Regex                grep -l"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* This command will print the full path of the command 'cp /path/to/' <|target|> which in this case is the current directory <|target|> find Path -path Regex -exec cp"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with \"some_pattern\" and which contain \"some_pattern\" <|target|> find Path -name Regex -exec grep"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | awk -"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path and parent directory <|target|> find Path -name Regex -printf \"%h/%P\\n\" | sort | tail"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find the most recently changed files and compress them with gzip <|target|> find Path -type f -cmin -Quantity | xargs -I {} gzip {}       | x"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long time ago, but not since then. <|source|> Find all files/directories under current directory tree that are newer than /tmp/file <|target|> find Path -newer File -exec"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E -v Regex | awk Program | xargs -I {} echo Regex {}        | grep Regex     | cut -d Regex -f Number"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>> Find all files under current directory and change their permissions to 755. <|target|> find Path -type f -exec chmod Permission {} \\;     | tr Regex Regex  "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path Path Path -type f Path Path Path Path Path -exec chmod +Permission {} \\;   -exec chmod Permission {} \\;         set"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their names <|target|> find Path -group Regex -execdir echo {} Regex \\;     |"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep -l Regex {} \\; | wc -l      | grep -E -o -v Regex  "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -print0 | xargs -0 -I {} echo {}      | tr Regex Regex            |"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of a long series of small files that are grouped together to create a single file. <|target|> find Path -type f -print0 | sed Program | sort | uniq -c | sort -n -r | head -n Quantity | xargs -0"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0 -print0 | xargs -0 -I {} echo Regex {}           | grep -"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second line of a long recursive process that begins with a pipeline to the console and ends with a stop. <|target|> find Path -type f -size +Size -exec ls -l {} \\; | awk Program    for i <( ls File ) <"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the environmental variables whose name is not \"Shell\" <|target|> set | grep -e Regex | grep -o -w Regex  | sed Program | sort | uniq -c | grep -o -w Regex  | w"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'pete' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} grep -i -l Regex {}    "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex             | awk Program                  \\( -f -N -i -v -d Regex \\)   \\)  "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -s {} +  | awk Program      | xargs -I {} chmod Permission {}    "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and contents <|target|> find Path -type f -exec ls -l {} + | awk Program      | xargs -I {} ls -l {}      | awk"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and sizes <|target|> find Path -type f -exec ls -s {} \\; | awk Program          | awk Program  "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than \"file_1\" by modification time <|target|> find Path -newer File -not -newer File -type f -print0 | xargs"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -type f -name Regex -atime +Timespan -user Regex        | xargs -I {} ls -l {}               \"user: who"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the disk usage of each one <|target|> find Path -amin -Quantity -type f -exec du -k {} \\; | awk Program      "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $newerdirectory directory tree that match the regex 'file_name' with the extension $filename and have the same permissions <|target|> find Path -name Regex -exec chmod Permission"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed script \"oracle\" on the output <|target|> find Path $( pwd ) -exec sed -i Program {} \\;    | awk Program "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory tree that are newer than \u2018httpd.log <|target|> find Path -newer File -print0 | xargs -0 -I {} sed -i Program {}   "
    }
  ],
  "16.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;     chmod Permission File \\;   "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                      | read -r -p Regex                 "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files/directories under current directory and show the last 10 lines of output with the file names sorted alphabetically. <|target|> find Path -exec echo Regex | rev | cut -d Regex -f Number |"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'document' under current directory tree <|target|> find Path -name Regex -and -not -path Regex      | xargs -I {} grep Regex {}  "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Find all the files in the current directory recursively that have not been accessed in the last 30 minutes <|target|> find Path -atime +Timespan -type f -exec ls -l {} \\;    |"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose names begin with \"only1\" and remove them <|target|> find Path -type f -name Regex -exec rm {} \\;     then print the list of the removed files "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files/directories under current directory that are larger than 100 megabytes <|target|> find Path -size +Size -exec ls -l -a -S -h {} \\; | awk Program   \";"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\;      | awk Program     ("
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} Regex \\;    | tail      | xargs -I {} echo Regex {}"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'warwick' <|target|> find Path -user Regex -print0 | grep -v Regex      | tr Regex Regex"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -iname Regex -type f -exec mv {} File \\;       Save the path to the current script  in variable \"PATH\" <|target|> find Path -iname Regex -exec mv File File \\;"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user tommye <|target|> find Path -user Regex -mtime -Timespan -print    | xargs -I {} ls -l {}      | tail "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail     | cut -d Regex -f Number     | head -n Quantity                     | tail -n Quantity   "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -user Regex -print0 | xargs -0 -I {} ls {}         | grep Regex         | awk Program"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files under current directory and count their.txt files. <|target|> find Path -type f -name Regex -execdir grep -l Regex {} \\; | wc -l    find Path      | wc"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory that are owned by user 'warwick' <|target|> find Path -user Regex -user Regex         | awk Program         | grep Re"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the average time of 4 ping requests to \"www.stackoverflow.com\" <|target|> ping -c Quantity -n Regex | awk Program  | tail -n Quantity   | cut -d Regex -f Number   | xargs"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec grep Regex {} \\;      grep -E Regex        | tr Regex Regex      "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -noname -user Regex -not -name Regex -not -name Regex -not -exec rm {} \\;   |"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -execdir -pwd -H {} +  | awk Program      | sed Program      | sed Program   "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -user Regex -perm Permission -print   | xargs -I {} chmod Permission {}          "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} \\;   | tr Regex Regex              | xargs -I {} echo {}     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -type d -exec echo Regex {} \\;  | sed Program                  | sed"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose file name is.txt and delete them <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} rm {}            | xargs -0 -I"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them one by one. <|target|> find Path -exec echo {} \\;   | sort  | uniq  | sed Program          | xargs -I {} echo {}  "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names under current directory <|target|> find Path -name Regex -type f -exec ls -l {} \\;    | grep -e Regex          | sed Program   "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;   | tr Regex Regex        | grep Regex      | cut -d Regex -f"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File             | grep -E -v Regex                       | xargs        -I {} chown Re"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -print  | xargs -I {} ls -l -s {}   | awk Program        | xargs -I {} ls -l {}  "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and times <|target|> find Path -name Regex -printf \"%h/%f\\n\"     | sort   | uniq  | sed Program    | tr Regex  "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory <|target|> find Path -name Regex -print0 | xargs -0 -I {} rm {}           | xargs -0 -I {} rm {}    "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                   | grep Regex               | sort           | cut -d Regex -f Number"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex {} \\;   | tr Regex Regex           | sed Program      "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex         -print            where \".*pm\"    matches  \"*users/tom\"    -prune   -or -name Regex "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -exec ln -s {} \\;  | awk Program         | sed Program         | tr Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user wnj or are newer than file /tmp <|target|> find Path -user Regex -newer File -user Regex -print     | xargs -I {} df File {} "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named'sar' under current directory tree <|target|> find Path -name Regex -exec gzip -v {} \\;     | awk Program         | xargs -I {} gzip"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory matching the regex '<script>find Path -regex Regex -exec mv {} File \\;  }  \\;  | grep -E -v Regex   | xargs -I {} mv {} File  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of files that are owned by the user john and are newer than the file `file1' <|target|> find Path -user Regex -newer File -print   | xargs -I {} ls -l {}      | awk Program   "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by \"studio\" <|target|> find Path -user Regex -print    | xargs -I {} find Path {}        -print       "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;      | sed Program           | x"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} \\;     chmod Permission {} \\;       chmod Per"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0  | tr -d -c Regex       | tr -d Regex  "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;  | tr Regex Regex       | sed Program      "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users may find the current directory tree empty, while others may find it full. <|target|> find Path -maxdepth Quantity -empty -type f -exec chmod Permission {} \\;      (unsafe)      "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -type f -exec sed -i Program {} +    | tr Regex      | sed -i Program  "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory and its sub-directories <|target|> find Path -type d -exec basename {} \\;       | xargs -I {} find Path {} -mindepth"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generate a symbolic link named \"~/path/to/dir\" to file \"/path/to/dir\" on host \"~/path/to/dir\" <|target|> ssh -i File Regex      | sed Program   "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -perm Permission -exec chmod Permission {} \\;   | head         | awk Program "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -n -v -r -a -L File File File          | grep Regex         | tr Regex Regex               "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -type f -exec basename {} \\; | awk Program     | sed -e Program     "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -i Regex -r Regex    | grep Regex    | tr Regex Regex        | grep Regex       | tr Regex Regex      "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -f File {} \\;      tar -c  File  \\;              | tar -c -v -f File File "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not newer than the file $newerthan and delete them <|target|> find Path -type f -not -name Regex -exec rm {} \\;    | xargs -"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace all spaces with underscores <|target|> find Path -name Regex -exec sed -i Program {} \\;   | sed -i Program           "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory tree that are not the same file as \"file1.txt\" <|target|> find Path -type f! -samefile Regex -printf \"%h\\n\" | sort | uniq |"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0  \u2018#  | tr -d -c Regex         | tr -"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'latest' <|target|> find Path -newer File -and! -name Regex -print     | sort    "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of three parts. <|target|> find Path -name Regex | xargs -I {} ls -l {}  | head -n Quantity  | xargs -I {} echo {}  | xargs -I {} tar"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path where each one is found <|target|> find Path -name Regex -exec echo Regex {} \\;  | xargs -I {} dirname {}   "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -inum Quantity -exec ls -l {} \\;  | sed Program        | grep Regex        |"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with spaces in their names under current directory <|target|> find Path -name Regex         | xargs -I {} echo Regex Regex Regex Regex {}        "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}         {}      | xargs -0 -I {} rm -r -f {}         {} "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex {} \\;  | awk Program           | sed Program         |"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'tom' and are newer than the file 'file' by modification time <|target|> find Path -newer File -user Regex -print     | awk Program  "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of three parts. <|target|> find Path -type f -exec rm {} \\;  | sed Program       | sed Program       | tr Regex Regex        | sed Program"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is a directory whose name is found in two parts: first, the full path of the file containing the current command, and second, the part after the directory name. <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f -execdir rename Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -type f -ctime +Timespan -exec echo {} \\;      | sed Program             Regex"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than Jul 01 by modification time <|target|> find Path! -newermt Regex -print0      | xargs -0 -I {} ls -l {}   "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the largest file/directory in the current directory <|target|> find Path -type f -printf '%p %p\\n' | sort -r -n | head -n Quantity | cut -f Number -d Regex    "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex -v Regex        | tr Regex Regex       | tr Regex Regex        | uniq      "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not directories under /path/to/dir <|target|> find Path -type d! -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} \\;      print    \""
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to be expanded to include only the files/directories with extension \"files\" <|target|> find Path -name Regex -exec chmod Permission {} \\;      print  \"Permission denied\" "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the current directory <|target|> find Path -maxdepth Quantity -type d -printf '%f\\n'          | sed Program"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Movies of all types exist in the current directory, and each of them has its own set of sub-directories. <|target|> find Path -type d -name Regex -execdir ls -l -r -t"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that contains \"*.is\" and \"*.sh\" in their names <|target|> find Path -type f -iname Regex -exec ls -l {} \\;"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -xdev -name Regex -type f -atime +Timespan -exec bzip2 {} \\;    -exec tar -c -z -f File {} \\;       "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the directories that are under current directory and do not search in the sub directories. <|target|> find Path -maxdepth Quantity -type d -name Regex -exec echo Regex \\"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nSince Perl 6.0, Perl 6.0 has been used to create and list regular files whose names begin with \"file-name\" <|target|> find Path -type f -name Regex -exec ls -l {}"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -iname Regex          | xargs -I {} grep Regex {}         {}      | x"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not the same file or directory as \"/dir/to/file\" <|target|> find Path -not -samefile Regex       | grep Regex      "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the same inode number as the one given as a variable <|target|> find Path -inum Quantity -exec echo {} \\;     | awk Program        | sed Program  "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-collection directory, with 1.2 terabytes of space under its under the user's home directory, is empty. <|target|> find Path -type f -size +Size -exec ls -l {} \\;  | sort -n -r    |"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo -n Regex \\; Path | xargs -I {} rm {}             {}   | xargs"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive find command that removes all files with spaces in their names. <|target|> find Path -type f -name Regex -exec rm {} \\;   | xargs -I {} ls -l {}  | awk Program       |"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -s -l -h {} \\;  | sort -n -r   | head          | less                files/direct"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and their sizes <|target|> find Path -exec ls -l -s -h {} \\; | awk Program        | sed Program       "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the output to console and search for 'pattern' in those files <|target|> find Path -name Regex | xargs -I {} grep -H Regex {}  | xargs -I {} grep Re"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Downloads a file as a script and stores it in a variable'share_path' and stores it in the 'tmp' variable. When executed, the script must be run in the background. <|target|> readlink File       | tail - Quantity   |"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not in the path \"dir1\" <|target|> find Path -type f -mmin Quantity -Quantity -not -path Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of their parent directories <|target|> find Path -exec du -s -h {} \\; | sort -n -r     | head   "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec sed -i Program {} +   | tr -d Regex Regex     | xargs -I {}"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match pattern '*.[0-9]+' <|target|> find Path -name Regex -mmin -Quantity  | xargs -I {} find {} Path -print0"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern 'nasa', 'tmp', and the directory names containing them. <|target|> find Path -type d -path Regex -execdir rename Regex {} \\"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep -E -o Regex | sed Program     | grep Regex     | sed Program        | cut -d Regex -f Number        | sed Program   "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, Emacs finds all files under the current directory and prints the path names of each one. <|target|> find Path -type f -mtime Timespan -exec echo Regex {} \\;  | sed Program        "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path \\( -type f -or -type d -or -type f \\) -print0       | xargs -0 -I {} find Path Path Path {} Path Path Path {} Path          "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's environment director, Sohnde, has been working with the U.S. Environmental Protection Agency (the director) on a case-insensitive case-insensitive case insensitive search for all files on the system that were modified after the file was last modified."
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and contents <|target|> find Path -exec echo {} Regex Regex \\;  | xargs -I {} ls -l {}   | more   "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are newer than the file $newerthan and older than the file $olderthan and delete them <|target|> find Path -type f -name Regex -newermt Regex! -newermt Re"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} +     Path          | awk Program     "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top cop has been forced to quit the job after a long and hardening of the job. <|source|> Find all files under and below the current directory that have been modified in the last two weeks and count the number of lines in the output <|target|> find"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Download \"file.txt\" with options ranging from minimal to large. <|target|> ls -l -S -a -u -t File File      | head - Quantity       | tail - Quantity  | xargs -I {} dir"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -type f -name Regex -exec echo Regex Regex Regex Regex \\;   | tr Regex Regex    | tr Regex Regex          | tr Regex"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec echo Regex Regex \\;   | xargs -I {} ls -l {}           | grep Re"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -mindepth Quantity -exec ls -l {} \\; | wc -l     | sed Program       | grep -E"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -exec awk Program {} \\;  | grep -i -w Regex         | xargs -I {} head -n Quantity {}         | grep -w -i -w Regex"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;  then create a tar ball of all the files in the current directory and sub-directories <|target"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex       | sort    | awk Program        | sed Program        | sed"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are named \"file1\" and list the unique parent paths of the files and the modified times <|target|> find Path -name Regex -printf \"%T@ %p\\n\" |"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec echo Regex Regex Regex {} +    | xargs -I {} ls -l {}   "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee -a File   \\;         Regex               | xargs -I {} -P Quantity trace -r {}         "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and prints their path and owner <|target|> find Path -name Regex -execdir grep -H Regex {} \\;    | xargs -I {} dirname {}"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec compress -f File {} \\;      print  file            "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and the names of their parents <|target|> find Path -exec basename {} \\; | sort   | uniq     | tr Regex "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user www-data <|target|> find Path -not -user Regex -and -not -user Regex       | grep"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long-running, one-shot job, and it's a good one. <|target|> find Path -name Regex -newer File -print       | awk Program    for  this command "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | grep -v Regex      | tr Regex Regex        | grep Regex          | tr Regex Regex       "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The list of the current directory's subdirectories expands to include all files and directories that are not in the path /path/to/files. <|target|> find Path -maxdepth Quantity -mindepth Quantity -name Regex -type f -"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex     | grep Regex    | tr Regex Regex      | grep Regex      | tr Regex Regex     | grep"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -iname Regex -exec ls -s {} + | awk Program        | sed"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex  and print the output <|target|> find Path -type f -exec ls -l {} \\;  | awk Program          | sort  | uniq"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print the output of those files/directories <|target|> find Path -print0 | xargs -0 -I {} echo {} "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to get the total size of all the files in the current directory <|target|> find Path -type f -exec ls -l {} \\; | awk Program  | xargs -I {} wc -c {}"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> will search for a word in all the files in the current directory and display the filename followed by the number of occurrences <|target|> find Path -type f -exec grep -n Regex {} \\; | xargs -"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's environment is one of the largest in the world with a wide open access network that is used to host and process all of the files in the current directory. <|source|> find Path -type f -exec chmod"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most used utilities in the current directory tree <|target|> find Path -type f -exec ls -l {} \\; | awk Program    | sort | uniq | sed"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path and owner <|target|> find Path -exec echo Regex {} \\;      | grep Regex   "
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f -name Regex -delete   -type f -mmin +Quantity -delete  -delete            |"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File          | mv File            | mv File          "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n* Enables shell option 'nocasematch'. <|source|> find Path -name Regex -exec sed -n Program -e Program -e Program -e Program -e Program"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Displays calendar for a current month.\n <|target|> cal -h | grep -v Regex       | sed Program         "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user \"user\" <|target|> find Path! -user Regex -ok chown Re"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not directories for the current user. <|target|> find Path -type d! -name Regex -prune -or -"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since its release in the wild on November, 21, 2007, has been modified to have a size of 2000 kB. <|target|> find Path -type f -exec mv {} File \\"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the word \"kt\" in their name and copy them to the current folder. <|target|> find Path -name Regex | xargs -I"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, all.txt files in the current directory tree must be sorted in the order of their depth <|target|> find Path -type f -name Regex -exec ls -l -d"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     |"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count them <|target|> find Path -type f | xargs -I {} grep -l Regex {} | awk Program | x"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are owned by the user with Uid 999 <|target|> find Path -uid Regex -user Regex -exec ls -l {} \\;     Print  'file' file"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'ian' <|target|> find Path -user Regex -and -perm Permission -print       | grep Regex       | grep"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match pattern \"???-???-???\" <|target|> find Path -path Regex         | grep Regex            "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -type f -exec ls -l {} \\; | sort | uniq -c  | sort -n | tail"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the null character as the delimiter <|target|> find Path -print0 | xargs -0 -I {} ls -l {}        | tr Regex Regex   "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long list of directories that contains the contents of \"filename\" <|target|> find Path -type d -exec sed -i Program {} \\;  \\;  | awk Program    \\;    | xargs -I {} rm"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user joe or by user grub <|target|> find Path -user Regex -or -user Regex       | xargs -I {} grep Regex {}"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> pstree -R | grep Regex | grep -v Regex        | tr Regex Regex             | cut -f Number             | grep -"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and print their names <|target|> find Path -exec echo {} Regex \\;   | sed Program         | grep Regex         |"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>ls | grep -E -r File | sed Program | xargs -I {} ls File {}    | sed Program       | grep Regex      | tr Regex        | sed Program     "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's first 100 jobs to be filled by the end of the year <|target|> find Path -type d -exec mv {} File \\; -exec ls -l File \\;   -exec mv File File \\;    -exec sh"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse sortable file, use \"reverse\" to display the differences between files in directories and in the subdirectories of the current directory. <|target|> find Path -type d -name Regex -exec echo Regex Regex {} + | sed"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} \\;   | sed Program       ( find Path )"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all the files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     | sed Program        "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose names are not \"Waldo\" <|target|> find Path -maxdepth Quantity -not -name Regex        | sed Program          |"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex             /usr/share/my-editor/    /usr/share/bin/my-editor-executable          directory /usr"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -depth -type d -empty -exec ls -s {} \\; | tr -d Regex     | sed Program      |"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the most used utilities for Unix <|target|> find Path -type f -mtime Timespan | grep -E -o Regex | xargs -I {} ls -l {} | sort | uniq  | tr -d Regex "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> is a command in the shell that compresses all jpg files in a current folder. <|target|> find Path -maxdepth Quantity -type f -name Regex -exec compress -f {} File \\;    | grep Regex    |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the list of the current directory's subdirectories <|target|> find Path -maxdepth Quantity -type d -name Regex -exec echo Regex {} \\;     | tr Regex Regex         |"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;   | xargs -I {} chmod Permission {} \\;       "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files in the current directory and below <|target|> find Path -type f -exec sed -i Program {} \\;      | tr -c Regex         | tr -"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'pet' <|target|> find Path! -user Regex -print       | grep Regex        | grep Re"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex $( find Path -name Regex -exec sed -i Program {} \\; )            | xargs -I {} kill - Regex $( which Regex )            "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory that are less than 50 bytes in size <|target|> find Path -type f -size -Size -exec ls -l -h {} \\;    | awk Program    for (user, file"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -user Regex -print0 | xargs -0 -I {} chmod Permission {}       "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory and replace every occurrences of'subdomainA.example.com' with'subdomainB.example.com' in those files <|target|> find Path -type f -not -iwholename Regex -"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set write permission for group and other for these files/directories <|target|> find Path -exec chmod Permission {} \\;          permission     "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -iname Regex         | tr Regex        | grep Regex    "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -l -d -R File | grep Regex | cat -n | wc -l      | tr Regex Regex       | awk Program        | sed Program       "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     | tr -d Regex  "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex File | sed Program   | grep Regex    | sed Program    | grep Regex       | tr Regex Regex          "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex      | grep Regex      | sed Program       | grep Regex        |"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to the console and print the output to the console and append to \"log.txt\" <|target|> find Path -type f -exec echo Regex Regex Regex Regex {} +   | tee File   "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the release of 'n' in November, 't has been used to create symbolic links in the current directory for all files located in the current directory and below. <|target|> find Path -type f -mtime Timespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files that have been modified in the last 10 minutes <|target|> find Path -mmin -Quantity -mmin +Quantity  | xargs -I {} ls -l {}     | grep Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the list of regular files that are less than 50 bytes in size, find the largest and newest file <|target|> find Path -type f -size -Size -exec ls -l -t -r -s {} \\;"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files under current directory whose names are \"Binary\" and print the path names of the directories they are in <|target|> find Path -mmin -Quantity -printf \"%p\\n\" |"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find the most recently changed files in the current directory and subdirectories. <|target|> find Path -type f -printf '%h\\n' | sort | xargs -I {} ls -l -t -"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;     grep -H -n Regex File          | xargs -I {} grep -I {}"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'document' in the current directory and below. <|target|> find Path -name Regex -print  | xargs -I {} echo Regex {}"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files under current directory whose names begin with \"file\" and delete them <|target|> find Path -name Regex -type f -atime +Timespan -exec rm -"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -print0 | xargs -0 -I {} mount -o rw, {} "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files owned by user wnj or by user id. <|target|> find Path -user Regex -type f -not -user Regex -exec ls -l {} \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find Path Path -type f -name Regex -exec bzip2 -k -v {} \\;   | awk Program        | sed -e Program      "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -perm Permission -exec chmod Permission {} \\;     |"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and sub-directories that are not owned by the user or group <|target|> find Path -not -user Regex -type f -name Regex -print "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex     has a number stored between the 2 and 3 and 4th fields in the file \"files\" <|target|> cat File | split -l Quantity File Regex    "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path -type f -exec chmod Permission {} \\;     then set the executable bit  for all users on all  regular files  under  /usr/bin/bin/local/opt "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree whose names are \"file_name\" <|target|> find Path -name Regex -or -print   \"file_name\"   "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory that are less than 50 megabytes in size <|target|> find Path -size -Size -Size     | sed Program    | grep -E -v Regex      "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number of lines <|target|> find Path -exec ls -l -s {} \\; | wc -l    | awk Program       | grep Regex  "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the process tree where user@host is found. <|target|> cat File | sed Program | tr Regex Regex | sed Program      | tr Regex Regex       | tr Regex Regex   "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory <|target|> find Path -name Regex -print0 | xargs -0 -I {} gun -c {}   | grep Regex        | grep Regex  "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f | awk Program   | awk Program  | sort | uniq | xargs -I {} ls -l -R -h {}  | awk"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link named \"~/bin/mksd\" to \"/usr/bin/share\" <|target|> find Path -type f -exec ln -s {} \\; | wc -l      | awk Program    "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 755. <|target|> find Path -type f -exec chmod Permission {} +     ( echo Regex )    | xargs -I {} chmod Permission {} "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex      | sed Program      | grep Regex               | awk Program                   |"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of all regular files from the current directory tree <|target|> find Path -type f -exec echo Regex Regex Regex {} \\;    ( tr Regex Regex )   | xargs -I {} chown Regex {}    "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure? (Y/N) <|source|> find Path -type f -exec ls -l {} \\;  | grep Regex  | xargs -I {} chmod -R -v Permission {}          | tr -d"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program      "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has the largest number of jobs in the world <|source|> find Path -type f -exec sed -i Program {} + | grep -v Regex | xargs -I {} rm -f {}     | tail - Quantity  "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -iname Regex -atime +Timespan -user Regex      -type f        -user Regex        -exec ls -l {} \\;   "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -amin -Quantity -exec chmod Permission {} \\;        chmod Permission File "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with \"file1\" and end with \"file2\" and delete them <|target|> find Path -name Regex -and -not -name Regex -and"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex Regex {} \\;  | tr Regex Regex          "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a command line utility for creating directories in the current directory and subsubdirectories. <|target|> mkdir -p Directory           | sort          | sed Program "
    }
  ],
  "17.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -path Regex -prune -or -print    | xargs -I {} dirname {}       "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                      | read -r -p Regex                 "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the output of the first 10 of them <|target|> find Path -exec grep Regex {} + | head -n Quantity    | awk Program    | sort"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than /tmp/dir1 and remove them <|target|> find Path -not -newer File -print0 | xargs -0 -I {} rm {}  "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and print their paths and parent directories <|target|> find Path -exec echo Regex {} \\;  | sed Program          | tr Regex Regex     "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are greater than 100MB and print their sizes <|target|> find Path -size +Size -exec ls -l -s {} \\; | awk Program     {} "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below that are larger than 100M and print their sizes and total size <|target|> find Path -size +Size -xdev -type f -exec ls -s {} + | aw"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory is for the user with certain id numbers <|target|> find Path -uid Regex -iname Regex -exec chmod Permission {} \\;     then print  \"./root_file.txt\"   to the console"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and lines of contents <|target|> find Path -iname Regex -exec cat {} \\;  | tail      | tail     "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -l -h {} +   | tr Regex Regex           |"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -iname Regex -type f -exec mv {} File \\;       then move  to /mnt/mp3       directory                x"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines they descend into <|target|> find Path -name Regex -daystart -execdir grep -m -i Regex {} \\;  | xargs -I {} find {} -mtime -Times"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -name Regex | tail -n +Quantity | xargs -I {} chmod Permission {}            | head             | tail -n +Quantity        "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -user Regex -exec chmod Permission {} +       | awk Program             "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec grep -H Regex {} \\;    | wc -l         | grep Regex       |"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory ensuring white space safety <|target|> find Path -print0 | xargs -0 -I {} grep Regex {}        | tr -d Regex        | x"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -perm Permission          | xargs -I {} ls -l {}  | awk Program          | xargs -"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100M. <|target|> find Path -size +Size -exec grep -H -n Regex {} \\;   | grep Regex          | less "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than some_file_type by modification time <|target|> find Path -not -newer File        | sed Program      | xargs -I {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most used utilities in the current directory tree. <|source|> find Path -type f -name Regex | xargs -I {} gunzip {}  | xargs -I {} gunzip {}      | awk Program    "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'wnj' <|target|> find Path -user Regex -perm Permission -print   \"./file1/*.txt\"    then change the permission to 755. <|target"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -exec echo Regex Regex {} Regex \\;    | awk Program      | xargs -I {} ls -l {}     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names are not \"MyCProgram.c\" <|target|> find Path -type f -not -iwholename Regex  | grep Regex      | sed Program        |"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -links Quantity -print        direcory    ( / )    ( / )    ( / )    ( / )  ( / ) "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec grep Regex {} \\;       | xargs -I {} find {} -name Regex         | xargs -I {} echo Regex {}"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named \"file\" in the entire filesystem <|target|> find Path -name Regex -print0        | xargs -0      -I {} du -s {}       | sort"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf '%s %p\\n' | sort | uniq  | xargs -I {} ls -l -d {}  | awk Program "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File           | xargs -I {} chown Regex {}                 /data/mongodb         | grep Regex   "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex             | grep Regex           | xargs -I {} ls -l {}    "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths to files/directories <|target|> find Path -print0 | xargs -0 -I {} echo -n {}     | sort   | uniq   | sort "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print the last 10 lines of the file 'xxxx' <|target|> find Path -name Regex | tail - Quantity | xargs -I {} sed -i Program {}        | tail -"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -name Regex           | xargs            -print                 | grep -i Regex          "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 MB and do not end in \".htaccess\" <|target|> find Path -type f -size +Size -not -name Regex     -size +Size      "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex         | grep -P -i -l Regex          | xargs -I {} grep -l -R Regex {}        | xargs -"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} +    Path            | xargs -I {} chmod Permission {}  "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;      print  \"new file    = \"     \"    "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with '.js' extension under current directory without descending into directories that are not readable by anyone <|target|> find Path -name Regex -type d -prune -or -name Regex -print0 | xargs -0 -I {} g"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were accessed less than 1 day ago <|target|> find Path -atime -Timespan -name Regex -print0 | xargs -0 -I {} mv {} File         | tail"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -exec dirname {} \\;   | tr Regex Regex         | grep Regex        | tr Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their file information along with their sizes <|target|> find Path -execdir cat {} +  | xargs -I {} ls -l {}      | awk Program    for info   "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -execdir ls -l -S {} + | awk Program        Quantity    "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -exec chmod Permission {} +      | sed Program             {} +"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths <|target|> find Path -iname Regex -printf \"%h/%P\\n\"     | tr -d Regex   "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -name Regex | xargs -I {} dirname {}         | xargs -I {} echo Regex"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Pair each line of numbers in \"file1\" on a single line separated list <|target|> cat File | sort | uniq | xargs -n Quantity -I {} awk Program Program {}       | sed Program     "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} \\;   | tr Regex Regex       | sed Program   "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the output of each of those files/directories without descending into any hidden directories <|target|> find Path -name Regex -prune -or -type f -print0   "
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since its release in the '0' directory in the current directory, Emacs will not update its configuration file. <|target|> find Path -newer File | xargs -I {} touch {}          | grep Regex   "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find all files in the current directory and sub-directories that are not owned by any user or group. <|target|> find Path -type f -name Regex -prune -or -nouser -or -nogroup -"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v -v --exclude Regex File File          --exclude Regex          cp --exclude Regex File          "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -perm Permission | xargs -I {} chmod Permission {}         | sed Program "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines of output by replacing all newlines with : (colon) <|target|> find Path -name Regex | xargs -I {} echo Regex -n {} "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -r -v -f File {} \\;        cpio -p -a -l     -p -u   {}   /tmp/ar archive  "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all files that have not been modified in the last 10 weeks. <|target|> find Path -name Regex -type f -mtime +Timespan -print | xargs -I {} ls -l {}   | grep"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -name Regex -exec chmod Permission {} \\;    | sed Program         "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames (without the names) <|target|> find Path -maxdepth Quantity -type f | xargs -I {} ls -l {}     |"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file menu where user input is displayed. <|target|> find Path | column -s Regex -I {} echo Regex Regex Regex Regex Regex Regex     | less     "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline as the delimiter <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo {}    | tr -d"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the most used utilities for Mac OS <|target|> find Path -type f -name Regex -exec ls -l {} \\; | tr -d Regex | xargs -0 -I {} echo Regex Regex Regex {}"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> for each line in \"file\" <|target|> awk Program Program <( grep Regex )   | grep Regex            | awk Program           | grep"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most recently changed files in the current directory and its subdirectories. <|target|> ls -1 -t | grep Regex | awk Program  | sort | uniq | xargs -I {} rm -i {}      | sort"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory tree that are larger than 100 Kilobytes <|target|> find Path -size +Size  -print          | xargs -I {} ls -l {}     |"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -I {} rm -r -f {}           | grep -v Regex            | xargs -I {} rm -i {}   "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec echo Regex \\;       then delete        | sed -n Program          |"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree which have not been accessed in the last 30 mornings <|target|> find Path -atime +Timespan -print       | awk Program       | grep -v Regex "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     then delete  and those files  in the current directory <|target|> find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names separated by null delimited lines <|target|> find Path -print0 | xargs -0 -I {} echo Regex {}     | tr -d Regex     "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex             | xargs -I {} ls -l {}       | grep Regex     "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -newermt Regex        -print       | tr Regex Regex       | xargs -I {} ls -"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     then chmod Permission {}    /or Permission File   "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> keeping the files in place, without deleting them. <|target|> find Path -name Regex -exec chmod Permission {} \\;      ( true )    ( false )   ( true )"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> at level 2 of the command-line <|target|> find Path -mindepth Quantity -maxdepth Quantity -name Regex -print0          | grep Regex     "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec ls -l {} \\;  | grep Regex      | xargs -I {} readlink -f File {}         "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files which have not been accessed in the last 30 days and display the last 10 lines of the output. <|target|> find Path -type f -atime +Timespan -exec ls -l {} \\; |"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to be used with regular expressions in their names <|target|> find Path -type f | xargs -I {} echo Regex Regex Regex {}      | grep -E -E Regex   "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the users with X Window permission. <|target|> find Path -type f -perm Permission -exec ls -l {} \\;    | grep Regex        | less"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a small (24-128 MB) file. <|target|> ls File | xargs -I {} touch File           {}          Regex"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -type f -daystart -mtime +Timespan -mtime -Timespan -exec bzip2 {} \\;  \\;   | tar -c -f File File    "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory <|target|> find Path -iname Regex -exec  \\;           | sort        | uniq "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word <|target|> find Path -type f -exec grep -l Regex {} +  | grep Regex  | sed Program     | sed Program        | sed"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -iname Regex          | xargs -I {} grep Regex {}          Regex     "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -mmin -Quantity       | xargs -r -I {} ls -l {}    "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} \\;    | awk Program        =  \"*exec echo Regex \\;"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | xargs -I {} dirname {}     | awk Program          | sort  | uniq    "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files under Folder1 and change their owner to 'Tes' <|target|> find Path -type f -print0 | xargs -0 -I {} rm {}                   "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;    then remove it. <|target|> find Path -exec ls -l -r -"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;     | sort   in the current directory        \\( -type f -size +Size -exec ls -l -h {} \\;  \\)  "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and print their sizes and paths <|target|> find Path -type f -exec du -h -c {} +  | awk Program        | awk Program     "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number of lines <|target|> find Path -exec grep -n Regex {} + | wc -l     | sort | uniq | xargs -I {} wc -l {}"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This will be the first in a series of three consecutive files one at a time. <|target|> find Path -type f | xargs -I {} du -s -h {}  | sort | uniq -c | sort -n  | tail -n Quantity   | x"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'file' by modification time <|target|> find Path -newer File -and! -newer File        | xargs"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you want to continue? <|target|> find Path -type f -exec du -s -h {} \\; | sort -n -r  | head -n Quantity    | cut -d Regex -f Number   "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -print0 | xargs -0 -I {} echo {}  | xargs -0 -I {} ls -l {}      | tail - Quantity   | grep Regex    "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and remove them <|target|> find Path -mmin -Quantity -exec rm {} \\;      | sed Program             "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's home directory recursively that have not been modified in the last 10 days. <|target|> find Path -mtime +Timespan -print0 | xargs -0 -I {} cp {} File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users may not have read and execute privileges for their files, or at least they may not be required to. For each file on the system, the file must be executable. <|target|> find Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, the current directory has been modified to the current directory. <|target|> find Path -type f -mtime Timespan  -exec ls -l {} \\;   | tr -d Regex Regex    "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path \\( -path Regex -or -path Regex -or -path Regex \\) -type f     -print                | grep -v Regex    "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace all newlines with : in the output then remove the last : <|target|> find Path -name Regex -exec sed -i Program {} \\;  | tr -d Re"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and change their permission to 755 <|target|> find Path -perm Permission -print | xargs -I {} chmod Permission {}         "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -inum Quantity                | grep Regex          | tr Regex Regex"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -exec chmod Permission {} \\;    -print  | xargs -I {} chmod Permission {}      \\"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section in the current directory. <|target|> find Path -name Regex -exec wc -l {} +  | grep Regex | awk Program       | sort  | uniq  | wc -l   "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and names <|target|> find Path -exec dirname {} \\;    | grep Regex       | xargs -I {} dirname {}   "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> is a process that changes the state of the current shell to the environment of the current shell. <|target|> ps -A -o stat -P | grep -o -P Regex | grep -o -P Regex | grep -o -P Regex | tr Re"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each one. <|target|> find Path -name Regex -exec echo Regex {} \\;   | tr Regex Regex       | grep Re"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} +     | xargs -I {} chmod Permission {}        "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -s -t Regex {} \\;   | xargs -I {} grep -l Regex {}           Regex            "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question in all.java files from the current directory tree <|target|> find Path -name Regex -type f | xargs -I {} grep -E Regex {}   | sort  | grep -E -v Regex      | cut"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the current month, the current UTC date is set to the date at which the epoch (in Unix epoch) is specified. <|target|> date -u -I -d Regex      +   date -u -I -d Re"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were modified more than 30 minitues ago <|target|> find Path -mmin +Quantity -print0 | xargs -0 -I {} sed -i Program {} "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and below that are greater than 100M and print their sizes and names. <|target|> find Path -size +Size -exec ls -l -h {} +    | aw"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tail -f File           | tee File                      | xargs -I {} -I {} gun -t trace {}  "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;   | grep Regex       | cut -d Re"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | xargs -I {} bzip2 {}       | tee File          "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /usr directory that are owned by the user 'tom' <|target|> find Path -user Regex -execdir pwd \\;     | sort  | uniq  |"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and create a single tar archive of their full paths <|target|> find Path -type f -name Regex -exec tar -r -v -f File {} \\;   | grep -E"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to delete all the regular files from the current directory which have not been accessed in the last 30 days. <|target|> find Path -type f -atime +Timespan -exec rm {} \\;     | grep Regex   "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> or | sed Program File         =  \"*([0-9]*\" )  [0-9]*  | grep -E Regex        | tr Regex Regex "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -name Regex       | sed Program          | tr Regex  "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} \\;         ch"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   -print    | xargs"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>fn <|target|> Find all files in the current directory and its sub-directories that do not match the pattern '\\(cannot be a symbol|target of the pattern '\\|default)\\\" <|target"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all directories under current directory and change their permissions to 644. <|target|> find Path -type d -exec chmod Permission {} \\;     | tr Regex      |"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | awk Program Program  and  create an archive (file.tar) of the last two files. <|target|> find Path -size Size -size Size -exec tar -r -f File {} \\; "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since Perl is a shell, it is possible to set the variable \"PREFIX\" to the full path of the command \"oracle\" <|target|> which Regex  (print0 | xargs -0 -"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -exec basename {} Regex \\;    | xargs -I {} ls -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file/directory 'tobeexclude' <|target|> find Path! -newer File -print    "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for'mykeyword' in all regular files under current directory <|target|> find Path -type f -exec grep -i Regex {} \\; -exec file {} \\;  | tr -s Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -maxdepth Quantity -name Regex -mmin +Quantity -type f -delete  -type f -delete         Path Path Path -maxdepth Quantity -mmin +Quantity -"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File            | cpio -p -d Regex             ssh   "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have only the word \"kt\" in their name <|target|> find Path -name Regex  -print0 | xargs -0 -I {}"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -exec ls -l {} \\;  | sed Program  "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than \"file\" by modification time <|target|> find Path -newer File! -newer File -"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the last 10 lines of the output <|target|> find Path | tail - Quantity | xargs -I {} tail"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to get domain name for each file in the current directory. <|target|> find Path -type f | grep Regex | xargs -I {} dirname {} | grep Regex  | cut"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -or -name Regex -or -name Regex    | wc -l       | grep Regex "
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> any line that is not a line and does not appear in the other. <|target|> sort <( uniq -u) <( tac File | grep -v Regex ) <( tac"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you have read all the files in the current directory and that are not going to the directory specified by the variable \"PATH\" <|target|> find Path -name Regex! -path"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec sed -i Program {} \\;   | tr Regex"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target of multiple commands <|target|> find Path -name Regex -exec ls -l -r -t {} \\;   | awk Program      | tr Regex Regex         | grep -v Regex"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec basename {} Regex \\;   | grep Regex          | xargs -I {} dirname {}  "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without descending into directories that are not readable by all <|target|> find Path! Path -prune -or -name Regex -or -name Regex      | grep -v Regex "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file \"file\" that is not in the other sections. <|target|> find Path -maxdepth Quantity -type f -name Regex -exec basename {} \\; | sort -u   | awk Program      "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names <|target|> find Path -type f | xargs -I {} basename {}   | grep Regex       | xargs -I {} readlink -f {}   "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec rm {} \\;      | grep Regex       | tr -d Regex         | xargs -"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex        | xargs -I {} find {} -maxdepth Quantity -type f       | grep -v Regex "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f | xargs -I {} grep Regex {}     | grep -v Regex         | xargs -I {} grep -E Regex {}               "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their file information <|target|> find Path -exec file {} +  | grep Regex    | cut -d Regex -f Number      | xargs -I {} file"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory tree that were modified less than 60 minutes ago <|target|> find Path -mmin -Quantity -type f -name Regex     | grep -v Regex      | tr -s"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the file names <|target|> find Path -execdir echo Regex \\;  | xargs -I {} ls -l {}   | sort  | uniq  "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, every command in the current shell must be followed by one of the commands \"oracle\" <|target|> which -a Regex   -e Regex       | sed Program     | grep Re"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      | xargs -I {} chmod Permission {}"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that were modified in the last 90 minutes <|target|> find Path -mmin -Quantity \\(! -name Regex -or -name Regex \\)     | grep Regex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;       | grep Regex      "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                           Directory           rename Regex         "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and all its subdirectories. <|target|> find Path -type d -exec rmdir -v -p --ignore-fail-on-non-existing-dirs         "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -type f -name Regex          | xargs -I {} dirname"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and parent directory paths <|target|> find Path -exec echo Regex {} Regex \\;    | tr Regex Regex      | tr Re"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;     | xargs -I {} chmod Permission {}"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100000 bytes in size <|target|> find Path -size +Size -exec ls -l -h {} \\; | tr -d Regex         "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths <|target|> find Path -exec echo -n Regex \\; -exec touch {} \\;    | tr -d Regex      "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them one by one. <|target|> find Path -type f -exec echo Regex {} \\;  | tr Regex               "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( cat File )    | ssh -t nginx master            ( echo Regex )         ( echo Regex )               "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -l -S -h {} \\; | awk Program       | sed Program   "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -execdir mv {} File \\;      | ssh       at  $HOME        "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their owner to \"Camsoft\" <|target|> find Path -type f -not -name Regex -print0 | xargs -0 -I {} chown Regex {}       "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $x directory and print a colon separated list of them <|target|> find Path -type f -exec echo {} Regex {} \\; -or -exec chmod Permission {} \\;      "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      | grep Regex    | tr Regex "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -1 | awk Program Program | xargs -I {} wc -l {}               | tr -c -d Regex               | wc "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source <|> Find all files and directories in the current directory and their subdirectories and count the number of lines that can be found only once per each line. <|target|> find Path -type f -exec w"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> both files to the same directory in each one. <|target|> find Path -type f -name Regex -exec echo Regex {} +    | tr Regex Regex        | grep"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f | sed Program | xargs -I {} du -h --files {}    "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Sort and compare each entry in \"files\" with the number of occurrences and print the result. <|target|> sort -n -c -r -k Number File | uniq | tr Regex Regex     "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively that have not been modified in the last 30 minutes and delete them. <|target|> find Path -mmin +Quantity -type f -exec rm {}"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;      | awk"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +    Path        | x"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the file names <|target|> find Path -mmin -Quantity | xargs -I {} ls -l {}    | sort  |"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nSince the beginning of time, Unix saves the day of the first Tuesday in month to the variable 'first Tuesday in January' <|target|> set -o first Tuesday in January, 1 month later than any other day of the month"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -s Regex {} \\;  -print   | grep -i Regex           | xargs -I {} grep -l Regex {}"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of files that have identical permissions for all users. <|target|> find Path -perm Permission -type f -exec ls -l File {} \\;  | awk -F Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively that have not been accessed in the last 30 days <|target|> find Path -atime +Timespan -ok rm {} \\; "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -type f     | grep -v Regex         | sed Program           "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> cat <( sed Program File ) <( grep -o Program File )      | awk"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the files they are in <|target|> find Path -depth -name Regex -exec bzip2 {} +  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's first 100 jobs created jobs list from /tmp/ and /tmp/data files. <|target|> find Path -type f -exec basename {} Regex \\; -exec echo {} + | grep Re"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace every occurrences of'subdomainA.example.com' with'subdomainB.example.com' in those files <|target|> find Path -"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> list of all regular files which have been modified in the last 10 minutes. <|target|> find Path -type f -mmin -Quantity -name Regex -exec ls -l {} \\;   | aw"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path Path -type f -exec chmod Permission {} \\;             | awk -F Regex Program       "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex       | grep Regex        | tr Regex Regex            | cut -d Regex -f"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /usr/local/tmp and change their permissions to 755 <|target|> find Path -exec chmod Permission {} +     -Permission {} \\;  | tr -d Regex    "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Home directory which are larger than 100M and less than 100M <|target|> find Path -size +Size -size -Size       | grep Regex     | tr Regex Regex   "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;    | sed Program          | xargs -I"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to the console <|target|> find Path -exec echo Regex \\;     | grep Regex         | xargs -I {} echo Regex {}"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print their pathnames <|target|> find Path -size +Size -exec ls -l -h {} \\;      | awk Program        | cut -d Regex -f Number "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them as they are read <|target|> find Path -print0 | xargs -0 -I {} ls -l {}   | wc -l      | grep Regex  "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The file system contains a directory structure called \"less\" that is located in the user's home directory. <|source|> find Path -type f -name Regex -exec echo Regex {} + Path        | grep Regex     | xargs"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex            | grep -E -o -e Regex         {}  | xargs              Regex     "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> It is the job of every user to create a directory named \"~/Desktop\" in the user's home directory. <|target|> find Path -type d -name Regex -exec mkdir Directory \\;      then create a directory named \"~/Desktop\" in"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;      Path          | xargs -I {} chmod Permission {}  "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> The current directory is the directory where the last slash-separated section of variable \"dir\" is located. <|target|> find Path -maxdepth Quantity -size Size -type f -execdir echo Regex \\;  | tr -d Regex"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, every user on the system must be logged in on host \"your.other.other.host\" <|target|> who | awk Program | cut -d Regex -f Number   | sort  | sed Program "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex      -type f -user Regex        -exec wp {} \\;            "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory where the file \"test/90D\" is located. <|target|> find Path -maxdepth Quantity Path -amin Quantity -type f -execdir sleep Timespan {} \\;    | awk -F Re"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -not -newermt Regex            | xargs -I {} ls -l {}    "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory that contains the current directory. <|target|> find Path -maxdepth Quantity -type d -exec rsync -a -v -e File File           | sed Program   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>console | sed Program File       | grep Regex      | sort  | uniq | wc        | sort   | uniq   | tr Regex     "
    }
  ],
  "18.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than $1 and delete them <|target|> find Path -newer File -print  | xargs -I {} rm {}         "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                         | read -r -p Regex              "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the names of the directories that match the regex '.[0-9]*' <|target|> find Path -regex Regex -execdir echo Regex {} \\;"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file/directory_1 and delete them <|target|> find Path -not -newer File -exec rm {} \\;    | grep Regex "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list files in the current directory and below that have not been accessed in over 90 days. <|target|> find Path -type f -not -atime +Timespan -exec ls -l {} \\;    | awk Program   "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not the same file system as the current directory <|target|> find Path! -samefile Regex         | grep Regex       | x"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file/directory in their names <|target|> find Path -newer File          | awk Program     "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -print0 | xargs -0 -I {} wc -l {} | grep -E -v Regex | aw"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec rm {} \\;    | wc -l        | tail        | grep Regex"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path! -name Regex -exec echo {} +      | tr Regex Regex         "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -iname Regex -type f -exec mv {} File \\;          -exec mv File File \\;      -exec ls -l {} \\;      -exec sh -"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under /home/d directory that were last accessed more than 7 days ago <|target|> find Path Path -atime +Timespan -type f -exec ls -l {} \\;   | grep Regex        |"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail       | head           | tail          | xargs -n Quantity -I {} grep -n Regex {}      "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names <|target|> find Path -type f -exec echo {} \\;  | awk Program             | grep Regex          "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file \"file\" that is not in the directory \"1\" and does not have the \"dir\" suffix. <|target|> find Path -name Regex -type f -not -path Regex -exec basename {} \\; | awk Program "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;     (tgt=r,gid=null)    (kpt=r,gid"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that are larger than 100000 bytes in size <|target|> find Path -size +Size -print       | xargs -I {} ls -l {}    | awk Program   "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were modified in the last 24 hours <|target|> find Path -mtime -Timespan -print      | grep Regex        | cut -d Regex -f Number"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type f -name Regex -mtime +Timespan   | xargs -I {} rm -f {}                |"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the line containing the file path <|target|> find Path -execdir grep -l Regex {} \\;   | grep -i -v Regex           "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in the current directory as a comma separated list <|target|> find Path -perm Permission -exec echo {} \\;  | tr Regex Regex          | tr Regex Regex"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 100 megabytes in size <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;    | awk Program       ( sort  )    |"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '<fileName>' in their paths and copy them to /tmp/backup <|target|> find Path -name Regex -exec cp {} File \\;   | tr Regex Regex   "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -links Quantity -print  \"  \"  \"  \"     | grep -E -o Regex       \"  \"     \"   \"  "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file of the week is under the name \"ports\" <|source|> find Path -iname Regex -type f -printf \"%P\\n\" | sort | uniq -c | grep -i -v Regex       | cut -d Regex -f"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under Folder1 and copy them to Folder2 <|target|> find Path -type f -exec cp {} File \\; -exec dirname {} \\;     | sed Program              "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting network has been cut off from the public domain for more than 10 days. <|target|> find Path -type f -atime +Timespan -exec grep Regex {} \\;  | awk Program         | tr Regex Regex"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown Regex File -R      File            /home/me/test/my_command            /home/test/my_command            "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -a {} +     | awk Program         | sed Program          "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest jobs source has been found, but not by name. <|source|> find Path -type f -name Regex -exec ls -l {} \\;  | awk Program       | sort    | awk Program      | sort  "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file /tmp/t <|target|> find Path -newer File -print         | xargs -I {} rm {}           "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                 | grep Regex                   |    grep Regex            "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive process that removes all files from the current directory tree but a small number of files. <|target|> find Path -type f -exec sed Program {} + | grep Regex | xargs -I {} ls -l {}  | tail -n Quantity      "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex                    -print              | xargs -I {} grep -i Regex {}            "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec ln -s -t File {} + | wc -l     | grep Regex      | cut -d Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are greater than 100000 bytes in size <|target|> find Path -size +Size -print          | xargs -I {} du -h {}      "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named'sar' under current directory <|target|> find Path -name Regex -exec gzip -v {} \\;   | awk Program                   |"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} +     -print      | xargs -I {} mv {} File   "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and print their path and owner <|> find Path -mount -xdev -type f -exec ls -l {} \\;         | awk Program    for each file or directory found"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory tree that are not readable by anyone <|target|> find Path -type f! -perm -Permission -print   \"*Checking for Permission* <( true ) \" \"  \" | awk Program  \""
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest source of raw files for the past 30 weeks have been accessed from within the home directory, but the files are not in the directory's full path. <|source|> find Path -path Regex -type d -and -atime +Timespan -exec"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them matching regular expression '\\.php' <|target|> find Path -maxdepth Quantity -exec grep -E Regex {} + | wc -l   "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex         | tr Regex Regex         | sed Program       "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +    -exec chmod Permission {} +   | sed Program     "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the names of the files they are in <|target|> find Path -type f -exec chmod Permission {} \\;     | xargs -I {} chmod Permission {}  "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/tmp directory and change their owner to the current user <|target|> find Path -user Regex -execdir chown Regex {} \\;   | sed Program    "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the last entry from the output <|target|> find Path -maxdepth Quantity -exec sed -i Program {} +      | tail       | xargs"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is an extension of the standard input, and prints only the file name. <|target|> find Path -type f | sed Program | awk Program   | awk Program   | sed Program            "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -name Regex | xargs -I {} du -h {} | awk Program         "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -a -v -z -e File File                    | cpio -p -v -e Regex             "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec basename {} \\;   | awk Program        | tr -d Regex"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> are two separate files <|target|> find Path -type f -exec echo Regex Regex Regex Regex {} +   | tr Regex Regex       | cut -d Regex -f Number    | tr"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;       tar -c -f File                       "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and owner names <|target|> find Path -execdir echo Regex Regex Regex \\;   | tr Regex Regex       "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that match the regex '<title>' in their paths <|target|> find Path -type f -name Regex -exec grep Regex {} +  | grep Regex    | cut -"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common file in the current directory and below. <|target|> find Path -iname Regex -exec echo Regex Regex Regex {} +     | tr Regex Regex       | tr Regex"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames (without the full paths) <|target|> find Path -print0 | xargs -0 -I {} grep -E Regex {}    "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'file.dat' in regards of modification time <|target|> find Path -newer File -or -name Regex      | sort  | x"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose names begin with \"file\" and count the number of lines in them. <|target|> find Path -name Regex -exec grep -l Regex {} + | wc -l   |"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;         chmod Permission File "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files from the current directory tree that were modified less than 60 minutes ago. <|target|> find Path -mmin -Quantity -type f -exec ls -l {} \\;  | awk Program      | sort  | uniq -"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are larger than 10MB in size <|target|> find Path -size +Size -iname Regex              | xargs -I {} ls -l"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}            | xargs -0 -I {} rm -i -d {}             "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in one line to the console and append to document file /path/to/output/file.tar <|target|> find Path -print0 | xargs -0 -I {} tar -c -z -"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} awk Program {}         | grep Regex           | awk Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that were last modified more than 7 days ago and search for \"pattern\" in those files and display the unique matches <|target|> find Path -mtime +Timespan -type f | xargs -I {} grep -i"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's equal parts jobs with or without the first two omissions. <|target|> find Path -maxdepth Quantity -type f! -name Regex -exec mv {} File \\;    | grep Regex     | tr Regex Regex    "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'foo' under current directory tree <|target|> find Path -name Regex        | xargs -I {} find {} -mtime -Timespan  | grep Regex      "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path! -newer File         | sed Program       | grep Regex         | tr Regex Regex "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;    | xargs -I {} chmod Permission {}         | x"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null character as the delimiter <|target|> find Path -print0               "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;      | sed Program"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec ls -l -r -t {} + | awk Program         | xargs -I {} ls -l -r -t {}  "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that match the regex \".*/tmp/test/*\" in their paths and copy them to /tmp/test/ <|target|> find Path -type f -regex Re"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for all the files in the current directory and sub-directories, and to remove them <|target|> find Path -maxdepth Quantity -exec echo Regex Regex {} +  | xargs -I {} rm {}"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -name Regex -exec basename {} Regex \\;      | tr Regex Re"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the line containing \"file1\" <|target|> find Path -exec sed -i Program {} \\;   | grep Regex   |"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -xdev -name Regex -type f -mtime +Timespan -exec bzip2 -z -v {} \\;   | awk Program             "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> list of regular files which have permissions to 750 <|target|> find Path -type f -perm Permission -exec ls -l {} \\; | tr Regex Regex        | grep Regex "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -exec echo Regex Regex Regex {} +    | sort "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than 'filename.txt' by modification time <|target|> find Path -maxdepth Quantity -type f! -newer File -print        | grep Regex  "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /dir that are not regular files and do not contain \"passwd\" on their side. <|target|> find Path -type f! -name Regex! -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and count their lines <|target|> find Path -exec sed Program {} +  | wc -l    | awk Program         | grep Regex   "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files under current directory that are not regular files and whose names do not end in \".c\" or \".h\" <|target|> find Path -type f! -name Regex! -name Regex -print0 | xargs -I {} echo Regex Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than '_file' by modification time <|target|> find Path -newer File -print  | xargs -I {} rm -r -f {}         "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      | grep Regex        | sed Program"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort  | less      | x          | xargs -I {} ls -l -S -h {}       "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} + | awk Program      ( sort -u )   | grep Regex      |"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $DIR directory tree that match the regex '\\(c\\|h\\|cpp\\)' in their paths <|target|> find Path -regex Regex  | tr Regex Regex     | cut -"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} \\;   | wc -l       | awk Program      "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files under current directory and count their lines. <|target|> find Path -type f -mmin -Quantity | xargs -I {} wc -l {}   | awk Program     "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (GNU) Program Files | grep Regex | sed Program | cut -d Regex -f Number | sort | uniq  | xargs -I {} wc -l {}        | sort  | tail - Quantity  |"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure? (Y/N) <|source|> find Path -type f -exec echo Regex Regex Regex {} +    | tr Regex Regex        | grep Regex     "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Find all files/directories under current directory and run msgs to make directory \"/workspace\" <|target|> find Path -mmin -Quantity -exec mv {} File \\;       | grep Regex     "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -execdir echo Regex {} Path           | xargs -I {} cp File {}  "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only their paths <|target|> find Path -exec cp {} File \\;     | sed Program              | grep"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file system is at home. <|source|> find Path -iname Regex -mtime Timespan -exec ls -l {} \\;   | grep Regex     | cut -d Regex -f Number  "
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f Path -name Regex -or -name Regex                   | grep Regex                 "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without going into subdirectories <|target|> find Path -maxdepth Quantity -name Regex        | xargs -I {} grep Regex {}   "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is a copy of the current working directory. <|target|> find Path -type d -exec echo Regex Regex {} + Path         | xargs -I {} cp -a {} File     "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a shell that is an implicit user interface for the command \"nano\" with no user interaction. <|target|> find Path -inum Quantity -exec grep -i Regex {} \\;  | grep -i Regex       | grep Re"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them one by one. <|target|> find Path -mmin Quantity -print0         | xargs -0 -I {} ls -l {}    "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -perm Permission -exec ls -l {} \\;  | awk Program        | grep -E -v"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 small files named \"file1\" and \"file2\" with a name starting with a number, and using a numeric suffix to separate the two files. <|target|> join -d Regex -a Quantity -e -o File File"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex 'filename' in their paths and show the matched lines along with their timestamps and filepaths <|target|> find Path -regex Regex -exec bash -s -t File"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '<filetype>.*<filetype>' in their paths <|target|> find Path -name Regex -or -name Regex -exec grep -l Regex {} \\"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of three smaller files. <|target|> find Path -type f -exec ls -l -t {} + | awk Program      | sort  | uniq    | sort    | awk Program "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -exec grep -i Regex {} File \\; -exec grep -i Regex {} \\;    | sed -n Program                 | xargs -I {} grep -i"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than /bin/bash and older than /bin/bash <|target|> find Path -newer File -and -not -newer File       | xargs -I"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Search for the regex 'foo' in all files in the current directory tree and display the matched files and the file names <|target|> find Path -exec grep -H Regex {} \\;   | grep Regex      | awk Program   "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} +    | awk Program        | xargs -I"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> will replace the word \"foo\" with \"yob\" in the current shell. <|target|> source <( sed Program )     | awk Program     | grep Regex       | sed Program "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File          /sys/kernel/debug/tracelog.txt          (root)         /sys/kernel/debug/tracct"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are newer than \u2018$time_comment.txt\" and older than \u2018$time_comment.txt\" <|target|> find Path -type f -newer File -"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'file' by modification time or owned by user 'warwick' <|target|> find Path -newer File -user Regex -print  | xargs -"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $newerthan and delete them <|target|> find Path -type f! -newer File -exec rm {} +   | sed Program    "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file/directory entry in their names <|target|> find Path -type f -not -newer File! -name Regex   | xargs -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -newermt Regex! -name Regex -print         | grep Regex      | sed Program       "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory <|target|> find Path -exec ls -l {} \\;   | awk Program  for    <( ls File )              |"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print \"deb http://download. <|target|> find Path Path -mtime Timespan -printf '%T@ %p\\n'     Print the current directory's disk usage and the file name <|target|> du -s"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /tmp/test/ (directories with GIT) and run them through the in-between files, creating empty files with only spaces and directories instead of full paths. <"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the pathnames of their parent directories <|target|> find Path -name Regex -or -path Regex -prune -or -print"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> and Save the current date and time formatted in the format \"%Y-%m-%d %H:%M:%S\" <|target|> date +%Y-%m-%d %H:"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This will be the first line of the pipeline that is passed as argument to the pipeline. <|target|> set Regex Regex Regex Regex Regex             "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that have been modified in the last 24 hours. <|target|> find Path -mtime Timespan -type f -exec ls -l {} \\; "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and search for a word in them. <|target|> find Path -name Regex | xargs -I {} grep -i -l Regex {}     | grep"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [^=]*_ with case insensitive pattern '<stringWithcase>' <|target|> find Path -iname Regex -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose name is \"MyProgram\" and display the file names and the lines matching <|target|> find Path -type f -exec sed -i Program {} \\; "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> To create directories in the current directory tree for all users to which user has full access <|target|> find Path -user Regex -type d -exec echo Regex Regex {} +      | x"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -mmin +Quantity -delete  -type f -exec rm {} \\;       | grep Regex   -e Regex"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File                      | docker -m Regex         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> or Print the list of all regular files from the current directory tree <|target|> find Path -type f -exec ls -l {} \\;  | awk Program      "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec ls -l -r -s {} \\; |"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user \"dalvarado\" <|target|> find Path -user Regex -execdir chown Re"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex Regex {} Path  "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command with the environment variable \"~/tmp\" <|target|> find Path -iname Regex -exec"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec grep -H -n Regex {} + | wc -l    | grep -E -E -m Quantity"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Print the current directory name without the last two extensions. <|target|> echo Regex | rev | cut -d Regex -f Number | rev     "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex  -print     | xargs -I {} grep Regex {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the last line of the file 'file' in the current directory <|target|> tail -n +Quantity File | awk Program  | grep Regex   "
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>: A variable with defined path <|target|> ls -l -d -R File         | tr Regex Regex         | sed Program            | tr Regex Re"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top-ten list of top-ten list of top-ten list of all top-ten list of all top-ten list of all top-ten list of all top-ten list of all top-ten list of all top-ten list of all top-ten list of all"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} Regex \\;     (cannot)  executable              (cannot)"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir directory <|target|> find Path -f -type f -exec ls -l File \\;    | sort | uniq -c   | grep -n  | awk Program"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second line of the file \"file\" <|target|> find Path -type f -name Regex -exec readlink -n {} + | sed Program    | sed Program     | awk Program       ( sort -n"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest gun shop is in the process of reviving its owner. <|source|> find Path -type f -exec basename {} Regex \\; -exec rm {} \\;      | rev | cut -d Regex -f Number    |"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec wc -l {} \\; | wc -l   | grep Regex | awk Program      | sed"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep Regex | xargs -I {} grep -r Regex {}         | grep -v Regex                         | xargs -"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in-depth explanation of how a regular file like \"*.log\" works. <|source|> find Path -type f -name Regex -print0 | xargs -0 -I {} grep -l Regex {}       | head -"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named \"file.ext\" in the current directory and below <|target|> find Path -name Regex -type f -print     | xargs -I {} ls -l -d {}   | grep Re"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type f -mtime Timespan -exec mv {} File \\;           | xargs -I {} mv {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not directories and do not match the regex '<script type=\"text\" on the file> <|target|> find Path -name Regex -prune -or -not -name"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> a.out, *.o, *.o, *.cc, *.in, *.so, *.cc, *.so, *.etc, <|target|> find Path -iname Regex -or -iname Regex -or -iname Regex -or"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, Emacs has always been the default editor for all files and directories under the current directory. <|target|> find Path -type f -exec ls -l {} \\;      | awk Program      "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'document' in the current directory tree <|target|> find Path -name Regex      | sed Program          | tr Regex Regex  "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln File Regex                 | ssh Regex              | ssh -i File             "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This command find command is for each file in the current directory and subdirectories. <|target|> find Path -type f -empty -exec rm -r -f {} \\;      | xargs -I {} rmdir {}  "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the path names of the directories they are in <|target|> find Path -type f -mtime -Timespan        | sed Program     "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l -d {} \\;    | awk Program        | sed Program  "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and take them to index /tmp/test/ <|target|> find Path -type f -perm Permission -exec ls -l {} \\; | tr Regex Regex | xargs -0 -I"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the list of all files and directories of the current directory <|target|> find Path -exec sed Program {} \\;        | tr Regex Regex        | sed Program     "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex        | xargs -I {} grep Regex {}                | x"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( pstree -s -A Regex | awk -F Regex Program )          | sed Program        | sed -n Program             | sh "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex      | awk Program          | sed Program        | sort"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files under current directory tree <|target|> find Path -type f -exec echo Regex {} \\;       | xargs -I {} dirname {}          "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;    | wc -l           Regex  "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'has world write permissions' in their paths <|target|> find Path -type f -perm -Permission  | grep Regex       | tr Regex Re"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 100M and print their names and sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program       | sed"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -1 File | xargs -I {} wc -l {}  | awk Program             | sort  | uniq         | cut -d Regex -f Number    "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the output on stdout <|target|> find Path -print0 | xargs -0 -I {} echo Regex Regex {}    "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec grep Regex {} \\;   | grep Regex          | cut -d Regex -f Number   "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     | xargs -I {} chmod"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the directories in directories taken from the glob pattern /tmp/dir/* and remove them <|target|> find Path -type d -mtime Timespan -execdir echo Regex Regex Regex {} + "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -name Regex -exec dirname {} \\;      | grep"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec ls -l -d {} \\; | wc -l    | aw"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex '.*/tmp/test*' in their paths and modify them in-place <|target|> find Path -maxdepth Quantity -type f"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their sizes and paths <|target|> find Path -exec ls -s {} +  | awk Program        | awk"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;         | grep -v Regex           | grep -v Regex "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with valid URLs and their timestamps and ownership <|target|> find Path -uid Regex -print0 | xargs -0 -I {} ls -1"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} \\;  | tr Regex Regex        "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print their names and the file paths <|target|> find Path -exec echo Regex Regex Regex Regex Regex    "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files under current directory and replace all newlines with : (colon) in the output <|target|> find Path -type f -exec sed -i Program {} +  | tail -n Quantity | cut"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program | grep Regex | sed Program       | grep Regex      | tr Regex Regex      | xargs -0 -"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | awk Program   "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to end user name (whoever runs the script) <|target|> ps -e -i File | grep Regex | awk Program             | grep Regex"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to which users can update their permissions. <|target|> find Path -type f -exec chmod Permission {} +  | split -d -l Quantity           | aw"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path -type f -exec chmod Permission {} \\;   | xargs -I {} chmod Permission {}               "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex Regex       | tr Regex Regex      | cut -d Regex -f Number     | tr Regex Regex    "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $1 which match the regex '->get(\\|#hyphenate' in their names <|target|> find Path -type f -name Regex -exec grep -i Regex {} \\;  | sed Program  "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Home directory that are owned by user tommye and change their owner to the user tommye <|target|> find Path -user Regex -exec chown Regex {} \\;      then change the user to the"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, every cron job in the current directory must be assigned to be \"program\". <|target|> crontab -l | grep Regex | awk Program     | crontab -l          | tr"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex {} \\;   | grep Regex       | tr Regex Regex         | x"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of files and directories that are empty. <|target|> find Path -empty -exec ls -l {} \\;    | awk Program         | xargs -I {} ls -d {}       "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep -n Regex {} + | wc -l    | awk Program      | wc -l "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $newerthan and delete them <|target|> find Path -type f -not -iwholename Regex -print0 | xargs -0 -I {} rm -f {}  "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex       -regex Regex        | xargs  -I {} echo Regex Regex {}                       "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> A shell with indication of a shell's function. <|target|> set -e -gid Regex           | grep Regex      | xargs -I {} chmod Permission {}        "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and subdirectories that have not been accessed in the last 10 min <|target|> find Path -type f -atime +Timespan -print0 | xargs -0 -I {} ls -l {}        |"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generate a tar.txt file of all the files in the current directory and sub-directories that have been modified in the last 180 days. <|target|> find Path -maxdepth Quantity -type f -name Regex -mtime -Timespan"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user'me' <|target|> find Path -user Regex -iname Regex -exec rm -r -f {} \\;     "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -type f -atime -Timespan       -user Regex      -exec echo Regex {} \\;       -exec rm {} \\;    "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -amin -Quantity -exec chmod Permission {} \\;    ( echo Regex )      "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex provided by the variable $filename <|target|> find Path -name Regex -prune  -or -name Regex -print     | grep Re"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print only the line matching lines from the output <|target|> find Path -exec sed Program {} \\;  | grep -o -E Regex        "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only their names <|target|> find Path -exec basename {} \\; | sort -u  | cut -d Regex -f Number       |"
    }
  ],
  "19.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the year, the directory tree \"dirname\" contains a list of files and directories owned by users known as \"friends\" and group \"users\" <|target|> find Path -name Regex -prune -or -user Regex -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -n Quantity Regex                  Regex                     Regex      "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that contain'some text' in their names <|target|> find Path -name Regex | xargs -I {} grep Regex {}  | grep Regex   | awk"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec grep -l Regex {} + | wc -l    | grep -o  Regex "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print their names and the file paths (without containing directories) <|target|> find Path -name Regex -exec echo Regex Regex {} + Path       "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are less than 50 bytes in size <|target|> find Path -size -Size -Size     -print      | xargs -I {} grep -I"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of the largest files in the current directory and its subdirectories. <|target|> find Path -type f -exec ls -a -l {} + | sort -n -r | head -n Quantity | awk Program  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nfind all the files in the current directory and sub-directories whose names begin with \"app\", and search for \"foo\" in those files and display the matched lines along with the file names <|target|> find Path -name Regex | xargs -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -maxdepth Quantity -name Regex  | tail  | xargs -I {} ls -l {}     | tail -n Quantity   "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the case insensitive regex '.*/[a-f0F0F][0-9F]\\{36\\}' in their paths <|target|> find Path -ire"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;     -exec mv {} File \\;             | xargs -I {} -I {} -I {} -I {}"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f -mtime Timespan    | tr Regex Regex       | cut -d Regex -f Number     "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail       | tail -n Quantity       | head -n Quantity           | xargs -I {} grep -F Regex {}    | tail -"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 10 megabytes in size <|target|> find Path -size +Size   -print         | xargs -I {} ls -l -d {}   "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting vendor, Regex, has been forced to change its login name to 'Username'. <|target|> find Path -name Regex -exec mv {} File \\;   | grep Regex      | tr Regex Regex "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> most recent files to delete, sort and display the last 10 lines of the file. <|target|> find Path -type f -exec sed -i Program {} File \\; | sort -n | tail - Quantity | cut -f Number -d Regex -s -%p | awk"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /usr/share/doc and sort them <|target|> find Path -perm Permission | sort   | head      | xargs -I {} sort -u  | xargs -I {} sort -u"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -exec grep Regex {} + | wc -l   | sort | tail -n Quantity  | cut -d Regex -f Number   | grep Re"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -type f -exec wc -l {} +  | sort | uniq -c  | grep -v Regex    | sed Program    |"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'file' <|target|> find Path! -newer File -print      | xargs -I {} gunzip {}       | xargs"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file '2009.doc' by modification time <|target|> find Path -newer File -print  | xargs -I {} chmod -R Permission {}        | x"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since its creation in the second world, the name \"date\" has been changed to \"2015-08-25\" <|target|> find Path -type f -exec sed Program {} +  | sed Program     \\;   | awk Program       ?"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths <|target|> find Path -path Regex -type f -printf \"%T@ %p\\n\" | tr Regex Regex       | sed Program    "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -links Quantity -print0       | sed Program          | grep Regex          | tr Re"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100 MB in size <|target|> find Path -size +Size -exec ls -l -s {} \\;  | awk Program      ( sort )  | grep -E -E Regex"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file $newerthan and print the timestamps of the files/directories <|target|> find Path -type f -name Regex -printf \"%T+\\n\"    | sort "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and run the sed command with options specified in the file arguments specified in the file <|target|> find Path -fprint0 | xargs -0 -I {} find {} -name Regex -exec sed Program {} \\; "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File           directory /data/data/mongodb        /path/to/mongodb/ <( ls File )       /path/to/other/path    "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest gun shop, Gunsmith's, is in the process of revising its files. <|source|> find Path -type f -name Regex -print0 | xargs -0 -I {} rev File {}       | rev | cut -d Regex -f Number"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /path/to/dir/ that match the regex \"filename\" in their paths <|target|> find Path -path Regex | sort -r      | grep Regex       | cut -d Regex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -execdir echo Regex Regex {} \\;   | tr Regex Regex         | xargs -I {} find {} Path -print "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                      grep Regex               search    for directories   './home/ABCD/BACKUP' "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under Folder1 and copy them to Folder1 <|target|> find Path -type f -exec cp {} File \\; -exec mv {} File \\;   | xargs -I {} grep Regex {}   | xargs -I {} cp File"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex  -print    | xargs -I {} grep -P -l Regex {}      | grep Regex               | xargs -I {} grep -I"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them matching regular expression <|target|> find Path -print0 | xargs -0 -I {} ln -s -f {} | wc -l    | grep -v Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files from the current directory tree that have been modified in the last 10 minutes. <|target|> find Path -type f -mmin -Quantity | xargs -I {} ls -l {}  | head -n Quantity        | xargs"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and were modified in the last 24 hours <|target|> find Path -size +Size -mtime Timespan -exec gzip -N {} \\;    then search for files/directories"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are greater than 100000 bytes in size <|target|> find Path -size +Size -size -Size | xargs -I {} mv {} File                |"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This command will be used to create a tar archive of all the regular files in the current directory tree that have been modified in the last 180 hours. <|target|> find Path -mtime -Timespan | xargs -I {} tar -c -z -f File {}      "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines matching the regex '<script type=\"text\\/javascript\" charset=\"utf-8\" src=\"file.js\"><\\/script>' from the beginning <|target|> find Path -user Regex -execdir"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -mindepth Quantity -execdir echo Regex {} \\;   | sed Program         | tr Regex Re"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -exec basename {} \\;   | tr Regex Regex       | tr Regex Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -name Regex -exec wc -l {} \\; | tr Regex Regex | sed Program      |"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the last 10 lines with the null character as the delimited second delimiter <|target|> find Path -type f -exec sed -i Program {} +  \"\\n\" | awk Program   "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, users with valid user and group id numbers in the /etc directory tree. <|target|> find Path -type f -user Regex -perm Permission -exec chmod Permission {} \\;    then print  \"./o"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that match the case insensitive regex \"ITM\" in their names <|target|> find Path -iregex Regex  -print | grep -i Regex  | cut -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -mindepth Quantity -exec chmod Permission {} \\;          | awk -F Re"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the directories in the current directory tree <|target|> find Path -type d -exec basename {} \\;   | tr -d Regex     | cut -d Regex -f Number   |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines <|target|> find Path -type f -exec grep -l Regex {} + | wc -l    | sort  in | sort  with a timeout of 0"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -R -i --exclude Regex File File          --include Regex         Prints lines that match \"exclude/path1\" but do not match \"exclude"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/Desktop directory <|target|> find Path -name Regex -exec grep -l Regex {} \\; | wc -l       | awk Program"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to quit? <|target|> echo Regex Regex Regex | sed Program        | tr Regex Regex | grep -E Regex    | tr Regex Regex    "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;      tar -c  File {} \\;                      "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -execdir echo {} +  | xargs -I {} ls -d -1 -s {}  | awk Program"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that match the regex /tmp/foo/bar and change their owner to admin <|target|> find Path -name Regex -execdir chown Regex {} \\;  -"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> or create a tarball of all the files in the current directory and sub-directories. <|target|> find Path -maxdepth Quantity -name Regex -exec tar -u -v -f File {} \\;   | awk -F Re"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them one by one. <|target|> find Path -print0  | xargs -0 -I {} echo {}  | tr Regex Regex      "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the first line of output of \"file1\" <|target|> cat File | sort | awk Program | head - Quantity | sort -k Number     | sed Program       | sort  "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -path Regex -exec basename {} \\;   | tr Regex Regex        "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and print their paths and parent paths <|target|> find Path -name Regex -exec echo Regex {} \\;   | xargs -I {} echo Regex {}  "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l -s {} + | awk Program      | sort  | uniq  | sed Program      | tr"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -name Regex -exec wc -l {} \\; | tail -n Quantity    | wc    | wc  "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print | xargs -I {} rm -r -f {}      {}        | xargs -I {} rm -r -f {}    {}            "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex {} \\; | awk Program            | tr Regex Regex        "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with the case insensitive pattern anaconda* in their paths under current directory <|target|> find Path -iname Regex | awk -F Regex Program       | sort  | awk -F Regex"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +    | xargs -I {} chmod Permission {}        | x"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} \\;    | grep Regex         | xargs -I {} chmod Permission {}"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'Nov' by modification time <|target|> find Path -newermt Regex! -newermt Regex -print      | xargs -I {} ls -"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -newer File        | xargs -I {} ls -l {}     | sed Program       | grep Regex   "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -execdir cat {} \\;  | uniq  | sed -e Program           | tr Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> may be useful to group users and others to which their group is not specified in the file <|target|> find Path -nouser -or -nogroup Regex -print0 | xargs -0 -I {} ch"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for a filename for all the files which have not been accessed in the last 30*24 hours. <|target|> find Path -atime +Timespan -exec file {} \\;   | grep Regex  "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec readlink File \\; -exec  \\; -print   | xargs -I {} readlink File {}            ( mk"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +        |"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -iname Regex -exec echo Regex Regex {} +       | tr Regex Regex           | grep"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|target|> find Path -name Regex -or -name Regex  -print        | xargs -I {} ls -l {}   | grep Regex      |"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the commands provided by replacing the current directory with the current user's home directory <|target|> find Path -mindepth Quantity -maxdepth Quantity -exec"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path Path -maxdepth Quantity -iname Regex -type f -not -atime +Timespan -exec bzip2 {} \\;         -exec echo {} \\;    "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} + Path -exec echo Regex {} +        | sort "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex -exec ls -l {} \\;  | sort  | uniq  | sed Program       | sed -e Program     "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are greater than 100MB in size <|target|> find Path -type f -size +Size   | grep Regex       | grep Regex       | x"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top two jobs are in the same order as they are in the current directory. <|target|> find Path -type f -mmin Quantity -execdir echo Regex Regex Regex {} +  | sort  | awk Program       | xargs"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec echo Regex Regex Regex Regex {} +     | sed Program       | sed Program         | grep Re"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory tree which have been modified in the last two minutes <|target|> find Path -mmin -Quantity -type f -printf '%M %u %g %s\\n'  | sort  in reverse order <("
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files under current directory that are greater than 50MB and less than 100MB in size <|target|> find Path -size +Size -size -Size -size -Size -exec rm -r -f {} \\;     Print  \"The"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, every command in the shell must be a symbolic link, and the command after it must be a symbolic link. <|target|> find Path -type l -exec ls -l {} \\;  | awk Program        | grep Re"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r     | cut -d Regex -f Number           | xargs -I {} ls -l {}   "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the last dot-separated field of each line in \"file\" <|target|> paste -d Regex File | rev | cut -c Number | rev   | cut -c Number       | rev      "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps <|target|> find Path -exec echo -n Regex \\;  | tr Regex Regex        | cut -c Number   | tr Regex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them. <|target|> find Path -type f -exec ls -s {} \\; | sort   in  single file or multiple file  files/directories   in  different locations  will be"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all files/directories named \"file1\" in the current directory tree and display the list of them <|target|> find Path -name Regex -ls   -or -name Regex -ls   -or -name Regex -"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This will normally only work with files with permissions 777.<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> andrewr@mzah.org to the terminal <|target|> find Path -type f -print0 | xargs -0 -I {} echo Regex Regex Regex {}  | xargs -0 -I {} echo Regex Regex"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $newerthan and delete them <|target|> find Path -type f! -newerthan -print | xargs -I {} rm -f {} ; "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'ian' <|target|> find Path -user Regex -print0 | xargs -0      | xargs -0   "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all files/directories under current directory and run a command to create a tarball of the last modified file or directory. <|target|> find Path -First \\( -name Regex -or -name Regex -or -name Regex \\) |"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -path Regex -prune -or -mtime Timespan   -print      | xargs -I {} dir"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path \\( -path Regex -or -path Regex \\) -prune -or -path Regex -prune \\)  -type f  -print           | xargs -I {} find Path Path"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you sure you want to continue? (Or are you just starting with the error message)? (Or are you sure you want to continue)? (Or are you just starting with the error message)? (or are you just starting with the help message"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that have not been accessed in the last 30 days or which are larger than 100 Kilobytes. <|target|> find Path -size +Size -atime +Timespan -print   \""
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second to last directory in the current directory. <|target|> find Path -inum Quantity | tail -n Quantity | xargs -I {} ls -l -d {}  | awk Program        | sort  | tail -n"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -mmin Quantity          | awk Program      | xargs -I {} ls -l {}  "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -name Regex -exec chmod Permission {} \\;    | wc -l       | grep Regex "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count their line numbers and show the last 10 lines of the output <|target|> find Path -type f -exec wc -l {} + | sort -n | tail - Quantity | cut -f Number | xargs"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   -print  | xargs -I {} chmod Permission {}      "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep Regex {} \\;   -print     | grep Regex          | tr Regex Regex          | tr Regex"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find it hard to find the right file for their current device. <|target|> find Path -xdev -type f -maxdepth Quantity | xargs -I {} touch {}         | xargs -I {} ls -l {} "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -n -i Regex {} \\;  | sort       | cut -d Regex -f Number      | sort    | uniq       "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec cat {} \\; -print  | xargs -I {} cat {}  | grep Regex      | more "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory of the file whose contents contain 16 bytes. <|target|> find Path -type f -exec cat {} \\; | awk Program    | sort  | tail - Quantity        | sed Program "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files from the current directory tree and count the number of lines in them <|target|> find Path -type f -exec sed -i Program {} + | xargs -I {} wc -l {} "
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -type f -name Regex       | xargs -I {} readlink -f {}       | xargs -I {} readlink -f {}  "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File                         (c )         xargs -n Quantity -I {} gunzip -c Regex"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex Regex {} \\;  | grep Regex         | x"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user tommye <|target|> find Path -user Regex -print0 | xargs -0 -I {} bzip2 {}     |"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only their paths <|target|> find Path -exec file {} Path -exec file {} \\;  | grep -o -E Regex    | less   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex    -print     | xargs -I {} grep -l Regex {}  | xargs -I {} grep"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -name Regex -newer File      | sed Program      | sed Program    "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nFind all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;  | tr Regex Regex        | tr Regex Regex     "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for the current directory and print the last 10 lines of the output <|target|> find Path -mtime Timespan | tail -n Quantity | xargs -I {} ls -l {}  | awk Program     | tail -"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex   -exec ls -l {} \\;     | awk Program  Program        ( find Path -type"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -iname Regex | awk Program  | sed Program   | sort"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for files which are writable by at least one other users <|target|> find Path -perm -Permission -type f -exec ls -l {} \\;  | grep Regex      "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace all newlines with spaces in the output <|target|> find Path -type f -exec sed -i Program {} \\;  | tr Regex Regex"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the current directory and all of its sub-directories. <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d | xargs -I {} echo Regex Regex {}"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to get the current directory with the correct path for the file. <|target|> find Path -path Regex -prune -or -path Regex -prune -or -path Regex -prune -or"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under current directory tree that are not newer than the file \"file\" <|target|> find Path -type f! -newer File -print   \"The file is newer"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> keeping the directory \"tobecopied/tobeexclude\" in place of the path of the path to the current working directory. <|target|> find Path -path Regex -or -path Regex -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program     | grep Regex          | cut -d Regex -f Number        | sed Program    "
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -delete  + Path -mindepth Quantity -mmin +Quantity -type f -name Regex -delete  + Path   | xargs -"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File        | mv File             {}         | docker container "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under and below /directory/containing/etc <|target|> find Path -type f -name Regex -exec cat {} \\; | wc -"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +   |"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the \"regex\" file, where the first field of each line matches the second field of the \"other\" file. <|target|> join -t Regex File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory tree that are owned by user 'war-user' <|target|> find Path -user Regex -exec grep Regex {}"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> cat File | xargs -I {} grep -l Regex {}     "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and subfold them.   then search for the pattern \"file_name\" in the first list of all the files and display the matched lines along with the file"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -name Regex -print0       -maxdepth Quantity -type d     -printf '%f\\n"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to create a tar file of all the files in the current directory and all its sub-directories. <|target|> find Path -name Regex -print0 | xargs -0 -I"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the word \"foo\" in their name and copy them to the current directory. <|target|> find Path -name Regex | xargs -I"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only their paths <|target|> find Path -maxdepth Quantity -exec echo Regex {} +   | tr Regex Regex           | tr Regex Re"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are greater than 100MB in size <|target|> find Path -size +Size -size -Size         | grep Regex     | cut -d Regex"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path $( pwd ) -path Regex -print           | awk Program      ( echo Regex ) "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -path Regex -prune -or -n Path | sort | uniq  | wc -l     | sort -k Number   |"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and parent directory <|target|> find Path -type f -exec find Path -name Regex {} +  + | grep Regex | sed Program     | sort  | uniq"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines <|target|> find Path -print0 | xargs -0 -I {} wc -l {}  | grep -n Regex | sort | tail - Quantity | xargs -0 -"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of all regular files from the current directory tree <|target|> find Path -type f -exec ls -l {} \\;  | awk -F Regex Program       | sort   | awk -F Re"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | xargs -n Quantity -I {} grep Regex {}       | grep -v Regex                | xargs -n Quantity -I {} grep -n Regex {}   "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file/directory 'filename' <|target|> find Path -newer File         | sed -n Program         | tr Re"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files that are newer than the file \"file_name\" <|target|> find Path -type f -newer File! -newer File   -exec ls -l {} \\;  | awk Program       |"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and show a few lines of output from the beginning <|target|> find Path -type d | xargs -I {} mv -t Directory {}        | head "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the ls command on them to create directories in the resulting path <|target|> find Path -depth -name Regex -exec mkdir Directory \\;      | tr Re"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     then print  \"The file '%k:%p"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex   | sed Program     | sed Program          | grep Regex        | tr Regex Regex        | tr Regex Regex "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for the regex \"fileName\" in those files/directories <|target|> find Path -exec grep Regex {} File Path      | sed Program    "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex          Regex                 directory /usr/bin/my-editor        /usr/bin/my"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories. <|target|> find Path -type f -execdir rename Regex {} +    | sed Program          | tr Regex Regex   "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files under current directory and show the last 10 lines of output for each file <|target|> find Path -type f -exec file {} + Path | xargs -I {} ls -l {}  | tail - Quantity  "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the last time that a file named 'file' was accessed. <|target|> find Path -type f -name Regex -exec touch {} File \\;  | awk Program     for info   user  and group  <( echo"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the last line of each line in \"file1\" and file2\" <|target|> paste <( sed Program File ) <( sed Program File ) | sed Program File         | tail   "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -perm Permission -exec chmod Permission {} \\;    print  '%h\\n' for each file or directory found in"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} sed -i Program {}         {}          {}   |"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, Unix has been a shell for operating systems. <|target|> find Path -type f -exec grep Regex {} + Path     | xargs -I {} dirname {}      | xargs -I {}  "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( nginx master -p )   - Regex        Regex           | more           send SIGTERM      to kill parent process  "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print only the filenames. <|target|> find Path -user Regex -execdir echo {} \\;   | tr Regex Regex Regex         | sed Program   "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} mv {}               | xargs -0 -I {} mv"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the \"MyCutsIt\" directory tree, answering with \"y\" to all prompts <|target|> find Path -iname Regex -type f -not -iname Regex       | more     "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $x directory and take the first entry <|target|> find Path -perm Permission -exec ls -l {} \\;       Print the output of each file or directory  and its subdirectories"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Filter for lines in the sorted contents of the file \"file\" that are not in the sorted contents of \"file\" <|target|> sort File | uniq -d  | grep -v Regex    | sort -n  | uniq -d   "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -printf 'Total Counted: %p\\n' | xargs -I {} wc -l {}    | awk Program                   | sort   |"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nn> find all files in the current directory and search for the word \"foo\" in each one. <|target|> find Path -type f -exec grep -i Regex {} File \\;   | grep -i"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | xargs -I {} chmod Permission"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;    | awk -F Regex Program "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current working directory with the same name and number of occurences. <|target|> find Path -type f -printf '%f\\n' | sort | uniq"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline as the delimiter <|target|> find Path -mtime Timespan -print0 | xargs -0 -I {} sed -"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex       | grep Regex      | grep Regex          | cut -d Regex -f Number      | tr Re"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} +     | tr Regex Regex       "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and the file names <|target|> find Path -mmin -Quantity | xargs -I {} echo Regex Regex Regex {} "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      /bin/"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;     | grep Regex          | grep -v -P Regex      "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%p %f\\n\"    | sed Program"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -execdir echo Regex \\;  | tr Regex Regex      "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to which pipes to the directory specified by variable \"path\" <|target|> mount -p -o -L Regex Regex       | sed Program         "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex | xargs -I {} ls -l {}  | tail -n Quantity |"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and change their permission to 644. <|target|> find Path -depth -type f -exec chmod Permission {} \\;     | awk Program"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     then ch"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the week, the current directory is the first directory to be accessed. <|target|> find Path -type d -iname Regex -exec rmdir {} \\;     then"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generate the system host name and value using the format \"your_ip_address\" <|target|> ssh-keygen -f File File            | awk Program"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path -type f -exec chmod Permission {} \\;  -print   | xargs -I {} chmod Permission {}          {}    "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -group Regex -print  | xargs -I {} grep Regex {}      | grep Regex        | sed Program   "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's user folder which are newer than \u2018File.java\u2019 and older than \u2018File.txt\u2019 <|target|> find Path -newer File -and! -name Regex -and! -name Regex "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than /bin/sh and older than /bin/subt <|target|> find Path -newer File -and! -name Regex -print     | awk Program "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for DOS only. <|source|> find Path -type f -print0 | sed Program | xargs -0 -I {} sed -i Program File {}      | tr -d Regex        | xargs -0 -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -type f -exec grep -H -n Regex {} + | wc -l    | sed Program         | sort  |"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the report that contains the total number of lines and the number of lines that are not read from standard input. <|target|> wc -l $( ls -t File | tail )   | tail - Quantity   | awk Program    |"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -exec ls -l -d -S File | wc -l    | awk Program     | awk Program     | sort "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> View history | line | column -s Quantity | grep -E Regex      | less  <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex          | grep Regex               | tr Regex Regex                 | find Path  "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and change their permission to 700 <|target|> chmod Permission $( find Path -mindepth Quantity )       | sed Program           | xargs -I {} chmod Per"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +     | xargs -I {} chmod Permission {}          "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -size +Size -exec chmod Permission {} \\;     | awk -F Re"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -iname Regex -exec wc -l {} \\; | awk Program  | sort | tail -n"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -regextype posix-ergep -name Regex   -atime +Timespan   | awk -F Regex Program             | xargs -I {} echo"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 644. <|target|> find Path -type f -amin -Quantity -exec chmod Permission {} \\;     then copy them to /Users/username"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory <|target|> find Path -name Regex -prune -or -newer File -print      | grep Regex       "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> at level 3 of the current directory <|target|> find Path -maxdepth Quantity -name Regex         | xargs -I {} bind Regex {}              Re"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are newer than the file \"file1\" and older than the file \"file2\" <|target|> find Path -type f -name Regex -newer File! -newer File"
    }
  ],
  "20.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory recursively that have not been accessed in the last 30 weeks and delete the first 10 of them <|target|> find Path -type f -atime +Timespan -exec rm -r -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                    ( echo Regex )                      "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|source|> Find all files/directories under current directory that match the regex 'filename-regex.\\..*' in their paths <|target|> find Path -regex Regex         | grep Regex"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that were last modfied between 90 and 100 days ago <|target|> find Path -mtime +Timespan -mtime -Timespan -daystart -exec ls -l File"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -exec echo Regex \\;    | tr Regex          "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not readable by all <|target|> find Path -not -perm -Permission -type f -exec ls -l {} \\;   | grep Regex    "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's $passwd file is a set of permissions that can be changed to 775. <|target|> chmod Permission File File            | sed Program           "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -execdir -n {} + | wc -l    | grep Regex | awk Program   "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /bin/sh and older than /bin/live and print the file names <|target|> find Path -newer File -print  | xargs -I {}"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-container (file-name) with a transfer time of 1 minute <|target|> find Path -name Regex -type f -exec mv {} File \\;    | grep -E Regex     | sed"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;     -exec mv {} File \\;      | xargs -I {} mv {} File            "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are owned by user joe. <|target|> find Path -user Regex -daystart -exec ls -l {} \\;    | awk Program        ( sort )   "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | head       | tail          | diff -q File             | cut -d Regex -f Number       "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -user Regex -print0 | wc -l  | grep Regex | grep -v Regex    | wc -l "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are newer than the file 'filename' <|target|> find Path -newer File           | sed Program            "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -exec ls -l -r -h {} \\;  | awk Program   for <( sort File )         "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading destination for the world's largest and largest files. <|source|> Find files in the home directory tree that are owned by user \"joebob\" <|target|> find Path -user Regex -type f -exec ls -l {} \\;  "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the pattern 'filepattern' in their names <|target|> find Path -name Regex -exec grep Regex {} \\;  | grep -E Regex           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -type f -name Regex -mtime +Timespan  | xargs -I {} rm {}                   "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '<script>\\(c\\|h\\|cpp\\)' in their paths <|target|> find Path | grep -E Regex  | xargs -I {} gunzip {}  "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number and file name <|target|> find Path -perm Permission | xargs -I {} find Path -perm Permission {}     | cut -d Regex -f Number     | grep"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files from the current directory tree that were last modified between 2 and 6 minutes ago. <|target|> find Path -mmin -Quantity -mmin +Quantity | xargs -I {} ls -l {}   | awk Program        "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively whose names are \"file.ext\" <|target|> find Path -name Regex -type f -exec file {} \\;   | grep Regex     | grep Regex      | aw"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0          file         | grep -v Regex         | tr Regex Regex   "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec echo {} Regex \\;       will be expanded  in the current directory. <|target|> find Path -print        | xargs -I"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and sort them <|target|> find Path -type f | sort | uniq  | sort -r   | head        | sort -n    | cut -d Regex -f Number "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 'foo.txt' <|target|> find Path -not -newer File          | grep -v Regex        | cut -d Re"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File             /data/etc/nginx/bin/ <( chown -u Regex File  )        Change owner and group        to user \"mongodb\""
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex \".*prets copy\" in their paths and copy them to /your/dir <|target|> find Path -name Regex | xargs -I {} cp -t Directory {}       |"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'bin_m?' by modification time <|target|> find Path -newer File -print         | sort  | uniq | tr -d Regex     "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace all newlines with : <|target|> find Path -name Regex -exec sed Program {} \\;       | tr Regex Regex             ("
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex            -print         directory                 changed    from'screen'  to'screen2'     "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of files that are newer than the file \"file\" and are less than 100 KB in size. <|target|> find Path -size +Size -size -Size -exec ls -l -d {} + | grep Regex | cut -d Regex -f Number  "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex  -or -name Regex     -print      | xargs -I {} grep -l Regex {}                {}      "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' under current directory tree <|target|> find Path -name Regex         | xargs -I {} ln -s -t Directory            "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file system is in a state of undistribution. <|source|> Find all files/directories under current directory that are not owned by any user or group <|target|> find Path -nouser -or -nogroup -print | xargs -I {} du -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are less than 5 minutes old <|target|> find Path -mmin -Quantity -print0 | xargs -0 -r -I {} gzip -9 {}     | grep Regex     "
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named orm.properties under /tmp and print their path names <|target|> find Path -name Regex -execdir rename Regex {} \\;    | sed Program         File     "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the pattern 'file??' in their paths and print the names of the files they are in <|target|> find Path -name Regex -print0 | xargs -0 -I {} ls -l -d {}"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory and subdirectories whose names begin with the word \"file\" followed by a digit <|target|> find Path -name Regex       | tr Regex Regex        | grep Regex"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory tree that are newer than the file \"file.log\" and do not search in the sub directories. <|target|> find Path -maxdepth Quantity -type d! -name Regex -print0 | x"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting business, Regex, has been in a tizzy for years. <|source|> Find all files owned by Regex in the world and move them to Folder1/ <|target|> find Path -type f -user Regex"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -iname Regex -printf \"%p %f\\n\"        | tr Regex Regex   "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the list of top-level commands, find the path of least value for this file or directory <|target|> find Path -maxdepth Quantity -name Regex -printf \"%p\\n\"     | sort   | less    -n"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of all the files/directories under current directory tree that are newer than \u2018Apr 18 and older than \u2018Apr 18 and print the names of the files/directories that match with the pattern 'Apr 18' <|target|> find Path"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100M and print their sizes <|target|> find Path -size +Size -exec sed -i Program File {} +   | tr -d Regex Regex   "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file $newerthan and older than the file $olderthan and delete them <|target|> find Path -depth -type f -name Regex -newer File -"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second line of the file-to-file split list from standard input <|target|> cut -d Regex -f Number File | sed Program | split -d Regex -l Quantity File Regex       | awk Program "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and the time of their creation <|target|> find Path -name Regex -exec echo Regex {} + | awk Program           "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v --target-directory Directory File --exclude Regex           -n Quantity File             ( cpio -p --target-directory Directory )   "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were accessed more than 7 days ago <|target|> find Path -atime +Timespan -type f -exec ls -l {} \\; | wc -l    "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'b' by modification time <|target|> find Path -newer File -and! -name Regex    -print   | xargs"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex | xargs -I {} tar -c -v -f File {}               | tar -c -f File {}           "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse sort of command-and-forget (R) version of the command \"finds all the files in the current directory and sub-directories that match pattern '*.js' <|target|> find Path -name Regex -execdir"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the /usr/bin directory tree that were last modified more than 7 days ago. <|target|> find Path -mtime +Timespan -type f -name Regex -exec ls -l {} \\;  |"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This file contains a list of regular files that are newer than /tmp/$$ and older than /tmp/$$, replace '\\n' with '\\n' in all, and append with '\\n' in the output <|target|> find Path -"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without descending into subdirectories and print the path names of the directories before the directories themselves <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -printf '%"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than /tmp/master/ and print the file names (without the dot) <|target|> find Path! -newer File -exec sort -n -r File {}"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex         | grep Regex         | tr Regex Regex    "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|> Find all files under current directory that are larger than 10M and print their sizes. <|target|> find Path -type f -size +Size -exec wc -l {} \\;   | awk Program      is"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and print their names <|target|> find Path -inum Quantity -exec ls -l {} \\;    | sed Program        | grep Regex       "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of all files/directories under current directory <|target|> find Path -name Regex          | awk Program         | sort  | xargs -I {} ls -l {}"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print0 | xargs -0 -I {} rm -r -f {}       | grep -i Regex          | xargs -0 -I {} rm -f {}     "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are less than 50 bytes in size <|target|> find Path -size +Size -exec ls -l -r -t {} \\;   | awk Program         | sed"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex 'filename' in their paths <|target|> find Path -iregex Regex       | grep Regex        | cut -d Regex"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The file \"file.txt\" is a file in the current directory. <|target|> find Path -type f -exec rm {} \\;     | grep Regex      | xargs -I {} rm File          {}"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the first time a variable (non-recursive) and saves its value to variable 'last' <|target|> find Path -recursively Regex -prune -or -name Regex -print0 | xargs -0 -I {} echo Regex {} "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -execdir echo {} \\;       | tr Regex Regex              | sed Program  "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user john and change their ownership to the current user <|target|> find Path -user Regex -exec chown Regex {} \\;           | xargs"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace all newlines with spaces in the output <|target|> find Path -name Regex -exec sed -i Program {} \\;     | tr Regex Regex        "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the output of \"ls -l\" for each file in the current directory tree <|target|> find Path -exec ls -l {} \\;   | tr Regex Regex    "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories with spaces in the current directory and search them for \"foo\" <|target|> find Path -name Regex -exec grep Regex {} \\; -print  | xargs -I {} grep Re"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This will remove all files in the current directory which have the same filename and content. <|target|> find Path -type f -name Regex -exec rm {} \\;    | xargs -I {} readlink -"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace all newlines with : in the output <|target|> find Path -type f -exec sed Program {} +        | tr Regex Re"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list files in /home/user1/directory/ which have not been accessed in over 30 days or which are newer than /tmp/file/ <|target|> find Path -atime +Timespan -name Regex -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with their paths <|target|> find Path -print0 | xargs -0 -I {} echo Regex Regex {}     "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -exec echo Regex \\; -exec readlink {} \\;    "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -atime +Timespan -print0 | xargs -0 -I {} bzip2 {}  {}          | xargs -I {} tar -c -z"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex | sort | uniq -c | sort -n | tail -n Quantity  | cut -d Regex -f Number  | awk Program    |"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that contain \"some_pattern\" in their names <|target|> find Path -name Regex -exec ls -l {} \\;  | grep Regex"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file' by modification time <|target|> find Path -newer File -print      | grep Regex      | sed Program      "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of jobs and the number of jobs available for the unemployed has been on the upswing. <|source|> find Path -type f -exec ls -l {} \\;   | awk Program     ( sort -u )   "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user'sar' <|target|> find Path -user Regex -print0 | xargs -0 -I {} date '+%a %x %d' {}    |"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;    }   | grep Regex     | cut -d Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and run 'chmod' (displays command options) command on each of them to create directories named '~/foo', '~/bar', and '~/a/b/c/d' <|target|"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory that are larger than 100 MB in size and less than 100 MB in size <|target|> find Path -size +Size -size -Size    | tail -n Quantity       | x"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -printf '%s %p\\n' | sort -r -n | head -n Quantity         | xargs -I {} ls -l {}          | sort  "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file 'file' that is not in the path '1' <|target|> find Path -path Regex -prune -or -type f -printf '%p'    | awk Program    | sort  | uniq"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the current directory's subdirectories <|target|> find Path -maxdepth Quantity -mindepth Quantity -type d -exec basename {} \\;      | awk Program          "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree whose names match the pattern \"file-pattern-*\" <|target|> find Path -name Regex -print0 | xargs -0 -I {} find {} -maxdepth Quantity -type f -name Regex! -"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you have the right to copy all files in the current directory? <|target|> find Path -type f -exec ls -l {} \\;   | grep Regex      | tr Regex Regex    "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all files in the current directory recursively, using the extended find command, that is the command for searching for files <file> <file> <file> <file> find Path -type f -exec du -s -h {} \\; | sort -"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec echo Regex Regex {} \\;   | tr Regex Regex       | tr Regex Regex        | xargs -0 -I {}"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia, <|source|target|> find Path -type f -mmin Quantity -exec ls -l {} \\;    | awk Program        ( find Path -type f )    | sed Program  "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'lib/ext' by modification time <|target|> find Path -newer File -print     | xargs -I {} cp File {}  "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -exec basename {} \\;   | tr Regex Regex          | xargs -I"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of information about the world and the human being. <|target|> find Path -iname Regex -mtime Timespan      | grep Regex        | xargs -I"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -exec grep -l Regex {} \\;         search  in   directories  +        Path        Path    "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;   | grep Regex          ( find Path )"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /dir/to/search/ and change their permissions to 755 <|target|> find Path -type f -exec chmod Permission {} \\;       | tr -d Re"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Search for \"search term\" in all the files under current directory and count the number of lines in each one. <|source|> find Path -inum Quantity | xargs -I {} grep -i Regex {}  | wc -l     | grep Re"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them twice in a row <|target|> find Path -mmin Quantity -Quantity -exec echo {} Regex \\;      Print  \"The file 'course/course/' is"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files that are 0 bytes in size under /tmp/dir and do not search in the sub directories. <|target|> find Path -type f -name Regex -size +Size -exec ls -l {} \\;  | wc -"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'pattern' in their names <|target|> find Path -regex Regex    | grep Regex     | tr Regex Regex    | tr"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Find all files/directories under current directory <|target|> find Path -exec echo {} \\;      ( wc -l )       ( echo )     ( echo )     ( find Path ) "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list files in the current directory, without descending into sub-directories and excluding directories that are not on the same filesystem as that of the current directory. <|target|> find Path -name Regex -prune -or -name Regex -print     "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -execdir Regex {} +     | sed Program            | tr Regex Regex  "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -i -l Regex {} \\;    | awk Program                   | grep -v Regex       "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run 'file' with command 'ela' <|target|> find Path -name Regex -exec file {} \\;      | awk Program         "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>1. Find all files/directories under current directory tree that match the regex '<script>find Path -regex Regex      | grep -E -o -i Regex      | tr Regex Regex      |"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the pattern \"file_name\" in their paths <|target|> find Path -name Regex | xargs -I {} rename Regex {}       {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have been accessed in the last 10 minutes. <|target|> find Path -amin -Quantity -type f -amin -Quantity          | sed Program      "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee -a File            ( root )         ( syslog )        ( syslog )     ( file )      "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -exec ls -l -r -s {} \\;  | grep Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} Regex {} +     | tr Regex Regex        | sed"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than the file/directory /tmp/foo <|target|> find Path! -newer File -print | xargs -I {} file {}     "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -name Regex           | awk Program          "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command with parameters specified in the file's path as the argument <|target|> find Path -newer File -print0 | xargs -0 -I {} file {}"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec echo Regex Regex {} \\;     | grep Regex       | tr Regex Regex      | tr Regex Regex   "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of three columns from the end of file \"file.txt\" to the beginning of file.txt <|target|> cat File | tail - Quantity | xargs -I {} ls File {}       |"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> has been modified to match the extended mode of the current kernel's compile-time config file. <|target|> find Path -type f -exec chmod Permission {} +  \\;   | grep Regex "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -name Regex -exec chmod Permission {} \\;      "
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have not been accessed in the last 7 days and do not search in the sub directories of the current directory. <|target|> find Path -type f -atime +Timespan"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files in the current directory whose names are of the form \"CVS\" or \"WSF\" <|target|> find Path \\( -iname Regex -or -iname Regex"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -size Size | sed Program      | tr Regex  "
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex File | sed Program    | grep Regex   | sed Program       | grep Regex      | cut -d Regex -f Number  [0"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run them through the ls -l command, which removes the need for user to run the commands. <|target|> find Path -exec ls -l"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec mv File File File         | tr Regex Regex       | xargs -I {} mv File"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, find all files in the current directory tree that are bigger than 10MB and less than 20 MB. <|target|> find Path -size +Size -size -Size -print0 | xargs -I {}"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -mmin +Quantity -delete  -type f -exec rm {} \\;     | xargs -I {} rm {}    "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File            /root/file.txt                ssh -l Regex File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to be expanded to include only the file names of the current directory <|target|> find Path -iname Regex -exec wc -l {} \\;   | grep Regex  "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and below that match the regex '<file_name>' in their paths <|target|> find Path -type f -exec ls -l"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and count their subdirectories. <|target|> find Path -maxdepth Quantity -type f | xargs -I {}"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find it hard to accept that a file like \"file\" in their home directory is not their home directory. <|target|> find Path -name Regex -prune -or -name"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that match the regex 'filename*' in their paths and delete them <|target|> find Path -type f -regex Regex -"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This is a long listing of all files in the current directory and its subdirectories. <|target|> find Path -name Regex -exec ls -l -a -l {} + | aw"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>    print   the current directory name without the last two <|target|> find Path -maxdepth Quantity -name Regex -printf '%f\\n'     "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that contain \"wait_event_interruptible\" <|target|> find Path -name Regex -exec grep Regex {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run them with relative permissions specified via the ls command. <|target|> find Path -name Regex -exec md5sum"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generates temporary file with name formatted like '%.1f\\n' in /tmp/ and saves output to 'tmpfile' variable. <|target|> mktemp -u -t Regex         | tee File       "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files from the current directory tree <|target|> find Path -type f -exec basename {} \\;   | awk Program          ( sort )    ( sort )   |"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without descending into subdirectories <|target|> find Path -maxdepth Quantity -name Regex        -print            | grep -v Re"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory and sub-directories that have not been accessed in the last 30 weeks. <|target|> find Path -type f -atime +Timespan -exec ls -l {} \\; | wc -l  "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 777 permission under current directory tree and change their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\;    }    chmod Permission File \\; "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory tree with file permissions <|target|> find Path -type f -exec echo Regex {} \\; -exec echo {} \\;  | tr Regex Regex                "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /tmp/master and older than /tmp/newerthan and delete them <|target|> find Path -type f -newer File! -newer File -exec rm {} \\;"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep Regex | xargs -I {} cat {}        | grep Regex                      | tr Regex Regex        "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec cat {} \\;   | grep Regex     | cut -d Regex -f Number    | tr Regex Regex "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that are not owned by any user or group <|target|> find Path -not -user Regex -type f -print0 | xargs -0 -I {} file {}        |"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than /bin/sh. <|target|> find Path -newer File    | xargs -I {} mv {} $( ls File )      "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top dog is the world's most used car. <|source|> Find all regular files in the world that are owned by the user joe <|target|> find Path -type f -user Regex -exec mv {} File \\;  "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find it necessary to prefix with \"es\" their login name and/or IP address. This will be removed automatically if the user presses alt-fire. <|target|> find Path -iregex Regex -exec basename {} Regex \\;  "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -R -s {} \\;  | awk Program     for each file/directory in the current"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep -i Regex {} +  | wc -l   | tr Regex Regex    "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex               | ssh Regex                               "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each of them. <|target|> find Path -empty -exec file {} \\;   | awk Program           "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 lines of text separated by one line <|target|> grep -o Regex File | split -l Quantity  into pieces per 100000 lines <|target|> find Path -type f -mtime Timespan -exec"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for the current working directory <|target> find Path -name Regex -exec ls -l -d -s {} \\;   | tr Regex Regex     | tr Regex Regex     | tr Regex Re"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the \"cp\" command with the output: \"cp\" <|target|> find Path -name Regex | xargs -I {} cp {} File        "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0 | xargs -0 -I {} grep -E Regex {}     | tr -s Regex    "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the list of all files and directories of the current directory <|target|> find Path -print0 | xargs -I {} sed -i Program {}                  | sed Program "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files/directories under current directory tree that are newer than the file 'Nov' and older than the file 'Nov' by modification time <|target|> find Path -type f -newer File! -name Regex -newer File"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( which Regex )           ( process )          ( ping -c -f File )         ( kill - Regex Regex )       "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} +       ( wc -l )   ( echo Regex )     "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process, but it's not a fast process. <|source|> Find all files/directories under current directory tree that start with 'test' and end with 'x' in their names and copy them to /tmp/ <|target|> find Path -"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with their sizes and paths, sort them according to the version of the file, then print the base name of the first one found <|target|> find Path -name Regex | xargs -I {} tar -"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the time and location of each one <|target|> find Path -exec echo Regex Regex {} \\;        ( print )         "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace every occurrences of'subdomainA.example.com' with'subdomainB.example.com' in those files <|target|> find Path -type f -exec sed -i Program {} \\;  "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> find Path -name Regex -exec wc -l {} \\; | awk Program                  | sort  | uniq      | grep -i -o -P Quantity -e Re"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the word \"foo\" in their names <|target|> find Path -name Regex  -print0 | xargs -0 -I {} grep -H -n Regex {}"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -name Regex       | xargs -I {} grep Regex {}         | awk Program       "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and file names <|target|> find Path -type f | xargs -I {} file {} | xargs -I {} dir {}  "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo Regex {} \\;   | tr Regex      "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that have been modified in the last 180 minutes. <|target|> find Path -type f -mmin -Quantity | xargs -I {} ls -l {}  |"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex       | grep Regex        | grep Regex        | tr Regex Regex          | tr"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;  | xargs -I {} ln -s -f {}  "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -mmin -Quantity -exec ls -l {} \\;    | grep Regex    "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory that were last accessed more than 100 days ago. <|target|> find Path -type f -atime +Timespan -exec ls -l {} \\;  | awk"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} File \\;      grep -v Regex          | xargs -I {} grep -l Regex"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%y %p\\n\" | sort -r  "
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest caractor, with its size and location, is in the home directory of the world record-holder, and has been owned by the world records-holder for the longest line of all files with at least one line"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by default, create a tar archive of all the files in the current directory tree that have not been modified in the last 10 minutes <|target|> find Path -mmin +Quantity | xargs -I {} tar -"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory contains all files that have been modified in the last 100 days. <|target|> find Path -mtime Timespan -daystart -type f -exec ls -l {} \\;  | sort  |"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by definition <|target|> find Path -type f -exec bzip2 {} \\;    | sed -n Program         | grep -E -v Regex  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo {} Regex \\;   | awk Program      | grep -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names and parent directory paths. <|target|> find Path -exec echo Regex {} \\;   | tr Regex Regex   "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are newer than /tmp/foo and older than /tmp/foo <|target|> find Path -newer File -print  | sort  | uniq"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path Path -type f -exec chmod +Permission {} \\;     set the executable bit  to 0755         user_ has to `exec"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have been accessed in the last 30 minutes. <|target|> find Path -amin -Quantity -amin -Quantity          | sed Program "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'warwick' <|target|> find Path -user Regex -exec sed -i Program {} \\;    | tr Regex Regex       | grep"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} \\;        print  \"Permission: %p\"        "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory contains a list of all regular files that are owned by user vivekal. <|target|> find Path -type f -user Regex -exec sed -i Program {} \\;    | tr Regex Regex       | tr Regex"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading environmentalist in the world. <|source|> Find files in the current directory tree that are world-class preserving and do not contain human-readable data. <|target|> find Path -type f -name Regex -exec ls -l {} \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%s\\n\" | awk Program     | sort  | uniq   | wc    "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and count them <|target|> find Path -name Regex -exec wc -l {} \\; | wc -l   | grep -v Regex  | grep -v Regex  "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} \\;    then print  \"*Checking'is no-op' command with '--' command \" "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex           | grep Regex                 | xargs -I {} find Path -regex Regex           "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -print0 | xargs -I {} chmod Permission {}        | awk Program           |"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the current directory tree, and contains a list of subdirectories. <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -exec ls -d -l {} \\;     | head - Quantity    "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each of them. <|target|> find Path -size +Size -exec ls -l {} \\;   | grep Regex     |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting hostname, Regex1, is under the user's home directory. <|target|> hostname | cut -d Regex -f Number          | sort | tail -n +"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan       | awk Program               | grep Regex         | xargs -I {}"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Display the contents of a file 'file' <|target|> find Path -amin -Quantity -type f -exec cat {} \\;   | awk Program      ( sort File )      | sed Program  "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex provided by the $in_command variable <|target|> find Path -regextype sed -regex Regex      | grep Regex "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} \\;   | wc -l          "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -name Regex -exec sed -i Program File {} +    | awk Program    for  each line in file <|target|> comm -1 -2 -3 <( sed"
    }
  ],
  "21.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have been modified in the last 24 hours. <|target|> find Path -mtime -Timespan -type f! -name Regex      | xargs -I {} ls -l {} "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex           ( echo -e Regex )        ( echo Regex )               ( echo Re"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -iname Regex -type f | xargs -I {} wc -l {}  | sort | awk Program     |"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are greater than 10000000KB and print their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} +Quantity | awk Program "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -exec file -i Regex {} \\;    | grep Regex      | tr Regex Regex         | cut -d Regex -f Number"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' under current directory tree <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo Regex {}      | grep -E"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/foo and older than the file /tmp/foo <|target|> find Path -newer File -and -not -newer File -and"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;         | xargs -I {} chmod"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex {} \\;   | sort   | tail       | xargs -I {}"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 images with a common first name. <|target|> find Path -iname Regex | awk Program    | sort   | less    | xargs -r -I {} ls -l"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Find all files/directories under current directory and enter into the parent directory of the first one found <|target|> find Path -iname Regex -exec mv {} File \\;  | awk Program           | x"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are newer than 'file_name.txt' by modification time <|target|> find Path -newermt Regex! -newermt Regex -print0       | sed"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail      | head      | sed Program           | sed -n            | grep Regex      "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user joe <|target|> find Path -user Regex -user Regex      | xargs -I {} grep Regex {}       | sort "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of series on the use of octal in the history file. <|source|> find Path -name Regex | xargs -I {} grep -n Regex {} | awk Program    | sort  | uniq  | xargs -I"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the word \"searched-string\" in their name. <|target|> echo Regex | grep Regex | grep Regex | awk Program       | tr Regex Regex      | grep"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia Date Regex | grep Regex | sed Program File | sed Program File | min | + | awk Program | grep Regex           | grep Regex          | tr Regex Regex     "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec grep Regex {} +     | sed Program         | grep Regex          | sed"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -type f -print0 | xargs -0 -I {} echo Regex {}          | tr -d Regex "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files that are newer than /etc/logs and older than /etc/logs/ and show the differences along with the file sizes <|target|> find Path -newer File -exec ls -l {} + | sed Program  | xargs -I"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'bob' <|target|> find Path -user Regex -perm Permission -print  \\;  | xargs -I {} chmod Permission {}        "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -type f -exec grep -l Regex {} \\; | wc -l  | awk Program          | sort "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100MB in size <|target|> find Path -type f -size +Size     | xargs -I {} ls -l -h {}   | grep Regex     | cut -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/Maildir/.* (case insensitive) directory <|target|> find Path -type f -links Quantity -print0      | xargs -0         -I {} find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories in the current directory and calculate the total size of the file/directory <|target|> find Path -exec du -k -s {} \\; | cut -f Number       | awk Program     | sort "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 644 permission under current directory tree <|target|> find Path -perm Permission          | grep Regex          | sort  | uniq    | sed Program "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [0-9]+\\{1,2} in their names <|target|> find Path -regex Regex      | grep Regex     | tr Regex Regex  "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -v Regex File              /data/usr/bin/mongodb       /usr/bin/aws       /usr/bin/ls       /bin/logconfig"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/test/ <|target|> find Path -newer File     -print    | xargs -I {} ls -l {}    | grep Regex "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory whose names are of size 1024 MB. <|target|> find Path -type f -size +Size -exec ls -l {} \\; | awk Program      | sort  | awk -F Regex     "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100M and do not contain \"needle\" <|target|> find Path -size +Size -print0 | xargs -0 -I {} rm {}           |"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex              | xargs              grep -i Regex                {}       "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that are less than 100kb in size <|target|> find Path -type f -size -Size -exec ls -l -h {} \\; | awk Program         | grep Regex  "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -and -not -name Regex              | grep -r -i Regex              | xargs -I {} grep -I {} -n Regex {} "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user'sar' <|target|> find Path -user Regex -exec ln -s {} Regex \\;    | grep Regex           |"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are less than 50 bytes in size <|target|> find Path -size Size  -size Size   | head - Quantity      | grep -q -m Quantity    | cut -d Regex -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with superuser privilege <|target|> find Path -type f -perm Permission       | xargs -I {} gzip -9 {}       | xargs -I {} chmod Per"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -execdir cat {} \\;  | tr Regex Regex          | cut -d Regex -f Number "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -exec ls -l -r -t {} +  | wc -l  | grep -v Regex | cut -f Number | awk Program       |"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -user Regex -exec cat {} \\;   | awk Program             /tmp/test     "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question in the fields of environmental variables and statistics. <|target|> set | grep -o -e Regex | tr Regex Regex | cut -d Regex -f Number      | tr Regex Regex | xargs"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the current directory's file information <|target|> find Path | sed Program   | grep Regex     | cut -d Regex -f Number        | tr Regex Regex   "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'Nov' by modification time <|target|> find Path -newer File        | sed Program         "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [^=]* <|source|> find Path -regex Regex       | xargs -I {} rm -r -f {}     "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to their parent directory. <|target|> find Path -exec echo Regex Regex {} Regex \\;    | tr Regex Regex      "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /etc/sysconfig/perl and print their names <|target|> find Path -newer File -print | sed Program  | xargs -I {} echo Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex 'pattern' in their paths <|target|> find Path -iregex Regex       | grep Regex    | xargs -I"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -d -a {} +   | sed Program        | grep Regex   "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to continue? (Or are you just starting) with BIG files? Are you sure you want to quit and go home? (Or are you starting with a file?)? (Or are you starting with a file?)? (Or are you starting with a"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a --exclude Regex --exclude Regex File File         ( sort )     ( sort )       | cp -r --target-directory Directory        "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file/directory 'file' <|target|> find Path -newer File -and -print    | awk Program     | sort  |"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> The file \"files.txt\" contains a list of all the files in the current directory and sub-directories. <|target|> find Path -type f -exec ls -l {} +  | sed Program  | awk Program     |"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;               | xargs -I {} tar -c -v -f File {}      "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -s -h {} \\;  | cut -d Regex -f Number    "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the contents of document \"ane.txt\" <|target|> find Path -name Regex -exec cat {} \\;  | tr Regex Regex      "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -iname Regex | wc -l    | grep Regex  | wc -l   "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> the file that is searched for in the current directory, and is the one that is not found in the sub directories of the current folder. <|target|> find Path -name Regex -prune -or -print    \"The directory is not found"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     | tr -d Regex     "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -name Regex | wc -l      | grep -v | awk Program       | sort "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generate a randomly sorted list of all files and directories from the current directory tree <|target|> find Path | sort | uniq | xargs -I {} ls -l {}      | sort  | uniq  | xargs -I"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Identify the type of the file system used by the current user <|target|> df -k File | grep Regex     | sed Program         | grep Regex        | sed Program       "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%f %p\\n\"  | sort  | cut -d Regex -f Number         |"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print | xargs -I {} rm -r -f {}               | xargs -I {} rm -r {}                 "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user with UID=1000 <|target|> find Path -uid Regex -exec echo Regex {} \\;    | awk Program          | sed"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100M and print their sizes in bytes. <|target|> find Path -size +Size -print0 | xargs -0 -I {} wc -c {}    | less   "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the list of regular files in the /tmp directory tree, the user wnort adds the option of \"reverse\" for those files. This will not work with files whose names start with \"file\" <|target|> find Path -type f -name Regex! -name Regex!"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-container home directory is at home in its full accessory section. <|source|> find Path -type f -not -path Regex -print0 | xargs -0 -I {} ls -l {}  | grep Regex      | sed Program"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by the user 'warwick' <|target|> find Path! -user Regex -not -newer File       | xargs -I {} ls -l {}   "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than Jul 01 and older than Jul 01 by modification time <|target|> find Path -newermt Regex -and -not -newermt Regex  -print     is required "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with their full paths and their sizes <|target|> find Path -type f -printf '%f\\nt'  | sort  | awk -F Regex Program      | sed Program   "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of results from the last time series of the day. <|target|> find Path -type f -execdir rename Regex {} \\;   | tr Regex Regex     | aw"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Sort the contents of \"file\" using a regular expression to give the most frequent matches and deletes the last occurrence <|target|> find Path -name Regex -exec sed -i Program -e Program {} + | sed -i"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line 16 <|target|> find Path -perm -Permission -exec sed -i Program {} \\;   | grep -E -E Re"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a series of 3 lines of output from the beginning of the file \"file\" that is not in the beginning of the file. <|target|> head - Quantity File | tail - Quantity | awk Program "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> and without a filename <|target|> find Path -maxdepth Quantity -name Regex -print0       | grep -E -i Regex      | cut -d Regex -f"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their paths and sizes <|target|> find Path -type f -printf '%p %s\\n' | awk Program     | sed Program "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are not owned by user \"orpired user\" <|target|> find Path -type f -user Regex -not -name Regex -print0 | xargs -0 -I {}"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -type f -mtime Timespan -exec bzip2 {} \\;  | xargs -I {} rm {}             | xargs -I {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to continue? (Y/n) <|target|> yes Regex | sort -n -r | head          | awk Program    ( sort -n"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the week, the current directory is used for storing timestamps of all files that have not been accessed in the last 30 days. <|target|> find Path -type f -atime +Timespan -exec"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines <|target|> find Path -iname Regex -exec wc -l {} +  | grep Regex | cut -d Regex -f Number  | sort | uniq -c "
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user'sar' <|target|> find Path -user Regex -mmin -Quantity -print     | grep Regex         | xargs"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace all newlines with spaces <|target|> find Path -exec sed Program {} \\;      Save the output to variable 'filename' <( echo Regex )     Print  '"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep -H Regex {} + | wc -l   | grep Regex   | wc -l  | sort | tail"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -print0 | xargs -0 -I {} chmod Permission {}         {}     "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse lookup for a pattern \"derby\" in the current shell. <|target|> grep -E -o Regex <( sed Program File )     | grep Regex         | tr Regex Regex    "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} + | sort -r -n  | head -n Quantity           | sort -r       | head -n Quantity      "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each of them. <|target|> find Path -exec grep Regex {} \\; -print   | xargs -I {} wc -l {}       "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex {} \\;  | tr Regex Regex         | tr Regex Regex   "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run a command given via the file command with the file arguments specified in the output. <|target|> find Path Path -execdir Regex \\;   | sed Program         "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -ls | wc -l  | awk Program  | sort | uniq -r | cut -d Re"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type d -exec ls -l {} \\; | sort -n | head - Quantity        | head - Quantity     | cut -d Regex -f Number     "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> and Filter By Regex | grep Regex | cut -d Regex -f Number | tail -n Quantity      | grep Regex    | cut -d Regex -f Number      | tr Regex Regex"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files whose names begin with \"file1\" and whose names end with \"file2\" <|target|> find Path -name Regex -mtime -Timespan | grep Regex      | less "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under /home/user/Maildir/.SPAM/ directory and change their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} +    "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than /bin/sh and delete them <|target|> find Path! -newer File -delete      | xargs -I {} rm -r -"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, Emacs saves the first line of output of command \"sort\" to variable \"line\" <|target|> echo Regex | head - Quantity | awk Program     | sed -e Program     | sort  | cut -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -not -path Regex      -type f -print      | grep -E -v Regex                 "
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -exec grep Regex {} \\;     | grep Regex     | cut -d Regex -f"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of regular files from the current directory tree that contain \"some text\" in their names <|target|> find Path -type f -iname Regex -exec grep Regex {} \\; -exec ls -l {} \\;  | cut -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are less than 50 bytes in size <|target|> find Path -type f -size -Size -exec ls -l {} \\;  | grep Regex     | less     | wc"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of all files in the current directory and below <|target|> find Path -mmin Quantity -print     | awk -F Regex Program         | sed Program      "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo {} \\; | wc -l     | grep -E -v Regex        | grep Regex"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match 'file-pattern' in their paths and show the first 10 of them <|target|> find Path -name Regex | head - Quantity  | xargs -I {} ls -l {}  |"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with null delimiter (.) <|target|> find Path -print0  | xargs -0  | xargs -I {} echo Regex Regex {}       "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the home directory tree, find all files that begin with \"file\" and end with \"file\" in their names and copy them to the home directory. <|target|> find Path -name Regex | xargs -I {} cp -i File {}    | grep"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'file' by modification time <|target|> find Path -newer File -print0 | xargs -0 -I {} mv File File {}     "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -m Quantity -i Regex {} \\;      | grep -m Quantity -i Regex             | xargs -I {} grep -l Regex"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process to create a tar.gz of all the files in the current directory tree that are newer than the file \"rc.gz\" <|target|> find Path -newer File -print | cpio -p -d -u -m -v Regex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\; | xargs -I {} cat {}       | sed Program           "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than file/directory/ by modification time <|target|> find Path! -newer File -exec rename Regex {} \\;   then rename Regex <("
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex     | grep Regex     | cut -d Regex -f Number      | tr Regex Regex         | sed Program       "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee File                 ( root )             | xargs -I {} echo -r {}        "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;  | xargs -I {} dirname {}           "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'pattern' <|target|> find Path -regex Regex | xargs -I {} bzip2 {} | xargs -I {} -I {} echo"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count the number of lines in them <|target|> find Path -type f -exec wc -l {} + | grep -v Regex | sort | uniq -c | sort -n"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\; | sed -e Program          | tr Regex Regex "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link in the current directory for each file in the directory /tmp/iTMP <|target|> find Path -type f -newer File -exec ln -s {} \\;  | awk Program    "
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the output of each one without the last two preceding it. <|target|> find Path -exec echo Regex | rev | cut -d Regex -f Number | rev "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -mtime Timespan   | tr Regex        | sed Program        "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are at least 2 levels deep and print their names and sizes <|target|> find Path -mindepth Quantity -maxdepth Quantity -type f |"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;    | awk Program   for"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This command will print the names of the users who are currently logged in without the header. <|target|> who | grep -v Regex | cut -d Regex -f Number   | tr Regex Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nFind all files under current directory and search for'somecommand' in those files <|target|> find Path -type f -exec grep Regex {} + Path    | grep Regex     "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive pattern '\\(userAgent=[^=]*\\)*' in their paths <|target|> find Path -type f -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory tree that match pattern \"file1\" and delete them <|target|> find Path -name Regex -exec rm -r -f {} \\;  |"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and names <|target|> find Path -exec cp {} File \\;      | grep Regex    "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the file system containing the current working directory. <|target|> df -P File | tail - Quantity | awk Program     | sed Program       | x"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;      ("
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -maxdepth Quantity -name Regex -mmin +Quantity -exec rm {} \\;     -type f -maxdepth Quantity -name Regex -mmin -Quantity -exec rm"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File         | mv File               | dockercontainer         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec sed Program {} +    | wc -l   "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'warwick' <|target|> find Path -user Regex -print0 | xargs -"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the case insensitive regex 'foo*' in their paths and delete them <|target|> find Path -iregex Regex"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec grep Regex {} + | wc -l"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -name Regex | xargs -I {} wc"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the number of lines in them <|target|> find Path -name Regex -exec wc -l {} \\;"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -type f -exec basename {} \\;  | grep Regex        | tr Regex     "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex  '*~' (case insensitive search)  and print  to console and append to file /tmp/test-a <( wc -l )  as root <("
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex File | grep Regex | cut -d Regex -f Number     | xargs -I {} echo Regex {}          "
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;        | grep Regex        | sed Program  "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories named 'document' in the current directory tree <|target|> find Path -name Regex -or -name Regex   -print    | grep Regex      | xargs -I"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user tommye <|target|> find Path -user Regex -execdir pwd \\;       -execdir echo Regex Regex \\;  |"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -name Regex -exec echo {} \\;   | sort  | uniq  | wc       | sort  "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -ls | grep Regex | wc -l    | sort | uniq | grep -i -c  | awk Program "
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec grep -i Regex {} + | wc -l    | tr Regex Regex | xargs -0 -I"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the null character as the delimiter <|target|> find Path -print0    -maxdepth Quantity           Path -print0       "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep Regex | xargs -I {} grep -n -e Regex {}       | grep Regex                  | grep Regex         "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than $file1 and delete them <|target|> find Path -not -newer File -exec rm {} \\;     | grep Regex       "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of information about the human and environmental of the human. <|source|> find all the files in the home directory which are accessed after user confirmation <|target|> find Path -newer File -user Regex -ok ls -l {} \\;"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without descending into hidden directories <|target|> find Path -name Regex -prune -or -type d -print0 | xargs -0 -I {} mv {} File {}  "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec rename Regex {} \\;      | tr Regex Regex            |"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for DOS only. <|target|> find Path -type l -name Regex -execdir pwd \\;     then print  \"file.txt\" and save to variable \"DIR\" <|target|> readlink File "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec date Regex Regex Regex Regex \\;             | awk Program       ( true )        "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -print0 | xargs -0 -I {} echo Regex {}           | tr Regex Regex    "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                     | ssh                        | ssh  "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia/New_Directory | find Path -type d -maxdepth Quantity -exec rmdir {} \\;    | sed Program        ( echo Regex )       ( echo Regex )    "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '.*foo*' <|target|> find Path -regex Regex       | xargs -I {} grep -l Regex {}  "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex Regex {} Path        | tail       | xargs -I"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This command find all the files which have not been accessed for more than 100 days and which are not newer than 90 minutes and delete them. <|target|> find Path -type f -atime +Timespan -mtime -Timespan -mtime +Timespan"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -perm Permission | sed Program      | xargs -I {} echo Regex Regex Regex Regex Regex {}   | x"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the list of all files and directories of the current user's home directory <|target|> find Path -exec echo {} \\; | sed Program         | tr Regex Regex         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the last files to be sorted. <|target|> find Path -type f | sed Program | sed Program | sort | tail -n Quantity | xargs -I {} ls -l {}  | sort | uniq | xargs -I {} ls"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill -s -n $( nginx master | awk Program )         | sed Program                          | less       "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines <|target|> find Path -print0 | xargs -0 -I {} wc -l {}  | grep -v Regex | awk Program     | sort "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -execdir echo Regex {} Path          | cpio -p            "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not \"file.txt\" <|target|> find Path -not -name Regex  -type f -print0      | xargs -0 -I {} ls -l {}"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file' under current directory tree <|target|> find Path -name Regex -exec chmod Permission {} \\;    -print   'file'          "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process tree that lists all files and prints their names. <|target|> find Path | grep -i Regex | sed Program       | tr Regex Regex        | grep Regex     |"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> wc $( find Path -name Regex )   | awk Program         | sort | uniq    | wc        | wc     | sort | uniq     |"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} \\;      | grep Regex "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all files in the current directory and sub-directories whose names do not end in \"txt\" and \"html\" <|target|> find Path -maxdepth Quantity -name Regex -or -name Regex   "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     /  | aw"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the group staff and have the permission 777. <|target|> find Path -group Regex -perm Permission! -perm Permission        | grep Re"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, make the directory \"dir1\" and make the directory \"dir2\" <|target|> mkdir Directory                    ( echo Regex"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Folder with most current directory in path <|target|> find Path -name Regex -exec ls -l {} \\;  | awk Program      | sort   | grep -v    | cut"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 100k <|target|> find Path -type f -size +Size -exec ln -s {} \\; | awk Program     "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you are logged in? <|target|> ssh -M  | grep Regex         | grep Regex        | tr Regex Regex   "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -execdir ls -l -d {} \\;     | sed Program"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H Regex {} \\;   | grep -v Regex            | xargs -I {} grep -H Regex {}  "
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the month, the current directory tree is modified to the current month's version. <|target|> find Path -newermt Regex! -newermt Regex -exec ls -l {}"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for the regex provided by first argument to the search <|target|> find Path -exec grep Regex {} \\; -print  | grep"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | awk Program     | tr Regex Regex Regex            | tr Regex Regex         "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'file' by modification time <|target|> find Path -newer File -print | sed Program  | xargs -I"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have not been modified in the last 30 days. <|target|> find Path -depth -mtime +Timespan -print0 | xargs -0 -I {} b"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -maxdepth Quantity -type f | sed Program | xargs -I {} readlink File {} "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> no-op <|target|> find Path -maxdepth Quantity -exec echo Regex Regex Regex {} Regex \\;  | grep -E -v Regex        | tr"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a command line utility for using the interactive shell with a view (print) command. <|target|> set -e -e    | sed -e Program        | tr"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path -type f -exec chmod Permission {} \\;     -type f -print   | xargs -I {} chmod Permission {}       "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory without descending into other paths and delete them <|target|> find Path -type f -exec rm -r -f {} +   | grep Regex"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [0-9]+.* in their names <|target|> find Path -regex Regex | grep Regex     | grep Regex     | tr Regex Regex"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files whose names begin with \"file\" in the current partition and remove them <|target|> find Path -name Regex -exec grep -m -i Regex {} \\; -exec sed -i Program {} \\;   | tr Regex"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 megabytes in size <|target|> find Path -size +Size -exec sed -i Program {} \\;    | grep Regex      | tr -s Re"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec echo Regex {} \\; | wc -l    | awk Program      | grep Regex   "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their sizes and names <|target|> find Path -type f -exec du -h -s -c File \\; | awk Program      ( sort )    /tmp/file   "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number in the output <|target|> find Path -iname Regex -printf 'Number in %u %p\\n' | wc -l    | grep -E -o Regex"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are owned by user \"joebob\" and change their ownership to \"sjoebob\" <|target|> find Path -user Regex -exec chown Regex {} +    | xargs -I {}"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex         | grep Regex             | tr Regex Regex                   | sed -e Program "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex Regex | sed Program | xargs -I {} chown Regex File               {}                          "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest caractor, the Regex, is at the top of the list of largest files in the directory tree <|target|> find Path -type f -exec ls -s {} + | awk Program | xargs -I {} chown Regex {}     "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'file_name' <|target|> find Path -newer File! -name Regex -print       | xargs"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /bin/sh and older than /bin/subt <|target|> find Path -name Regex -newer File -not -name Regex -new"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex       | awk Program        ( find Path -name Regex )             "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically change the owner and group of all files in the current directory tree to \"user-dir\" and group \"group-dir\" <|target|> find Path -mmin -Quantity | xargs -I {} chown Regex {}   "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than $oldest_to_date <|target|> find Path -name Regex -newer File -print      | xargs -I {}"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This is the second section of the \"file\" that is used to store input \"your username\" in the variable \"password\" <|target|> readlink -f File | sed Program  | awk Program   ( sort File )    "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A common question is \"what do I do with this file?\" <|target|> read Regex Regex?\"            | sort  | uniq   | grep -v Regex    "
    }
  ],
  "22.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the most used utilities for the current kernel. Are you sure you want to use them? <|target|> find Path -type f -exec ls -l {} + | grep Regex | xargs -I {} echo Regex {}  "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                     ( echo Regex )                     "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /bin/sh and print the timestamps of the directories they are in <|target|> find Path -newer File -exec echo Regex {} +  "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than /tmp/dir1 <|target|> find Path! -newer File -exec diff -u {} File \\;       print  "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>sort by | uniq -u | sed -u Program      | tr Regex Regex          | grep Regex           | tr Regex Regex   "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their md5 sums <|target|> find Path -print0 | xargs -0 -I {} md5sum {}  | grep -E Regex | cut -d Regex"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that contain 'test' in their names and display the path where each one is located <|target|> find Path -name Regex -exec grep -l Regex {} \\;  |"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | sed Program       | tr Regex Regex          | tr Regex Regex"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and lines 235 to 270 <|target|> find Path -exec echo Regex Regex Regex {} \\; | awk Program       ( sort )"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's directory tree which are larger than 100 MB in size <|target|> find Path -size +Size -exec ls -l {} \\;   | grep Regex        "
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -iname Regex -type f -exec mv {} File \\;      | grep Regex        | xargs -I {} -I {} mv {} File        {}  "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f -mtime -Timespan | grep -E -o -w Regex  | xargs -I {} dirname {}     | awk Program"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail      | head       | sed Program           | sed Program                   | sed Program"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'Nov' by modification time <|target|> find Path -newer File       | xargs -I {} ls -l {}    | grep Regex "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -ls | sed Program | grep -o Regex | wc -l    | awk Program    | grep -E -v Regex  "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -exec grep Regex {} +     | grep Regex       | tr Regex Regex       | grep Regex    "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec ls -l {} \\;   | grep Regex     | grep Regex         | cut -d Regex -"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep Regex {} + | wc -l  | wc -l   | grep Regex | sort | uniq -c | sort"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than /tmp/file <|target|> find Path -name Regex -newer File -print  | xargs -I {} rm {}           | xargs -"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second line of the \"less\" column, separated by a space. <|target|> awk Program Program | sed Program        | tr Regex Regex      | sed Program         | tr Regex"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory whose permissions are 644 and show the first 10 files <|target|> find Path -perm Permission -exec chmod Permission {} \\;   | head - Quantity  | cut -d Regex -f Number    |"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -a -l -S {} +  | awk Program        ( sort )    ( sort )     ( find"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in Pat's user folder which have spaces in their names and do not end in \".html\" <|target|> find Path -type f -name Regex -exec grep -l Regex {} +    | grep Regex       |"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory without descending into subdirectories <|target|> find Path -maxdepth Quantity -type f -exec ls -l {} \\;   | grep Regex          | xargs -I {} find Path"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter and preserve the string \"no-match\" <|target|> find Path -print0 -null -exec echo Regex Regex {} \\;  -print0        ( w"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with '.txt' extension excluding 'directory' in their names under current directory tree <|target|> find Path -name Regex -prune -or -name Regex -type f -print             |"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their contents <|target|> cat File | xargs -I {} cat {} | wc -l   | grep -v Regex | grep -v Regex     | sort | uniq -c  "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                  `own_directory /data/mongodb/mongodb.conf         change               to `"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest caribere (case insensitive) file, with 1.1GB and 2.5GB blocks, is the only file that is not compressed during transfer. <|target|> find Path -type f -iname Regex -size Size -exec ls -l {} \\;   | grep"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     | awk -F Regex Program          | sort     |"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex           | tr Regex Regex         | xargs -I {} rm -r -f {}   "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                 grep Regex                 | tr Regex Regex                delete"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting hostname, Serach, is owned by the owner and developer, and runs in the directory \"/home/user/Desktop/data\" <|target|> find Path -type f -name Regex -execdir touch {} \\;   | cut -d Regex"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex                   ( sort )          ( sort -u )       file          "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with new lines removed <|target|> find Path -print0 | xargs -0 -I {} ln -s -T Directory {}      | xargs -0 -I {} ln -s -T Directory"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file/directory /tmp/ (where /tmp/ is a variable) and delete them <|target|> find Path -newer File -and! -newer File -exec du -s -h"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 2013-12-04 and older than 2013-12-05 <|target|> find Path -newermt Regex -and -not -newermt Regex   | xargs -I {} g"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -name Regex -execdir echo {} Regex \\;    | tr Regex Regex      | xargs -0 -I {} mv {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a command line utility for creating symbolic links in the current directory to files matching current directory <|target|> find Path -type l -name Regex -print0 | xargs -0 -I {} ln -s -f {}   | grep Regex       |"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -user Regex -exec chmod Permission {} \\;          | sed -e Program          "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Display the contents of file \"dump.txt\" on the first line of output by standard input <|target|> cat File | sed Program | xargs -I {} mv File File           ( echo Regex )  "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Search the current directory tree for files containing \"somenge\" in their names and replace \"somenge\" with \"blacklist\" in their paths <|target|> find Path -name Regex | grep Regex | tr Regex Regex"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the file 'Nov' and older than the file 'Nov' by modification time <|target|> find Path -newer File -and! -newer File -and! -user"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex Regex File | xargs -I {} rm -r -f {}                 {}  | xargs -I {} rm -f {}          "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia/Newzbinator | grep Regex | cut -d Regex -f Number    | tr Regex Regex     | sed Program         | xargs -I {} chmod Permission {}   "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec sed -i Program {} \\;    | tr Regex Regex         | cut -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are newer than the file $newerthan and delete them <|target|> find Path -maxdepth Quantity -type f -name Regex -print0 | xargs -0 -I {} rm -f"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count them <|target|> find Path -type f | awk Program | sort | uniq -c | sort -n  | cut -d Regex -f Number   | tr Regex Regex"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -exec grep -l Regex {} +  | wc -l    | grep -v  | awk Program     | grep"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -a -v -R File File          | cpio -p -d -u -m -v Regex                  | xargs -I {}"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with the null character as the delimiter <|target|> find Path -name Regex -print0 | xargs -0 -I {} echo {}   | grep -v Regex "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (Automatically create and use default for all directories) <|source|> find Path -type d -exec echo Regex Regex {} +    | tr Regex Regex       | sed -e Program     "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;              | tar -c  File                "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of three columns from the beginning. <|target|> find Path -type f -name Regex | sed Program | xargs -I {} dirname {} | xargs -I {} cp -v {} File    "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting network, according to the second-to-last line of the file, is bigger than the second-to-last line of the file. <|target|> find Path -type f -exec ls -l -l {} \\"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -iname Regex -exec basename {} \\;    | awk Program       | grep Regex "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -type f -print0 | xargs -0 -I {} chmod Permission {}         "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and print their file names <|target|> find Path -name Regex | awk -F Regex Program      | sort  | xargs  | cut -d"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;    | awk Program    ( find Path -"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -name Regex -exec cat {} \\;     | tr Regex Regex        |"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -iname Regex | xargs -I {} wc -l {}  | sort | uniq  | tail - Quantity        | awk Program"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and upload them to webINPUT <|target|> find Path -exec cat {} \\;   | grep Regex    | ssh          | cut -d Regex -f"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print | xargs -I {} rm -r -f {}            | xargs -I {} rm {}                {}      "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec echo Regex {} \\;    | awk Program       | tr Regex Regex          "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'document' in the current directory tree <|target|> find Path -name Regex -print0 | xargs -0 -I {} awk Program {}          | sort   | xargs"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command'mkdir' on them. <|target|> find Path -name Regex -exec rm -r -f {} \\;        Print  '-okdir is an action"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the home directory that are larger than 100 MB in size. <|target|> find Path -type f -size +Size -exec ls -l -h {} \\;  }    | grep Regex      "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'jump' in their names <|target|> find Path -regextype posix-egrep -regex Regex         | grep -i Regex "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than Jul 01 by modification time <|target|> find Path -newer File        | grep -v Regex     | sort  | uniq  | tr -"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /bin/sh and older than /bin/sh <|target|> find Path -newer File  -print       | xargs -0       |"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'joebob' <|target|> find Path -user Regex -exec chown Regex {} \\;    then"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'query' in the current directory tree and print the path where each one is located <|target|> find Path -name Regex -exec echo Regex \\;  "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace all newlines with : in the output then remove the last : and only ones from the list. <|target|> find Path -type f | sed Program | sed Program"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that were last accessed more than 7 days ago. <|target|> find Path -atime +Timespan -exec chmod Permission {} \\;    "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec echo Regex Regex Regex {} \\;  | tr Regex Regex         | grep Regex       "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print only the filenames (not paths) <|target|> find Path -type f -execdir echo {} \\;  | grep -E -v Regex "
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count the number of lines in them <|target|> find Path -type f -exec wc -l {} + | grep Regex | awk Program    |"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -name Regex -type f -atime +Timespan -print -exec bzip2 {} \\;    -c  -d  -p File            "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +      ( wc -l"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long list of the largest files and directories and display the total size and size of them <|target|> find Path -type f -exec ls -s -s {} + | sort -n -r |"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that were accessed at least 50 days ago <|target|> find Path -f -atime +Timespan -type f    | grep Regex        | xargs -I {} grep"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -mindepth Quantity -exec chmod Permission {} \\;     | awk Program       ( sort )  "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} \\;    | sed Program   \\;      | grep -q -w Regex  "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -type f | wc -l  | sed Program     | grep -E -v Regex | sort | uniq  | sort -n  | tail"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -depth -name Regex -execdir rm {} \\;          ( xargs )     ( xargs )  "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to delete everything in the current directory? Are you sure you want to delete everything in the current directory? Are you sure you want to delete everything in the current directory? <|target|> find Path -mindepth Quantity -maxdepth Quantity -exec rm -r -"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r | head - Quantity         | awk Program                    |"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and print their names. <|target|> find Path -exec echo {} \\;  | tr -c Regex      | grep Regex       | tr Regex Regex  "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them on stdout <|target|> find Path -exec echo Regex {} \\;  | tr Regex Regex       | cut -c Number    | fold -w Quantity"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> list of files owned by user vivek <|source|> find Path -user Regex -exec ls -l {} \\;  | sort -n -r | head - Quantity  | awk Program      | sort  | uniq -i -d  File"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and sort them according to the version of the file $2 <|target|> find Path -type f -mmin -Quantity | xargs -I {} ls -l -t {} |"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and parent directory names <|target|> find Path -exec ls -l -d {} + | sort -n | tail - Quantity   | xargs -I {} ls"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +      ( echo Regex )     ( echo"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -exec ls -l {} +  | sed Program       | awk Program       "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path Path -name Regex -exec chmod Permission {} \\;     then change the permission to 644  <"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +       ( find Path )       ( echo Re"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -exec ls -l {} \\; | wc -l     | sed Program        | grep -v"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path \\( -type f -name Regex -or -name Regex \\) -exec grep -l Regex {} \\;        search  in the subdirectory tree of the current user <( wgeth File ) <("
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -a -l {} \\; | awk Program          "
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the users who want to move their files to some directory with the same name as the current working directory. <|target|> find Path -name Regex -exec mv {} File \\;      | grep Regex  "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -inum Quantity -exec chmod Permission {} \\;   && chmod Permission File \\;       then print"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -mmin -Quantity -exec chmod Permission {} \\;      | awk Program        "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia and the U.S. dollar, two worlds apart <|target|> find Path -name Regex -exec echo Regex Regex | wc -l   | tr Regex Regex | grep Regex   | wc -l  | grep -v"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, Emacs will display the current working directory. <|target|> pwd | grep Regex        | sed Program                | tr Regex Regex      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -exec cat {} \\;  | grep -E -v -E Regex       | tr Regex Regex     "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user tommye <|target|> find Path -user Regex -exec grep Regex {} \\;  | awk Program         (c )"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -mindepth Quantity -maxdepth Quantity | uniq | tr Regex Regex     | cut -d Regex -f Number   "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -exec grep -i -H Regex {} \\; | awk Program       | sort   | grep -E -i -v Regex        | xargs -I {} grep -m Quantity -"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} +      ( wc -l )      ( echo Re"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory which have the name \"file1\" and which are bigger than 10MB <|target|> find Path -name Regex -size +Size -exec ls -l -s {} \\;   | awk Program"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'warwick' <|target|> find Path -user Regex -exec sed -i Program {} \\;   then print the output of this command with"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree and print their names and lines <|target|> find Path -type f -execdir echo Regex {} \\;        | grep Regex      "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File | tee -a File            | tracel     Regex           | tac            | xargs"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -exec grep -l Regex {} + | wc -l  | grep -v Regex      | aw"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec compress -bz2 {} \\; | awk Program      | awk Program  "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;   }    | sed Program     "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively that have the same inode number <|target|> find Path -inum Quantity -exec md5 {} \\;   | grep Regex       |"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 444. <|target|> find Path -type f -newer File! -name Regex -exec chmod Permission {} +       ( wc"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 755 <|target|> find Path -exec chmod Permission {} \\;   -exec echo {} \\;        | tr"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them twice in one row followed by the contents of the last line <|target|> find Path -mtime +Timespan -exec echo Regex Regex Regex {} + "
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec ls -l {} \\;  | grep Regex      | tr Regex Regex       | sed Program    "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number and the file names <|target|> find Path -print0 | xargs -0 -I {} grep -c Regex {}"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which have the same inode number <|target|> find Path -inum Quantity   | xargs -I {} ls -l {}       | grep Re"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -exec chmod Permission {} \\;        ( chmod"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of history, the lines that begin with the current name have been modified to begin with the current date. <|target|> find Path -name Regex -type f -exec sed Program {} \\;  |"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for all the files in the current directory and below that have not been accessed in over 30 days or in the past. <|target|> find Path -type f -atime +Timespan -exec grep -l"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than the first \"file\" and delete them <|target|> find Path -newer File -print | xargs -I {} rm -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (This will remove the oldest file in the current directory.) <|target|> find Path -type f -printf '%T@ %p\\n' | sort | tail -n Quantity | cut -d Regex -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Identify and rename each directory in the current directory by replacing all instances of \"PATH_TO_FOLDER\" with \"PATH_TO_FOLDER\" in the output <|target|> find Path -name Re"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -mmin +Quantity -delete  -type f -name Regex -mmin +Quantity -exec rm {} \\;       "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File               | ssh Regex             | ssh Regex  "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that are not newer than \u2018file* <|target|> find Path -type f -name Regex -newer File! -name"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names with null character as the delimiter <|target|> find Path -print0   | xargs -0"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace every occurrences of 'file' with 'error' in those files/directories <|target|> find Path -print0"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find the most recently accessed command and display its name and command line. <|target|> find Path -type f | grep Regex | awk Program | xargs -I {} ls -"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory and sub-directories that have been modified within the last day. <|target|> find Path -type f -mtime Timespan -daystart -exec"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This command find displays the current directory and all its sub-directories. <|target|> find Path -name Regex -print0 | xargs -0 -I {} wc -l {}"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -name Regex -execdir pwd \\;   -print               | tr"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This command will search for files which are writable by their owner and group and remove the files. <|target|> find Path -perm Permission -exec rm -r -f {} \\; "
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and replace all newlines with spaces in the output <|target|> find Path -type f -exec sed Program | xargs -I {} m"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long line of 10 or more files starting with \"file\" and ending with \"file.txt\" and using the format \"file.txt\" <|target|> ls -1 | awk Program  | awk Program     | sort | tail"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive pattern 'filename' in their paths <|target|> find Path -iregex Regex        -print        | xargs -I"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;         then print  'file'  '+' "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and count them <|target|> find Path -type f -ls | sort | uniq -c | sort -n  | tail -n Quantity | awk Program   | sort -n  | tail"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0  \\( -name Regex -false \\)  \\(! -name Regex -false \\)   | xargs -0 -"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | xargs -I {} echo Regex {}     | xargs -I {} rm {}           {}  "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex           | xargs -I {} ls -l {}    | awk Program        "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> cat File | grep Regex | tr Regex Regex          | grep -v Regex       | tr Regex Regex               | xargs -I {} cat"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has joined the list of 50 most used utilities for the current kernel. <|source|> find Path -type f -exec sed -i Program {} \\;   | sort   in  different order  and then print  the total  output  and delete it. <|"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permissions to 644 <|target|> find Path -type f -exec chmod Permission {} \\;     | sed -n Program            | xargs"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type d -exec chmod Permission {} +      | sed Program       | xargs"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files from the current directory tree that were last modified more than 7 days ago. <|source|> find Path -type f -mtime +Timespan | xargs -I {} rename Regex {}      | tr"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -L -name Regex -exec basename {} \\;  | grep Regex       | tr Regex Regex "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have not been accessed in the last 30 days. <|target|> find Path -atime +Timespan -exec date -f File {} \\;       | awk Program     "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 MB in size <|target|> find Path -size +Size -print | xargs -I {} echo Regex Regex Regex {}      "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex             /usr/share/my-editor/my-editor-executable             /usr/share/my-editor/my"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the file paths to the directories they are in <|target|> find Path -depth -type f -empty -execdir echo {} \\;  | tr Regex Regex   "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively whose path names contain \"some text\" <|target|> find Path -type f -name Regex -exec grep -l Regex {} +  | xargs -I {} grep Re"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -s {} \\;  | awk Program           | sort  |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and search for \"foo\" in those files <|target|> find Path -name Regex | xargs -I {} grep -i Regex {}  | xargs -I {} grep -i"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0 -name Regex -exec echo Regex Regex Regex {} \\; -or -name Regex -exec sed -i Program"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the list of files and directories of the /etc directory tree <|target|> find Path -execdir echo {} \\;  | tr Regex Regex       | tr -d Regex        "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;     | awk Program       ( sort )    | sed Program  "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill $( master -s -N File | wc -l )       | more           ( SIGHUP )           ( SIGHUP )       "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec cat {} \\;  | xargs -I {} cat {}   | grep Regex         "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than /etc/passwd <|target|> find Path -newer File        | cpio -p -d -u -m       "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'file.tar.gz' by modification time <|target|> find Path -newer File -print   | xargs -I {} tar -c -j -f"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $savedir directory <|target|> find Path -type f -exec chmod Permission {} \\;      | grep Regex        | tr -s Regex  "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been one of the world's leading source of information for environmental and human, environmental and sociological users. <|target|> find Path -iname Regex -or -iname Regex        | xargs -I {} grep Regex"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> cat $( find Path -name Regex ) | wc -l    | grep -v Regex | wc -c      | awk Program      | grep Regex      | tr -d Regex  "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path | xargs -I {} readlink -f File            | head"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>  Print the output of \"ls\" with no echo (rails) in the output <|target|> ls | grep -E Regex | sed Program     | tr Regex Regex      "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed command with options from the current directory tree <|target|> find Path -name Regex -exec sed -i Program {} \\;   "
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all the files in the current directory tree that have not been accessed in the last 30 minitues. <|target|> find Path -atime +Timespan -type f -exec ls -l {} \\;   |"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -maxdepth Quantity -perm Permission -exec chmod Permission {} \\;    "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type d -exec chmod Permission {} \\;    | grep -v Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} Regex \\;  | sed Program          "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the \"config\" command on each of them. <|target|> find Path -mmin -Quantity -name Regex | xargs -I {} command"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;    | grep -E -o"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;  | grep -E -v Regex              | xargs -I {} grep -l"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex | xargs -I {} readlink File        "
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -name Regex -exec chmod Permission {} +     -print "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by default, create a tar archive of all the files in the current directory tree excluding those that are present in the subdirectory /path/to/directory. <|target|> find Path! -path Regex -pr"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory is the directory where the oracle is located. <|target|> find Path -type f -name Regex | xargs -I {} dirname {}  | tail -n Quantity  | xargs -"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files under current directory and print the line 235 of each file. <|target|> find Path -type f -exec bzip2 {} \\;  | grep -E -v Regex    "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -perm Permission | sed Program   | grep -E -o Regex "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755. <|target|> find Path -type f -exec chmod Permission {} \\;     | awk Program"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print the names of the directories they are in <|target|> find Path -type f -exec split -l Quantity {} \\;    | grep Re"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path Path Path -type f | xargs -I {} chmod -v Permission {}               | xargs -I {} chmod"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec sed -i Program {} \\;   | tr Regex Regex              | tr Regex Regex"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;      chmod Permission File \\;         "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified more than 7 days ago <|target|> find Path -type f -mtime +Timespan | awk Program  | sed Program      | sed Program      | tr Re"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'Lawler' under current directory tree <|target|> find Path -name Regex -execdir echo Regex {} \\;    then search for the case insensitive regex 'Lawler' in all files  and display the"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not newer than the file $newerthan and delete them <|target|> find Path -type f -name Regex -size +Size -exec rm -r -f {} \\;    | xargs"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of regular files from the current directory tree that were last modified between 2014 and 2014-04-30 <|target|> find Path -newermt Regex! -newermt Regex -type f -exec ls -l {} \\; | awk Program "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the command ~ while distressing the output. <|target|> find Path -exec echo Regex Regex {} Regex \\;     | grep Regex         |"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regextype posix-extended \\( -regex Regex -or -regex Regex \\)      | awk Program         | grep Regex            | cut"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex {} \\;   | xargs -I {} chown Regex {}               "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a question that is hard to answer. <|source|> Answer \"y\" to all of the prompts below. <|target|> yes | grep Regex | awk -F Regex Program          | tr Regex Regex  "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the current directory tree, find all files that are less than 50 kB and print their names and sizes <|target|> find Path -type f -size +Size -exec ls -l {} \\; | awk Program    | grep -"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /bin/bash and older than /bin/bash <|target|> find Path -newer File -and! -newer File -exec rm -i {}"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex         | grep Regex         | xargs -I {} grep -i Regex {}      "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of files that are not newer than the file /tmp/t.png <|target|> find Path -newer File   -print   | xargs -I {} ls -l {}    | awk Program "
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 10000000x512 bytes in size <|target|> find Path -type f -name Regex -size +Size -exec rm {} \\;       | x"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;     | awk -F Regex Program     "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been one of the oldest and largest economies in the world. <|source|> Calculate the average time of 4.5 hours for each top-level domain name in the current directory and subdirectories. <|target|> find Path -"
    }
  ],
  "23.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a common question mark in the current user's home directory. <|source|> find Path -name Regex -exec grep Regex {} +   | grep Regex        | sed Program       "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                   read -r -d Regex                     "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -user Regex -print | xargs -I {} grep Regex {}     | head -"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the names of the directories before the paths themselves <|target|> find Path -maxdepth Quantity -type f -exec basename {} \\;   | tr Regex Regex"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines matching the regex '<script>' in their contents <|target|> find Path -exec grep -E Regex {} +  | grep -E -v Regex "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their file names <|target|> find Path -type f -execdir echo {} \\;  | grep Regex         | tr Regex Regex"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second column of output of the ls -l command, replacing the last occurrence with a newline character. <|target|> ls -l | sed Program      | tr Regex Regex       | head -"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex {} \\;  | tr -d Regex               Re"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all directories under Folder1 and copy them to Folder2 <|target|> find Path -type d -exec cp {} File \\;    | tail -n Quantity  | tr Regex Regex     | tr"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -prune -or -print     | tr Regex Regex          | grep Regex"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Find all the files in the /mnt folder which are bigger than 10 megabytes <|target|> find Path -type f -size +Size -exec mv {} File \\;    | grep Regex          | x"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files whose names begin with \"file\" in the current directory tree, excluding the paths containing the directory \"foo\" <|target|> find Path -path Regex! -path Regex! -path Regex -print  | grep -v Regex "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail    | cut -d Regex -f Number | head           | xargs -I {} grep -L Regex {}     | tail        "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree that are not newer than some other file <|target|> find Path -type f! -newer File -print   \"The file '%f' is newer than 'file'...\"    will not print  if"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 columnist results. <|target|> find Path -iname Regex -type f | sed Program | sort | comm -2 -3  | sed Program | head -n -Quantity | awk Program       | sed Program"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are owned by user 'tom' and change their ownership to 'tom' <|target|> find Path -user Regex -exec chown Regex {} \\;    | cut -d Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their ownership to the user's user <|target|> find Path -user Regex -exec chown Regex {} \\;      chmod -R Permission File       "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} \\;  | tr Regex Regex                | tr Regex Regex   "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /tmp/file and older than 2013-12-04 by modification time <|target|> find Path -type f -name Regex -newer File -newer File -print0 | xargs"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree showing the number of lines and the number of lines with NOPORTDOCS <|target|> find Path -print0 | xargs -0 -I {} wc -l {}  | grep -n -e Re"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -perm Permission   | head        | sed Program         | xargs -I {} chmod Permission {}   "
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting file, at last, is at least 1,000 megabytes in size. <|target|> find Path -type f -size +Size -exec ls -l File {} \\;  | awk Program      | grep -v Regex   "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their sizes and names <|target|> find Path -type f -exec du -s -h {} \\; | awk Program       | cut -d Regex -f Number      "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -user Regex -print  | sort  and print  the output  will contain spaces <|target|> find Path -user Regex -print "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory using regex <|target|> find Path -regex Regex         | grep Regex        | tr Regex Regex          | tr Re"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are bigger than 100MB and were modified in the last 24 hours <|target|> find Path -size +Size -mtime Timespan -exec ls -l -h {} \\;    | sed Program    "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than some_file_ <|target|> find Path -newer File      -print  | xargs -I {} ls -l -d {}   | awk Program    "
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File                user Regex              file            ssh              "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A new report from the CDC finds that the number of non-travelers in the world is decreasing. <|source|> find Path -type f -iregex Regex! -numbers -exec ls -l -t -r {} \\; | sed Program     | grep Regex  "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100 Kilobytes <|target|> find Path -size +Size -exec ls -l -d {} \\;  | awk Program       | sort   | awk Program  "
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user john <|target|> find Path -user Regex -exec rm {} \\;         file           (case insensitive)  | tr"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                  ( x/ )        ( )       | grep Regex            ( )    "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Count the number of regular files in the current directory tree <|target|> find Path -type f | xargs -I {} grep -i Regex {} | awk Program   | wc -l    | sort | uniq | tail - Quantity    | tr Regex Re"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -or -name Regex      | xargs -I {} grep -i -l Regex {}             | grep Regex                 "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named \"file1\" in the entire filesystem <|target|> find Path -name Regex -print   \"where  is the file name <( sed -n Program File ) \"  \"  \"where  is the directory path "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not owned by any user or group <|target|> find Path -type f -not -user Regex -print0 | xargs -0 -I {} du -a --files {} | tail -n Quantity   "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 777 permission under current directory tree <|target|> find Path -perm Permission -type f -exec gzip -N {} \\;         Print  \"*Checking Partition      * Per"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'Nov' by modification time <|target|> find Path! -newer File -exec mv {} File \\;       then  print  'Nov' by deleting all"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are newer than the file $1 and older than the file $2 and print the timestamps of the files/directories along with their sizes <|target|> find Path -newer File -and -user Re"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their lines of text <|target|> find Path -print0 | xargs -0 -I {} wc -l {} | grep -i -w -Z Regex  | sort | uniq  | sed Program "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of small files each with a number prefix \"1\" followed by a number from 1 to 10. <|target|> find Path -maxdepth Quantity -type d | awk Program | sort | uniq -c | sort -n -"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex Regex {} \\;   | grep Regex           | tr Regex"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not readable by the public and delete them <|target|> find Path -type f! -perm -Permission -exec rm {} \\;   | tr Regex Regex      "
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link in the current directory for each file under the current directory that is newer than file \"file1\" and older than file \"file2\" <|target|> find Path -newer File! -newer File -exec cp {} File \\;"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -l -s {} \\;        | awk Program         "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'file' by modification time <|target|> find Path -newer File -print0 | xargs -0 -I {} sed -i Program File {}  "
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process for a file to be created. <|target|> find Path -type f -name Regex -exec ls -l {} \\;   | awk Program    ( sort )   ( sort )    | head -"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;  | tr -s Regex Regex      |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -iname Regex -exec ls -a -l -h {} \\; | awk Program      is an interactive"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -n -v -r --exclude Regex File File              xargs -I {} cp -a --exclude Regex File               "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under downloads directory that match the pattern 'file_name' in their names <|target|> find Path -name Regex | sed Program   | awk Program   | sort  | uniq "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory, and count them. <|target|> find Path -type f -exec ls -l -r -t {} + | awk Program   | sort | tail - Quantity | cut -"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File {} \\;         then tar all the files to /var/log/apache-common-data  directory <( tar File -c -v -"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -name Regex | xargs -I {} wc -l {} | sort -n -r  | tail -n"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /tmp/foo and older than /tmp/foo <|target|> find Path -newer File -and -older -name Regex     | sed"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path! -name Regex -exec ls {} \\;  | wc -l         | tr Re"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user whose name is \"Camsoft\" and whose name is \"Camsoft\". <|target|> find Path -name Regex -or -name Regex    -print   | xargs -I {} find Path {} -"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -print0 | xargs -0 -I {} wc -l {} | sort -r -h | awk"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not \"RC1\" and do not contain \"RC2\" <|target|> find Path -type f! -name Regex -print0 | xargs -0 -I {} grep -"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -user Regex -name Regex        | xargs -I {} grep -"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to quit? (Y/N) <|target|> yes Regex | sed Program    | grep Regex     | cut -d Regex -f Number   | xargs -I {} rm File        "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file \"compute_dir\" which is located in the user's home directory. <|target|> find Path -path Regex -prune -or -name Regex -print0 | xargs -0 -I {} echo Regex Regex {} "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print | xargs -I {} rm -r -f {}           {}         {}             {}        "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user'me' <|target|> find Path -user Regex -exec echo Regex Regex \\;   | tr Regex Regex            Change"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec awk Program {} \\; | wc -l     | grep -o -E Regex     | grep -"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '.*~' in their paths <|target|> find Path | grep Regex  | xargs -I {} rm -r {}           | xargs -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 644. Are you sure? (Or empty) files? (Or create new ones)? [Y/n] <( grep -v Regex File | cut -d Regex -f Number )   "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file' under current directory tree <|target|> find Path -name Regex -ctime Timespan            | xargs -I {} echo Regex Regex Regex {}  "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than Jul 01 by modification time <|target|> find Path -newermt Regex! -newermt Regex -exec echo Regex \\;   | tr Regex Regex   "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link in the current directory for each file matching \"file_name.txt\" <|target|> find Path -name Regex -exec ln -s {} \\;    | sed Program       | sed Program      "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -s {} \\; | awk Program        "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> Find all files/directories that are not owned by the user \"sar\" or by group \"sar\" <|target|> find Path! -group Regex -name Regex  -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'lastModifiedFile' <|target|> find Path -newer File! -newer File -print  \"The"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Sending a signal to the console that a process with id number \"$ID\" is in process. This will normally be called \"suspend\". <|target|> kill - Regex Regex Regex       "
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory tree whose names are \"file1\" and delete them <|target|> find Path -name Regex -exec rm -r -f {} \\;    | tr"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory is for the user who is logged in as user \"user\" and using identity file \"/path/to/your/directory/is.id\" <|target|> find Path -type f -not -iwholename"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file \"file.old\" <|target|> find Path -newer File -print     | xargs -I {}"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -type f -mtime +Timespan -name Regex -exec bzip2 {} \\;  | tar -x -v -f File         | uniq     "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories and print them on a single line (to be read from standard input)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and names <|target|> find Path -exec ls -l -d {} \\;  | tr Regex Regex     "
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'blowjob' in their contents <|target|> find Path -type f -iname Regex -print0 | xargs -0 -I {} grep -i Regex {}  | grep"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not the same file as \"/dir/to/to/search/\" <|target|> find Path -type f! -samefile Regex  -print   \"*Checking for 'no' in all files "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them in one line (to the console) <|target|> find Path -print0 | xargs -0 -I {} date {}   | awk Program       | sed Program "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and request for a recursive transfer of their contents <|target|> find Path -exec cat {} \\;    | grep Regex     | cut -d Regex -f Number     "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec rm -r {} \\;          | sed Program            "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -d {} \\; | awk Program                    | sort   "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -s {} + | sort -r -n | head - Quantity        ( find Path -type f -size +Size )     | tail -n Quantity     | sort"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -s {} \\; | awk Program          | awk Program       "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file' under current directory tree <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}  | awk Program       | sort  | aw"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> By default, Emacs uses the default configuration for all configuration files. <|source|> find Path -name Regex -print0 | xargs -0 -I {} du -h {} | grep -E -v Regex | cut -d Regex -f Number | xargs -I"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest and largest file systems have been changed in the last minute. <|source|> find Path -type f -mmin -Quantity | xargs -I {} ls -l -S -r -t {} | awk Program     "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their sizes in bytes. <|target|> find Path -type f -exec du -b {} \\; | sort -n -r    | head -n Quantity     "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure that your text file is in the directory /home/user/Desktop/? <|target|> find Path Path -type f -name Regex -print0 | xargs -0 -I {} echo Regex Regex {}    "
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word and count the unique lines in each one. <|target|> find Path -type f -exec grep -i Regex {} \\; | wc -l    | tr -s Regex | grep -c Regex "
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -exec chmod Permission {} \\;    | grep Regex      | cut -d Regex"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified more than 7 days ago <|target|> find Path -type f -mtime +Timespan -exec ls -l {} \\;  | tr -d Regex   "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names are \"file-containing-exclude\" <|target|> find Path -name Regex -or -name Regex -or -name Regex   -or -name Re"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path Path Path -type f -prune -name Regex -or -type f -print         | xargs -I {} find Path Path {}               | x"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' and change their ownership to 'Usa' <|target|> find Path -user Regex -exec chown Regex {} \\;  |"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file /tmp/mysql and older than the file /tmp/mysql <|target|> find Path -newer File -print     "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each of them <|target|> find Path -inum Quantity -exec file {} \\;     Print the output of the command itself <|target|> find Path -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file, at the moment, is at the top of the screen. <|target|> find Path -type f -mmin Quantity | xargs -I {} ls File {} | awk Program       | sort  | awk Program  "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Find all files/directories under current directory tree that are larger than 10 megabytes in size <|target|> find Path -size +Size -iname Regex  | wc -l   | grep -i Regex    | awk Program  "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>NEW DELIVENCHES -- A common file name for each directory in the current directory tree <|target|> find Path -type d -exec ls -l -d -A -r File {} \\;   | awk Program    is an action so it can"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the names of the files that cannot be read by the user <|target|> find Path! -name Regex -print0 | xargs -0        | grep -"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -name Regex -exec chmod Permission {} \\;   | tr -c Regex Regex       | xargs"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count them <|target|> find Path -type f -execdir chmod Permission {} \\; | wc -l      | sort   | awk Program      ( sort"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec grep -m Quantity -s Regex {} \\;   | sort   the matched lines  and display the matched lines along with the file names <( find Path -type f -exec grep -i -H Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that are not owned by any user or group <|target|> find Path -nouser -or -nogroup -or -user Regex    | sort  | xargs -I {} grep"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second line of output of \"bash\" <|source|> ls -1 File | tail -n Quantity | cut -d Regex -f Number | head -n Quantity | sed Program     | tr Regex Regex       "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'Nov' by modification time <|target|> find Path -newer File -type f -print0 | xargs -0 -I {} sed -i Program"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in line-long column of numbers from the current line. <|target|> find Path -iname Regex -type f -exec cat {} \\; | tr -d Regex       | cut -d Re"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File File            | tee File                     | xargs -I {} -I {} gun -I {} wc -l"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of information about the world's leading jobs and also contains detailed information about its users and the jobs. <|source|> find Path -type f -exec cat {} \\; | xargs -I {} ls -l {} "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and count the number of lines in them. <|target|> find Path -type f -exec grep -n Regex {} \\; | wc -l  | sort | tail - Quantity  "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'bob' <|target|> find Path -user Regex -exec echo Regex \\;  -print      | xargs"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'dr' and have been modified within the last 5 minutes <|target|> find Path -user Regex -mmin -Quantity -print0 | xargs"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since its release in the '90s, the number of files in the current directory has been decreasing. <|source|> find Path -type f -newer File! -newer File -exec ls -l -s -t {} + | sed Program"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the file command on each of them <|target|> find Path -exec echo Regex {} \\;  | sh  | xargs -I {}      "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the line number and the file/directory name <|target|> find Path -name Regex -mtime Timespan -printf \"%y %p\\n\"    |"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f | sed Program | xargs -I {} chroot -R Regex {}          | awk Program        "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files under the current directory and print the output to the console and append to the /tmp/ directory. <|target|> find Path -type f -name Regex -exec echo Regex Regex \\; -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print their names and contents <|target|> find Path -exec tar -u -f File {} \\;  | grep -E -v Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Determine the type of the file system containing /tmp/dir. <|target|> df File | sed Program        | grep -E Regex        | awk"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory and sub-directories that were last modfied more than 7 days ago <|target|> find Path -mindepth Quantity -mtime +Timespan -exec ls -l"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all files/directories with permissions 755 and are more than 1000 days old. <|target|> find Path -perm Permission -atime +Timespan -exec ls -l {} \\;"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex 'foo=' in their paths and print their names <|target|> find Path | xargs -I {} grep -i"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all directories under current directory and change their permission to 755. <|target|> find Path -type d -exec chmod Permission {} +  \\;   }   | grep"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, Emacs has been the primary command for all users. <|target|> find Path -name Regex -print  | grep Regex        | xargs -I {}"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -mmin +Quantity -delete  -type rm {} \\;  | grep Regex      | xargs -I {} rm {} "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv File File          /    directory /           /   directory         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -name Regex -exec wc -l {} + | sed"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 'file1' by modification time <|target|> find Path -newer File -print0 | x"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;  "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all files in the current directory tree that are not in the path \"./dir/to/search/\" and not in the path \"./dir/to/search/\" <|target|> find Path"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> find all the files in the current directory which have the name \"Metallica\" and number \"212\" in their name. <|target|> find Path -name Regex -exec grep -n"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for the regex'somename' in all the files in the current directory and list them using the find command <|target|> find Path -name Regex -exec grep -l Re"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files under /home/ABC/ <|target|> find Path -type f | sed Program  | grep -v Regex  | sed Program   "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -name Regex -exec grep -l Regex {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to be expanded to all directories under /home/user/Desktop/Desktop/ <|target|> find Path -type d -exec grep -i Regex {} + Path      |"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -h {} \\; | awk Program    ( true )        | sed Program   "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100M and print their names and sizes <|target|> find Path -size +Size -and -size -Size    | xargs -I {} ls -l -d {} "
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Print the current working directory and the directory name <|target|> pwd $( readlink -f File )               | sed Program               "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than 'bin' and delete them <|target|> find Path -not -name Regex -type f -newer File -exec rm {} +    \\;  | sort  in"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file/directory 'foo' <|target|> find Path -newer File -print      | xargs -I {} ls -l -t {}    |"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and paths <|target|> find Path -name Regex -exec echo Regex {} \\;     | tr Regex Regex       | xargs -0"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'warwick' <|target|> find Path -user Regex -print0 | xargs -0 -I {} ls -l {}   | grep -v Regex "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -type f -print0 | xargs -0 -I {} grep Regex {} | grep Regex       | tr -c Regex      | tr -d Regex             "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers <|target|> find Path -exec wc -l {} +  | grep -n Regex     | sort | uniq -c      | head "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their number of lines <|target|> find Path -type f -exec wc -l {} +  | awk Program  | sort | uniq -c | grep -v Regex   "
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 2013-12-04 <|target|> find Path -newermt Regex! -newermt Regex -exec mv {} File \\;   "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading leader in the field of environmental and human-related safety. <|source|> Finds all files in a current folder and subfolders, and prints only the files that contain \"test\" on a single line. <|target|>"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Download \"file\" with best compression method and save to variable \"compressed_dir\" <|target|> echo Regex | xargs -I {} -0 compress File {}               | tee File  "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -exec chmod Permission {} \\;     (print )      | sed Program    "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and their sizes <|target|> find Path -exec cat {} + | tr Regex Regex       | tr Regex Regex     "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex                   Directory            Path        Path          "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -depth -exec chmod Permission {} \\;     | tr -s Regex Regex     "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 128128 bit addressing and print their names and sizes <|target|> find Path -type f -exec ls -l -h {} \\; | awk Program          "
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec basename {} \\;  | tail - Quantity  | cut -d Regex -f Number      | sed Program       | grep Regex      |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;    }   ( wc -l )    /home/user/"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -regex Regex -exec echo {} \\;     Print  \"null\" is the delimiter for each file/directory in current"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'foo' in the current directory tree <|target|> find Path -name Regex -exec sed -i Program {} \\;    | tee File            | od"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /tmp/foo and older than /tmp/ <|target|> find Path -type f -newer File -and! -newer File -print      | tr"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex $( pstree -s -A -p Regex | sed Program | sort )           kill $( readlink -f File )               kill $( readlink File"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%s\\n\" | sort -n | tail -n Quantity   | cut -d Regex -f Number "
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with space in their names under current directory and rename them by replacing all spaces with _ <|target|> find Path -name Regex -execdir rename Regex {} \\;           ("
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are not owned by the user 'tom' <|target|> find Path -nouser -or -nogroup -print       | grep -i Regex  "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set write permission for group and others for each of them <|target|> find Path -type f -exec chmod Permission {} \\;   -print        ( chmod"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -iname Regex -exec ls -l -d {} \\; | awk Program           | sort "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> wc $( find Path -name Regex -printf \"%f\\n\" )        | awk Program      | wc          | wc         | awk"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and run the sed script \"npm-packages\" on them. <|target|> find Path -exec sed -n Program {} \\;      | grep Re"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This will remove all files in the current directory that were last modfied more than 7 days ago. <|target|> find Path -mtime +Timespan -exec rm -f {} \\;      | grep"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not directories and do not contain \"foo\" <|target|> find Path -name Regex! -type d -name Regex -print0 |"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -exec ls -l -d {} \\; | awk Program     "
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names. <|target|> find Path -mtime Timespan -exec ls -l {} \\;  | awk Program     "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} Regex \\;    | tr Regex Regex   "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex [^=] in their names <|target|> find Path -regex Regex    | xargs -I {} mv {}"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 775 <|target|> find Path -mmin -Quantity -exec chmod Permission {} \\;  ? <( find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory, do not search in the sub directories and move them to Folder ~/Library. <|target|> find Path -type f -exec ls -l {} +  | sed Program "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -s Regex {} \\;      Path       | grep Regex             | grep -i Re"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with '.log' extension excluding directories and their subdirectories <|target|> find Path \\(! -name Regex! -name Regex \\) -type d"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below /dir that were modified more than 5 minutes ago <|target|> find Path -mmin +Quantity -mtime +Timespan -print0 | xargs -"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Display differences between file1 and file2. <|target|> diff -u Quantity File File        | grep Regex               "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and change their permission to 640 <|target|> find Path -exec chmod Permission {} +  | tail       | tail "
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's environment has changed in the last 100 days. <|source|> find Path -type f -mtime -Timespan -exec bzip2 {} \\;      | grep Regex  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'filename' in their paths <|target|> find Path -maxdepth Quantity | grep -E -i Regex  |"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all directories under and below /tmp/test/ and delete them <|target|> find Path -type d -exec rm -i -r -f {} \\;    | sed"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec split -b Size File       /usr/bin/google"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path -type f -exec chmod Permission {} \\;  | xargs -L Quantity -I {} chmod Permission {}              "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/ <|target|> find Path -type d -maxdepth Quantity -exec basename {} \\;    "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -name Regex -exec sed -i Program {} \\;     | sed -i Program {}        | tr Regex Regex    "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree that have been modified within the last 10 minutes <|target|> find Path -mmin -Quantity -type f -name Regex      | tr Regex Regex     | tr Regex"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory tree that are newer than \"file\" and older than \"file\" by modification time <|target|> find Path -newer File -and -and! -newer File      | sed Program   "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -name Regex | xargs -I {} gunzip -v -t {} | wc -l     | sort | tail -n"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the looks of things to be owned <|source|> ls File | sort | uniq -c | sort -n -r  | head        | tail       | xargs -I {} ls {}       "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose size is less than 100 Kilobytes <|target|> find Path -size -Size -and -size -Size      | wc -l     | grep Regex   "
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names followed by the file names <|target|> find Path -exec echo Regex Regex Regex {} Path          | xargs -I {} dirname {} "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex  -print0    | grep -E Regex                  | grep -v Regex                  "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex Regex {} \\;     | tr Regex Regex        | tr -d Regex   "
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than /data/db by modification time <|target|> find Path -newer File -print        | xargs -I {} chmod -R Permission {}  "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -perm Permission -exec chmod Permission {} \\;     print  '-okdir"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>A long list of the most used utilities from the list below. <|source|> find Path -type f -exec ls -l {} \\; | sort | tail - Quantity | cut -f Number | xargs -I {} rm -f {}  "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex -print           | xargs -I {} -I {} grep Regex {}        {}     "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -mmin -Quantity -exec basename {} \\;    | awk Program        | xargs"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory tree whose names are \"file_name\" <|target|> find Path -type f! -newer File  -print   | sed Program   | sort | uniq  |"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that are larger than 100 Kilobytes. <|target|> find Path -type f -size +Size -exec ls -l -t -r {} \\; | awk Program     ( sort File )"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Are you sure you have read and execute permission for all? (Y/n) for all? (default) for all? (Y/n) for the user with the most memory? (LD) for the file system? (Y/n) for the"
    }
  ],
  "24.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named'somename' under current directory tree <|target|> find Path -name Regex -and -name Regex       | grep -E -i Regex   "
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -p Regex Regex                      ( echo Regex )                   ( echo"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than 2013-12-04 and print the timestamp in 'file' <|target|> find Path -newer File -print      | xargs -I"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -execdir echo {} Path -print   \\;   | tr Regex Regex        | tr Re"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec basename {} \\;   | rename Regex            | sed Program   "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names and sizes of all regular files from the current directory tree <|target|> find Path -type f -exec ls -l -s {} + | sed -n Program   | awk Program    | xargs"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      ( wc -l )    "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The file \"file\" is a directory in which user 1 is logged in and the directory containing the command \"oracle\" <|target|> cd $( which Regex )      | sed Program         | tr Re"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to delete all the files in the current directory? Are you sure you want to continue using the default configuration of \"cpuset\" which has the current user? <|target|> find Path -maxdepth Quantity -name Regex -exec"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not the same file as \"/home/user/demo\" <|target|> find Path! -path Regex -print0 | xargs -0 -I {} grep -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> find Path -type f -iname Regex -exec mv {} File \\;   | xargs -I {} mv {} File                 {}          "
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -exec ls -l -d {} \\; | awk Program           | sed Program        "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail     | head       | tail -n Quantity              | head -n Quantity          | tail -n Quantity "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and contents <|target|> find Path -user Regex -exec cat {} \\;  | xargs -I {} ls -l {}        | awk Program   "
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user `ian' <|target|> find Path -user Regex -exec grep Regex {} \\;   | awk Program         | sort    -"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To find all files/directories under current directory, print the output line <|target|> find Path -exec echo Regex {} \\;  | tr Regex Regex           | sed Program            "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree <|target|> find Path -perm Permission      | grep Regex        | tr -s Regex Regex       | grep Regex  "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100k <|target|> find Path -size +Size -exec ls -l {} \\;   | grep Regex         | grep Regex     "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'pete' <|target|> find Path -user Regex -not -user Regex -not -name Regex -type f -print0 | xargs -0 -I {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are less than 100M. <|target|> find Path -size Size -print      | xargs -I {} gunzip -v {}     | tail - Quantity     "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user'michel' <|target|> find Path -user Regex -exec chmod Permission {} \\;  | awk Program      (cannot use with gcc, gzip, etc"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file $newerthan and do not contain the \"old\" string <|target|> find Path -name Regex -not -newerthan {} Path -print   | xargs -I {} grep"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively that are not in the \"dir1\" subdirectory and delete them <|target|> find Path -type f -name Regex! -name Regex -exec rm {} \\;   | xargs -I {} rm {}"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} + | tr Regex Regex       | grep Regex               | xargs -I"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the most recently accessed files in the current directory. <|target|> find Path -type f -exec ls -l {} \\; | awk -F Regex Program      | sort     | awk Program     | sort  "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are greater than 10000000x512 bytes in size <|target|> find Path -type f -size +Size    | xargs -I {} ls -l -d {}  | tail - Quantity     "
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with newline in their names <|target|> find Path -newer File        | xargs -I {} echo Regex Regex Regex {}           | xargs"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File  \\;      /data/daylight        /bin/ksh. <( cal )     /tmp/kshn       /tmp/dir          "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the.JPG files in the current directory tree. <|target|> find Path -name Regex -exec ls -l -d {} \\;    | grep Regex       | cut -d Regex -f Number     "
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file $newerthan and older than the file $olderthan and sort them according to the newer file and delete the oldest file <|target|> find Path -type f -name Regex -newer File!"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the list of the current directory's subdirectories <|target|> find Path -type f -name Regex -exec basename {} \\;    | tr Regex Regex       | sed Program         |"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex            -print                | grep Regex                   | xargs -I {} dir"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified between 1 and 3 days ago. <|target|> find Path -mtime +Timespan -type f -exec ls -l {} \\;  | tr -s Regex Regex      | head -"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex  -or -name Regex  -or -name Regex  -or -name Regex           | xargs -I {} grep -i Regex {}               "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the group'staff' <|target|> find Path -group Regex -print0 | xargs -0 -I {} ln -s -F {} Regex         "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long listing of the files that are newer than /bin/emacs or older than /bin/svn. <|target|> find Path -newer File -and -newer File -and -exec ls -l {} \\;   | awk Program     "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 777 permission and have been modified in the last 180 days <|target|> find Path -perm Permission -mtime -Timespan -print0 | xargs -0 -I {} gzip -9 {}    | grep -o -"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named \"file.ext\" under current directory tree <|target|> find Path -name Regex -print0 | xargs -0 -I {} mv {} File            {}     "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> find Path -exec ls -a -l {} \\;  | awk Program        | sed Program        | tr Regex "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -user Regex -exec echo {} \\;   | tr Regex Regex            | grep Regex      "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -mindepth Quantity -maxdepth Quantity -type d -exec mv {} File \\;  -or -type f -exec mv File \\;   "
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the series that begins with the current directory. <|target|> find Path -maxdepth Quantity -name Regex -type f -print0 | xargs -0 -I {} grep -n Regex {}     | head -"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in the output <|target|> find Path -name Regex | xargs -I {} wc -l {}   | sort -n | tail - Quantity | cut"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory tree that are not newer than the file $newerthan and delete them <|target|> find Path -type f -not -newerthan {} -exec rm {} \\;     ;  "
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and print their names <|target|> find Path -type f -exec chmod Permission {} \\;  | tr Regex Regex         | xargs -0 -I {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and do not have newline in their names <|target|> find Path -type f -size +Size -exec sed -i -e Program -e Program {} \\"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      Print ': no' followed by the file/directory name"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This will be the first file or directory that contains a vowel in its name and file name. <|target|> find Path -name Regex -print | xargs -I {} rename Regex {}         | awk Program   "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only their names <|target|> find Path -exec basename {} \\;   | awk Program               ( echo Regex"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -u -a -v File File File          /(target|> rsync -v -u -a -v File File  )        /(target|> rsync"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 640 <|target|> find Path -type f -exec chmod Permission {} \\;   then chmod Permission File \\;   | wc -"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This will be the second line of documentation for each line of the current directory's sub-directories. <|target|> find Path -type d -name Regex -exec sed Program {} \\;   | sed Program        "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> tar -c -f File $( find Path -iname Regex )         | tar -c -f File $( find Path -iname Regex )           | xargs -I {}"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path $( pwd ) -exec echo Regex {} \\;     Print   \"> find Path $( dirname {} )  "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex -exec echo {} \\;   | sed Program        | sed Program     "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -maxdepth Quantity | xargs -I {} ls -l -d {}    | grep -E -m Quantity   | awk"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been one of the world's leading source of information for environmental and human safety. <|source|> Find all files/directories under current directory and follow to the output of the command provided by the command line <|target|> find Path -print"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'file' and older than 'file' by modification time <|target|> find Path -newer File -and -oldername Regex -type f -print0 |"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100k <|target|> find Path -size +Size   -print      | xargs -0 -I {} find Path -name Regex"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -name Regex -exec chmod Permission {} \\;   | xargs -I {} chmod Permission {}  "
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>You can find all files/directories under current directory and print them as null separated groups <|target|> find Path -inum Quantity -exec echo Regex Regex {} +   null separated groups      ( crontab -l )      /tmp"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse ogg search with a size of 10 kB. <|target|> find Path -iname Regex -size +Size -exec grep Regex {} \\;   | sed Program        | tr Regex Regex     "
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -print | xargs -I {} rm -r -f {}           | xargs -I {} rm -r -f {}                   "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only their names <|target|> find Path -maxdepth Quantity -type f | sed Program  | grep Regex | awk Program   | sort | uniq  | sed -n  and | awk"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec basename {} \\;   | grep Regex     | tr Regex Regex          | awk Program "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and names <|target|> find Path -exec echo Regex {} +     Path         | xargs -I {} rm -r -i {}   "
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '^ERROR' in their names <|target|> find Path -not -name Regex        | grep -v Regex       | grep Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and set their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;   -exec chmod Permission {} \\;        Print file name    "
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has a long history of using the NSTP format for export to the home world. <|target|> find Path -name Regex -newermt Regex! -newermt Regex -print0 | xargs -0 -I {} mv {} File    "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -exec echo {} \\;   | tr Regex Regex         | xargs -I {}     "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -exec ls -l -d {} \\;   | awk Program     ( sort )  ( echo Regex )  ( sort )   ( grep -"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|target|> find Path -name Regex -exec grep Regex {} +  -print     | grep Regex           | tr Regex Regex  "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to continue? (Or are you sure you want to continue anyway?)? (Or are you just going to continue?) and (Or are you going to save the result to variable \"CONDITION\" <|target"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $1 and delete them <|target|> find Path -type f -not -newer File! -newer File -exec rm {} \\"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Prints long listing of all files in a current folder and subfolders. <|target|> ls -l -a -l -- File | tr Regex Regex       | sort -n | tail -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex | sed Program        | grep Regex    | less       | tr Regex Regex          | tr Regex Re"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex \\;    | grep Regex        | tr Re"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path -iname Regex -type f -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}  {}       | xargs -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Search for \"organic\" in all regular files under current directory tree and also print the filenames <|target|> find Path -type f -exec sed -i Program {} \\;  | sort    | grep -E"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not the same file or are not in the same directory as the current directory <|target|> find Path! -name Regex -exec ls -l"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'filename' by modification time <|target|> find Path -newer File -print   | xargs -I {} ls -l -d {}      | sort  | un"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex '^ERROR' in their paths <|target|> find Path | grep -E Regex     | tr Regex Regex      | sed Program    "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the \"cp\" command to move them to /path/to/directory <|target|> find Path -exec mv {} File \\;     | cpio -o      /"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by user 'warwick' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} ls -l {}      | grep -v"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files/directories named'sample' (case insensitive) under current directory tree <|target|> find Path -iname Regex -or -iname Regex -print  | xargs -I {} rm {}        "
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are not newer than /tmp/checkpoint and delete them <|target|> find Path -newer File -not -name Regex -print0 | xargs -0 -I {} rm -r -f {}"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | sort -n -r         | sed Program             | sed -n         "
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -type f -name Regex -exec grep -H -n Regex {} +   | awk Program      | sort  | uniq  | wc           | grep -v Re"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print only the filenames <|target|> find Path -type f -exec basename {} \\; | cut -c Number | sort -n | tail -n Quantity   | tr Regex Regex "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and sizes <|target|> du -a | cut -c Number | tail -n Quantity       | awk Program  | sort  | uniq | xargs -I {}"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the start of the day, the day before the year 2000, the day before the year 1001, and the day before the year 1002, all variables must be set to the same one. <|target|> set Regex to the day of the first"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for a word in all files under current directory and display the file contents <|target|> find Path -type f -exec grep -H Regex {} + | sort -n -r  | head -n Quantity     | xargs -"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the current directory, find all files/directories with the name \"Linux\" and follow them to the directory specified by the filename. <|target|> find Path -path Regex -print0 | xargs -0 -I {} echo Regex Regex"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the use of the variable \"file\" without the containing line. <|target|> find Path -name Regex -or -name Regex -or -name Regex -print      | xargs -I {} readlink"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and contents <|target|> find Path -print0 | xargs -0 -I {} dirname {}      | xargs -0 -I {} cat"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;    | sed Program       ( wc -"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user 'tom' <|target|> find Path -user Regex -mtime Timespan   -print   | xargs -I {} ls -l"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path -type f -name Regex -execdir grep -i Regex {} \\;       | grep Regex                    | xargs -I {}"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long process with only the first instance of \"variable\" (the output of the ls command) and outputs \"variable\" in reverse order. <|target|> find Path -type f -name Regex | xargs -I {} ls -1 {}"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the year, the current date has been changed to the current date. <|target|> find Path -type f -newermt Regex! -newermt Regex -printf \"%Y/%m/%f\"   "
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the current date and older than the file /tmp/test/ <|target|> find Path -newer File -and -not -newer File -exec ls -l File \\;"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory that are not newer than the file/directory in their names <|target|> find Path! -newer File         | grep -v Regex     "
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>To create a symbolic link in the current directory for each file under the directory \"dir\" to \"dir\" <|target|> find Path -type f -name Regex -exec ln -s {} Regex \\;  | awk Program       "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths to directories /tmp/ and /tmp/test <|target|> find Path -execdir echo Regex Regex {} \\;      \\;      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified on November, 2007. <|target|> find Path -type f -newermt Regex! -newermt Regex -ls    | tr Regex Regex    "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> is a file which have fully read,write and execute permission for all users under the current directory. <|target|> find Path -type f -name Regex -perm Permission -exec file {} \\;    -print  \"The file has been modified, has read"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -mindepth Quantity -maxdepth Quantity -exec chmod Permission {} \\;     then chmod Permission {} \\; "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -name Regex -exec grep -o Regex {} \\; -print              | xargs -I {} grep -m Quantity -i Regex {} {}            "
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permissions to 644 <|target|> find Path -type f -exec chmod Permission {} \\;   -print | sed Program      | grep Regex      "
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory where the oracle binary is. <|source|> find Path -type f -name Regex -execdir rename Regex {} \\;       | grep Regex       | awk Program   "
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than \"file1\" by modification time <|target|> find Path -newer File -print    | xargs -I {} sed -i Program File File"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec wc -l {} + | awk Program     | sort | uniq -c  |"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> tee File             cat File              (cannot be a suid or a gid sess )     (volatile or removable) "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting host, S3, has been found to be in a state of undress. <|target|> find Path -type f -iname Regex -execdir uniq -i {} \\;    | x"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -exec grep -o Regex {} + | wc -l    | sort | uniq -c"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec grep Regex {} \\;  | tr Regex Regex             | x"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 755 <|target|> find Path -exec chmod Permission {} \\;     | grep Regex        | x"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their parent directories <|target|> find Path -type f -newer File! -name Regex         | xargs -I {} ls -"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type l -name Regex -exec echo Regex {} \\;   | grep Regex       | tr Regex Regex      | tr Regex Regex   "
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that match the regex '->get(\\|farm:.*' in their paths <|target|> find Path -type f -mtime +Timespan | grep -E Regex | xargs -I"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 700 <|target|> find Path -type f -exec chmod Permission {} \\;      ( wp )  "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the 21st century, the directory tree whose name is given as the current working directory name has been called \"dir\" <|target|> find Path -name Regex -or -name Regex  -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the full path of each file under the current directory and below it. <|target|> find Path -type f -exec ls -l -d {} \\;   | sed Program      | sed"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This command is for converting Unix shell to latex table format. <|target|> sed Program File | xargs -I {} sed -i Program File                "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with space in their names under current directory and rename them to '.nrg' <|target|> find Path -name Regex -print0 | xargs -0 -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}       | grep -E Regex         "
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in Pat's directory tree that are newer than \"file_1\" and older than \"file_2\" <|target|> find Path -newer File -and -type f -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of all directories that do not have a user or group under \"./directory\" and do not have a home directory. <|target|> find Path -type d -maxdepth Quantity -execdir mv"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them with newline as the delimiter <|target|> find Path -print | xargs -I {} echo Regex Regex Regex {}"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -mindepth Quantity -type f -name Regex -mtime +Timespan -delete  -type f -name Regex -mtime -Timespan | xargs -I {} rm {}   "
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -t Directory File           {}      | docker        /   ( xargs -n Quantity -I"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec cat {} +  | wc -l    | grep Re"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files and directories in the current directory tree that are newer than the file /bin/sh. <|target|> find Path -newer File -exec ls -"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 644 <|target|> find Path -exec chmod Permission {} \\;     -"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -perm Permission -exec chmod Permission {} \\; "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than file /tmp/20140625 and delete them <|target|> find Path -type f -not -newer File"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run them in an interactive shell. <|target|> find Path -exec echo {} Regex | xargs -n Quantity -"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Correct the file for each file under the current directory and below. <|target|> find Path -type f -exec echo Regex Regex Regex \\;    | xargs -I"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under and below the current directory that contain \"foo\" in their names <|target|> find Path -name Regex -exec grep Regex {} +  "
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths along with their names and the file/directory they are on <|target|> find Path | sed Program  "
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex -i Regex | sed Program        | grep Regex           | tr Regex Regex           | grep Regex        "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hostinghosting hostname, Regex, has been forced to change owner to \"user\" of the system. Domain name doesn't have to be changed, and the user of the current directory is the current user. <|target|> hostname -a Re"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them. <|target|> find Path -print0 | xargs -0         | xargs -0         Directory     "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex 'filename-pattern' in their paths <|target|> find Path | sort -n | uniq -c | sort -n   | grep -E -v -e Regex  "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under downloads directory that are newer than the file /tmp/blah/upstart and older than the file /tmp/blah/upstart <|target|> find Path -newer File -and! -samefile Regex"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long recursive process that removes the first and last parts of each line in \"file\" and prints the result. <|target|> sed Program File | xargs -I {} rm -f File {}          Print the result    "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;   | grep Regex             | awk Program   "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> find Path -exec grep Regex {} \\; -prune -or -print   | xargs -I {} wc -l {}                              "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex -print0       | xargs -0 -I {} ls -l {}     | awk Program  "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -printf '%s %p\\n' | awk -F Regex Program       | sort  | uniq"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the lines matching the pattern \"file/directory/goes/here\" in their paths <|target|> find Path -exec mv {} File \\;      | grep"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the first in a long line of detailed and detailed information files from the current directory. <|source|> find Path -name Regex -exec ls -l -d {} \\;   | head        | awk Program "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%f %s\\n\" | xargs -I {} ls -l {}     | aw"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to search for a word in all the files in the current directory and display the matched lines along with the file names. <|target|> find Path -type f | xargs -I {} grep -i Regex {}    | sed Program    "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them <|target|> find Path -exec grep Regex {} \\; -print | wc -l     | grep Regex    "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex       /usr/share/my-ditor/       directory /usr/share/my-editor        /usr/share/my-editor-executable"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type d -exec chmod Permission {} \\;   -print  | sed Program        "
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file $tmp and older than the file $tmp and print the names of the others <|target|> find Path -type f -newer File! -newer File"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace all spaces with underscores <|target|> find Path -depth -name Regex -exec echo Regex \\;     | sed Program      | sed Program "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -name Regex      | tr Regex Regex       | xargs -I {} echo {}  "
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0 | xargs -0 -I {} echo {}     | grep -E -v Regex      |"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the names of the directories from the paths expanded by the glob pattern /path/to/files* <|target|> find Path -maxdepth Quantity -type d -exec basename {} \\;   | sed Program       "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user whose name is \"myName\" <|target|> find Path -type f | sed Program   | grep Regex  | sed Program  | tr Regex Regex      | cut -d Regex -f Number  "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex $( cat File )            | xargs -I {} kill - Regex                              "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file /tmp/file and older than the file /tmp/file <|target|> find Path -newer File -and -user Regex -and! -newer File -"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex \\;   | xargs -I {} mv {}       {}         "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than /tmp/daily and print their names and sizes <|target|> find Path -depth -name Regex -prune -or -newer File -print     "
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under $y directory and set read permission for group and others for these files <|target|> find Path -type f -exec chmod Permission {} \\;         Print ':' has been modified."
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} \\;      | cut -d Regex -f Number     "
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> cat File | awk Program | xargs -n Quantity -I {} wc {}     | wc         | wc          | awk Program      | sed Program  "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and replace every occurrences of'subdir' with'subdir' in their names <|target|> find Path -depth -type d | sed -e Program |"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by renaming \"file\" to \"new\" <|target|> find Path -name Regex -exec rename Regex {} +     | tr Regex Regex       | sed Program  "
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and run the sed command with arguments provided in the first argument, without the second argument. <|target|> find Path -mindepth Quantity -maxdepth Quantity -name Regex -type"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -type f -exec ls -l -s {} \\;  | tr Regex Regex       | grep Regex      | cut -d Regex -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -mtime -Timespan -exec ls -l -d {} \\; | wc -l    "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you wish to continue? <|target|> echo Regex | xargs -I {} mv {} File                {}       "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second section of the file \"file\" that is not in the path \"first\" <|target|> find Path -path Regex -prune -or -print | xargs -I {} ln -s -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The directory of the current user's home directory, with its own process and process id. <|target|> find Path -maxdepth Quantity -mindepth Quantity -type d -exec echo Regex \\; -exec cp {} File"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -exec ls -l -d {} \\;  | awk Program   "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;  | grep -E -n Regex      | grep -v Regex        | tr Regex"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -name Regex -print       | tr Regex Regex   "
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -execdir rename Regex {} \\;    | grep Regex     "
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for the first line of the file 'file' <|target|> find Path -iname Regex -type f -exec file {} + | awk Program          "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files that have not been modified in the last 100 days. <|source|> find Path -type f -mtime +Timespan | xargs -I {} ls -l {} | aw"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -maxdepth Quantity -exec bzip2 {} \\;   | sort  | uniq "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the IP addresses for the files they are on <|target|> find Path -maxdepth Quantity -exec grep Regex {} +  | cut"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -type f -exec chmod Permission {} \\;  | awk Program  "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Find all files/directories under current directory and print lines containing the file names of the directories they are in <|target|> find Path -type d -exec split -l Quantity {} \\;   | sed Program"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path -type f | xargs -I {} chmod -Permission {}         | xargs -I {} chmod -Permission {}     "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them on a single line (to avoid the problem of multiple lines in the output) <|target|> find Path | grep Regex | x"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files in the current directory recursively whose names begin with the letters 'R' or 'A' <|target|> find Path -name Regex -type f | grep Regex  | xargs -I {} sed -i Program {}  "
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by the user joe <|target|> find Path -user Regex -exec grep Regex {} +    | tr Regex Regex        | sed Program "
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a question that is hard to answer. <|target|> yes Regex | read Regex          | tr Regex Regex            | tr Regex Regex       "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $1 which have at least execute permission for their owner and group <|target|> find Path -perm -Permission -exec chmod Permission {} \\;       Print  '-exec chmod Permission"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their sizes <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program       | sed Program      "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in a series of 3 columns of data from the last 10 minutes. <|target|> find Path -type f -amin -Quantity | sed Program | wc -l  | grep -v Regex | awk Program    | sort | uniq | w"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -iname Regex -exec echo {} \\;  | grep Regex         | cut -d Regex -f Number   "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -regex Regex          | rename Regex                | awk Program               {}       "
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -perm Permission -exec chmod Permission {} \\;     Print  the output of command 'grad' <( ls File ) <("
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the current directory tree, find all files named \"file.txt\" and set their permission to 755 <|target|> find Path -name Regex -exec chmod Permission {} \\;   } <|target|> find Path -name Regex -exec chmod Per"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -size +Size -exec chmod Permission {} \\;    | grep -v Regex    "
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -iname Regex -exec rm -r -f {} \\;            | sed Program"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime +Timespan -user Regex        | xargs -I {} ls -l {}                     "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the beginning, find all files under current directory and print the names of the files that contain the longest line <|target|> find Path -type f -amin -Quantity -exec ls -l -d {} \\; | sort -r -n | aw"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex 'filename_regex.\\*' <|target|> find Path -regextype posix-egrep -regex Regex     "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files whose names begin with \"or\" and count the number of lines in them. <|target|> find Path -name Regex -exec grep -n Regex {} + | wc -l    |"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec cat {} \\; | sort | uniq | xargs -I {} sed Program {}         "
    }
  ],
  "25.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder excluding search in the path./foo <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the beginning, print \"file1\" is the first line of every line in \"file2\", and print \"file3\" is the last line of any line in \"file1\" <|target|> cat File File | sed Program    | grep"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \" <|target|> read -r -n Quantity -p Regex Regex                          | read -r -n Quantity -p Regex       "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "<|endoftext|> <|source|> Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically remove all files and directories called \"test\" from the current directory tree <|target|> find Path -name Regex -exec rm -r -f {} \\;  | xargs -I {} rm -r -f {}     "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "<|endoftext|> <|source|> Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names <|target|> find Path -maxdepth Quantity -empty          | sed Program            "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> display all symbolic links in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> This will print the names of all files and directories in the current directory but don't go into subdirectories. <|target|> find Path -maxdepth Quantity -type f -exec echo Regex {} \\;    | tr Regex Regex "
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "<|endoftext|> <|source|> List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permissions to 755 <|target|> find Path -type f -exec chmod Permission {} \\;   | xargs -I {} chmod Permission {}     "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "<|endoftext|> <|source|> Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and do not have newline in their names <|target|> find Path -size +Size -not -iname Regex -print0 | xargs -"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"/home/evgeny\" with the \"suid\" flag set <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\;   | awk -F Regex Program       | sed Program   "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Show the last 10.conf files found by `find' in the /etc directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the names of the directories they are in <|target|> find Path -exec dirname {} \\;  | tail      | awk Program   | sort "
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> display all the files on the current folder excluding those that are present in the folder \"./src/emacs\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count them <|target|> find Path -path Regex -prune -or -print0 | xargs -0 -I {} wc -l {}    | grep -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 <|target|><|endoftext|> <|source|> Find all files in the current directory recursively that are not ending in.mp3 or.jpg <|target|> find Path -type f -regex Regex! -name Regex -and -not -name Regex -print0 | xargs -0"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> find all files in the home folder which are modified in the last 2 days. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than /bin/sh. Are you sure? (NO) <|target|> find Path -newer File -print       | xargs -I {} ls -l {}   "
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "<|endoftext|> <|source|> Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end <|target|> find Path -maxdepth Quantity -name Regex | tail      | tail                   | head -n Quantity                    "
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "<|endoftext|> <|source|> Find all files owned by the user daniel in the current directory and below. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia has long been a leading source of information on the human history and creation of the world map. <|source|> find Path -iname Regex -exec sed -i Program {} \\;     then search for the file 'test' in the current directory and all of its sub"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "<|endoftext|> <|source|> count all the html files having a specifc word in a folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are less than 100 KB in size <|target|> find Path -size -Size -name Regex -exec ls -l -h {} \\;   | tr Regex Regex    "
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> List all cron jobs which contain \"word\". <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the regular files from the current directory tree <|target|> find Path -type f -exec echo Regex {} +     | tr Regex Regex   | grep Regex       | sed Program   "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "<|endoftext|> <|source|> long list al the files in the current directory which have read permission to the group <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|source|> Find all files/directories under current directory tree that are not newer than the file 'Nov' by modification time <|target|> find Path! -newer File -exec ls -l -t -r {} \\;  | awk Program   "
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "<|endoftext|> <|source|> Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the current user <|target|> find Path -not -user Regex       | grep Regex        | tr Regex Regex   "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "<|endoftext|> <|source|> Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex [string \"/[0-9]+\\{1,2}' in their names <|target|> find Path -type f -name Regex -mtime +Timespan | xargs -I"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Unzip every \".gz\" file in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -execdir echo Regex {} \\;   | grep Regex         | cut -d Regex       "
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> change permission of all the files in the entire file system which have the permissions 777. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory whose permissions are 777 and show the last ten lines of output for each file <|target|> find Path -type f -perm Permission | head -n Quantity | cut -f Number -d Regex | sort -k Number  | xargs -I"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "<|endoftext|> <|source|> Prints information about active network interfaces in system. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -iname Regex           | xargs -I {} ls -l {}       | awk Program         "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> find all the reguar/normal php files in current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|> find Path -print0   -maxdepth Quantity -type f    | tr -d Regex      | tr Regex Regex     "
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "<|endoftext|> <|source|> search  in root  ( / ) directory downwards all files which have less than 2 links. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -links Quantity -print   | xargs -I {} ls -l {}      | grep Regex         | less        "
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files owned by user 'pete' that are only accessible to the public. <|target|> find Path -user Regex -type f -perm Permission -print0 | xargs -0 -I {} chmod Permission {}         "
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "<|endoftext|> <|source|> display all regular/normal files in the folder \"dir\" and display the filename along with file size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find all the files in the current directory which have the name \"test\" and have not been accessed in the last 30 minutes. Are you sure? (Sort by the number of occurrences) <|target|> find Path -type f -name Regex -mmin +Quantity -exec ls"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> find regular file named foo.txt under root / directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100 MB in size <|target|> find Path -type f -size +Size -size -Size    | grep Regex      | awk Program         |"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "<|endoftext|> <|source|> Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\" <|target|> chown -R Regex File          /data/bin/perl       /data/bin/perl        | awk Program              /data/bin/"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> find all files  that names are 'apt' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and print their names <|target|> find Path -exec echo Regex {} \\;  | tr Regex Regex          | grep Regex          | cut"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "<|endoftext|> <|source|> Print a sorted list of *.so files in the bla directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their timestamps and paths <|target|> find Path -printf \"%P\\n\" -printf \"%T@\\n\"       | sort   | awk Program     | sed Program"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Find all.core files on the system starting from / and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's equal process for all users is equal. <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} rm -r -f {}  | grep Regex | xargs -I {} rm -f {}   | sed Program   "
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that start with'screen' (case insensitive) in their names under user's home directory tree <|target|> find Path -iname Regex                find Path                         | xargs -I {} grep -i -r Regex {}  "
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "<|endoftext|> <|source|> Print characters 2 through 4 of \"abcdefg\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo Regex {} \\; | awk Program            | tr Regex Regex         | grep"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\" <|target|> find Path -name Regex -and -name Regex           | xargs -I {} grep -I -l Regex {}        | xargs -I {} grep Regex {}          {} "
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> forcibly create a symbolic link named \"linkname\" to file \"new_destination\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are owned by user 'pete' <|target|> find Path -user Regex -exec ln -s {} \\;   | awk Program     (cannot be used with -exec ) "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "<|endoftext|> <|source|> Report file systems disk usage using POSIX output format. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Username | grep for a word and save it to variable \"search term\" <|target|> grep Regex File | cut -d Regex -f Number    | tr Regex Regex     | tr Regex Regex      | grep Regex  "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "<|endoftext|> <|source|> Compress every file in the current directory tree with gzip and keep file extensions the same <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are greater than 10000000 <|target|> find Path -size +Size -exec gzip -l {} \\;     | grep Regex        | xargs -I {} gzip"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Find all *.csv files under /foo/bar and move them to some_dir <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than the file 'filename' <|target|> find Path -newer File -print       | xargs -I {} mv {} File          "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if a drive is mounted to nfs <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a reverse recursive command line argument (to avoid the problem of \"file\" having newlines) that can be used to create directories and subdirectories of the current directory. <|target|> find Path -type d -name Regex -exec echo Regex \\;    | tr Re"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "<|endoftext|> <|source|> display all the files in the folder \"/dev\" which belong to the user \"peter\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -user Regex -exec echo {} \\;  | xargs -I {} find {} Path -exec echo {}       | xargs -I {} echo {} "
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "<|endoftext|> <|source|> Move all directories from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>name the directory with the full path of the current command's command line file <|target|> find Path -path Regex -printf \"%p\\n\"      | sed -e Program           | tr Regex"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "<|endoftext|> <|source|> Search the files residing in the current directory tree whose names contain \"bills\" for \"put\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec echo {} \\;  | grep Regex       | tr Regex Regex       | xargs"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100M and print the time and size for each file/directory <|target|> find Path -name Regex -prune -or -size +Size -print   '"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "<|endoftext|> <|source|> Remove all *.tmp files from the /tmp directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the file locations along with their paths <|target|> find Path -name Regex | xargs -I {} echo Regex {}       | xargs -I {} dir"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Find all regular files under $d directory tree and change their permissions to 777 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than 'file1' by modification time <|target|> find Path -newer File -print | xargs -I {} chmod -R Permission {}    "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path and parent directory <|target|> find Path -print | sed Program  | sort | uniq  | xargs -I {} dirname {}  | sed Program  | sort |"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "<|endoftext|> <|source|> Find all directories under ${1:-.} directory without descending into any sub-directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting host, L0s0s, has been modified to be in a directory named L1. <|target|> find Path -type d -name Regex -exec mkdir Directory \\;     | xargs -I"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "<|endoftext|> <|source|> Print only name and login columns of the currently logged in users <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100MB and do not search beyond 2 levels <|target|> find Path -maxdepth Quantity -size +Size -print       | grep Regex  "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "<|endoftext|> <|source|> Prints all NS servers of domain google.com. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex -e Regex           | tr Regex Regex        | tr Regex Regex        | cut -d Regex -f Number  | xargs"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "<|endoftext|> <|source|> Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\" <|target|> rsync -r -v -v -e File File File          | cpio -p -d -u -m -v Regex                    "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "<|endoftext|> <|source|> Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'eric' <|target|> find Path -user Regex -perm -Permission -print | uniq -c   | sort | uniq -d"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "<|endoftext|> <|source|> list PID of a group leader <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to delete all regular files whose content is greater than 100kb <|target|> find Path -type f -size +Size -exec rm -f {} \\;  \\;  | tr Regex Regex     | sed Program    "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "<|endoftext|> <|source|> Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found <|target|> find Path -iname Regex -exec tar -c -v -f File \\;       \\;         | tar -c  -x -v -f File \\;      "
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "<|endoftext|> <|source|> Copy all.txt files from the dir/ directory tree along with their parent directories hierarchy <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|> Find all files/directories under current directory and set their permission to 750 <|target|> find Path -exec chmod Permission {} \\;  -exec chmod Permission {} \\;      print  \"Permission"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "<|endoftext|> <|source|> Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 10MB in size <|target|> find Path -size +Size -size -Size      | grep -q Regex       "
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "<|endoftext|> <|source|> Display non-hidden files in the current directory with the given output format <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the day, the world has changed. <|target|> find Path -daystart -maxdepth Quantity -type f -exec echo Regex {} \\;   | grep Regex   | tr Regex Regex    "
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory with null character as the delimiter <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories that are not owned by user 'Us' <|target|> find Path! -user Regex -print0 | xargs -0 -I {} grep -E Regex {}      "
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "<|endoftext|> <|source|> Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not accessible by anyone <|target|> find Path -type f! -perm -Permission -print0 | xargs -0 -I {} ls -l {}  | sort -k Number "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "<|endoftext|> <|source|> Find recursively the files named \"file\" in the current directory ignoring the.git subdirectory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This directory is for the user to create directories in the current directory. <|target|> find Path -name Regex -type d -prune -or -name Regex -type f -execdir mkdir -p -- Directory \\;    "
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files starting from the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the list of regular files found in the current directory, find the most frequent files and display their names. <|target|> find Path -type f | xargs -I {} ls -l -d -t -s File {} | less  | awk"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> Remove the file with inode number 752010 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their inode numbers <|target|> awk Program Program     | xargs -I {} ls -i -l {}  | awk Program      | sort | uniq  "
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'Desktop' under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 128 characters in their names and count the number of lines in them <|target|> find Path -name Regex -exec grep Regex {} + | wc -l   | tail - Quantity | xargs -I {} wc"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "<|endoftext|> <|source|> delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\" <|target|> find Path -iname Regex -exec rm -r -f {} \\;      sed -i Program           ( find Path -iname Regex )        ( find Path -iname Regex ) "
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "<|endoftext|> <|source|> Print the input \"hello world\" to the console followed by a swap of the first two awk fields <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not owned by the user 'tom' <|target|> find Path! -user Regex -exec sed -i Program {} \\;     | awk Program        "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "<|endoftext|> <|source|> Filter contents of 'file' through awk commands written in script.awk, display the result. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run hotkey command on each. <|target|> find Path -exec awk Program {} \\;     | grep Regex        | awk Program      "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "<|endoftext|> <|source|> delete all the normal/regular files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> The current directory is the directory that contains the current working directory. <|target|> find Path -maxdepth Quantity -type d -name Regex -exec echo Regex Regex \\; -exec rm File \\;    \\;   | awk Program    ( sort"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for all files except SVN ones <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are larger than 100 MB in size and delete them <|target|> find Path -type f -size +Size -exec rm -f {} \\;   | grep Regex     | tr Regex Regex  "
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than the file 'Nov' by modification time <|target|> find Path -newermt Regex -mtime +Timespan -print      | xargs -I {} ls -l"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories that are not newer than Jul 01 by modification time <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than Jul 01 by modification time <|target|> find Path -newermt Regex! -newermt Regex -print        | grep Regex     "
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.txt files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and the sizes <|target|> find Path -name Regex -printf \"%s %p\\n\" | sort -n | tail -n Quantity       | awk Program  "
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Change the ownership of all files in the current directory tree from root to www-data <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Synchronize file systems to /tmp/ and output the result to console <|target|> df File | awk Program | xargs -I {} ls -a -l -d -S -r File     "
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories named 'query' under current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and the paths to their parent directories <|target|> find Path -exec echo Regex {} \\;   | grep Regex   "
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "<|endoftext|> <|source|> search for text files in the current folder which have write access to others <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> =|source|> Find all files/directories under current directory and print their names <|target|> find Path -exec echo Regex Regex Regex {} \\;      | grep Regex   "
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Change every file under \"/var/www/html/\" to have permissions 664 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than the file $newerthan and delete them <|target|> find Path -type f! -newerthan -exec rm {} \\;  | sed"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Infinitely print \"1\" then \"0\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep for all files with the same inode <|target|> find Path -inum Quantity -exec echo Regex Regex Regex {} + | grep Regex       | tr Regex Regex "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "<|endoftext|> <|source|> List the current directory recursively ignoring./src/emacs/ and all its contents <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permissions to 755 <|target|> find Path -exec chmod Permission {} \\;     -print    | sed Program"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "<|endoftext|> <|source|> Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> Mount the \"ext4\" filesystem \"/dev/mapper/myvolume\" on \"user@remote:/home/user/myvolume/\" with a loop device <|target|> mount -o ro,"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "<|endoftext|> <|source|> create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) <|target|> find Path Path Path Path -name Regex -type f -print0 | xargs -0 -I {} bzip2 {}      | xargs -0 -I {} tar -c -v -z -f"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Numerically sort standard input by the second word of each line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of the age of words, there is no longer any limit to the number of lines in the output of \"history\" <|target|> history | cut -d Regex -f Number     | sed Program"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "<|endoftext|> <|source|> display a long listing of all the java files in the current folder in sorted order <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> map all file/directory names to \"file/directory\" <|target|> find Path -name Regex -execdir ls {} \\;   | sort  in reverse order  -execdir ls {} \\;  -pr"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree and count them <|target|> find Path -iname Regex -type f | wc -l    | grep Regex | tr -d Regex | grep -v Regex   | sort"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all files under and below /dir that were changed or created less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count their line numbers ensuring that the output doesn't contain the line numbers themselves. <|target|> find Path -maxdepth Quantity | xargs -I {} wc -l {}   | sed Program   "
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "<|endoftext|> <|source|> Print the date formatted with \"%a %x %X\" followed by the host name <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -exec basename {} \\;  | awk Program           {}          | awk Program"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Print the list of files in the home directory tree whose names begin with \"Foto\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print them <|target|> find Path -exec echo Regex {} \\;    }     | grep Regex         | tr Regex Regex   "
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "<|endoftext|> <|source|> Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder. <|target|><|endoftext|> <|source|> Find all files under current directory whose status was changed within the last hour and copy them to /my_DS_Store/ <|target|> find Path -cmin -Quantity -name Regex -exec rm -r -f {} \\;     |"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Filters only directories from long file listing of the current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and count the number of lines in them. <|target|> find Path -type f | xargs -I {} ls -l -r -t {} | wc -l   | grep -v Regex "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "<|endoftext|> <|source|> Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes <|target|> find Path -type f -size +Size -exec ls -a -l -h {} \\; | sort -r -n -k Number        | cut -c Number              | sort -n  |"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "<|endoftext|> <|source|> Prints line count of each file within current directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths and total lines <|target|> find Path -exec echo Regex Regex {} +  | wc -l    | sed Program      | grep -n  | less"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "<|endoftext|> <|source|> Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file' under current directory tree without traversing other devices/devices <|target|> find Path -xdev -name Regex -exec echo Regex {} \\; -print | xargs -I {} -I {} grep Re"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "<|endoftext|> <|source|> Find the largest files in a particular location <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100k <|target|> find Path -size +Size -exec ls -l -h {} + | awk Program    ( sort File )     | grep Regex "
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "<|endoftext|> <|source|> List all regular files from the current directory tree that were modified less than 60 minutes ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files from the current directory tree that are smaller than 100 m. <|target|> find Path -type f -size -Size | xargs -I {} ls -l {}  | awk Program     |"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "<|endoftext|> <|source|> Show directory sizes in KB and sort to give the largest at the end <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print the file names and the lines matching them <|target|> find Path -exec ls -l -s {} \\; | sort -n | head - Quantity      "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "<|endoftext|> <|source|> List all regular files under current directory ensuring white space safety <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nThis file is for the use with which user \"Username\" is located. <|target|> find Path -type f -name Regex -print0 | xargs -0 -I {} ls -l -d {}     | tr -"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> find all the files in current folder which have been updated in the last 60 minutes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files whose names are \"file.txt\" and which contain 1670 or more lines of text.txt. <|target|> find Path -type f -mtime Timespan -exec grep -H -i Regex {} + |"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "<|endoftext|> <|source|> Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of files that are not owned by the user nor are they accessible to anyone <|target|> find Path -type f! -user Regex -print | xargs -I {} ls -l {}        | grep"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "<|endoftext|> <|source|> Copies defined file to the target folder without overwriting existing files. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Prompt user to type a list of cron jobs directly on the terminal (without displaying the last 10 lines of the output) and view it in the vim editor <|target|> crontab -e -u Regex | vim File      "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the html files in the current folder that have been modified exactly 7*24 hours ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all the files/directories under current directory tree that are newer than the file /tmp/$$ and older than the file /tmp/$$ and delete them <|target|> find Path -newer File -and! -newer"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "<|endoftext|> <|source|> Look for regular files in the directory trees 'deferred', 'active','maildrop', 'incoming' under /var/spool/postfix/ <|target|> find Path \\( -type f -regex Regex -or -type l \\) -print \\; -or -type d \\) -print             | xargs -I {} find Path \\( -type f"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "<|endoftext|> <|source|> Search for'some string' in all *js files under current directory and show the matched lines with line numbers <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are newer than 'testfile' by modification time <|target|> find Path -newer File -not -newer File -print  \"The file 'test' is not modified\""
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> display all the files in the file system which belong to the group lighttpd <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -perm Permission -exec chmod Permission {} \\;    -print   | xargs -I {} ch"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "<|endoftext|> <|source|> Search directory lpi104-6 for files with inode number 1988884 <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Display the average time of day in Unix epoch. <|target|> date -d Regex +\"%Y\" \"%Y\" \" \" | awk Program Program  \"%Y\" \"  \" | sed Program   \"%"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "<|endoftext|> <|source|> Find files/directories under current directory that are modified exactly one hour ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -maxdepth Quantity -exec echo Regex {} \\;  | tr -d Regex             | tr Re"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "<|endoftext|> <|source|> Get the number of \"use\" statements in all PHP files, ordered <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are less than 100MB in size <|target|> find Path -size -Size -Size     | wc -l       | tr Regex Regex  "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "<|endoftext|> <|source|> Finds file 'Subscription.java' and changes to containing folder. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's top gun shop is home to a large number of jobs. <|source|> Find all files/directories under current directory and count them <|target|> find Path -exec gunzip -c -v -n {} + | awk Program     "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "<|endoftext|> <|source|> Enables 'nullglob' shell option. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> find Path -name Regex -exec echo Regex {} \\;    | tr Regex Regex         | wc -l         | grep Regex      "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "<|endoftext|> <|source|> Find all.java files whose name contains \"Message\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This file is for the user who is logged on to the system. <|target|> who | grep -i Regex       | cut -d Regex -f Number      | xargs -I {} file {}     "
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "<|endoftext|> <|source|> Move all files from the `sourceDir' directory tree to the `destDir' directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -mindepth Quantity -maxdepth Quantity -execdir rename Regex {} \\;   | tr Regex Regex        "
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "<|endoftext|> <|source|> Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches <|target|> find Path -type f -name Regex -exec sed -i Program {} \\;        | awk Program           | sort  | uniq            | grep -"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "<|endoftext|> <|source|> Find all PHP files under current directory that contain only one line <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nSince the beginning of the year, the output of the awk program is a list of regular files that are not modified in the last two days. <|target|> find Path -type f! -newermt Regex -exec sed -i Program {} \\;  |"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> list all *.txt files in the user's home directory. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were modified less than 60 minutes ago. <|target|> find Path -mmin -Quantity -type f -printf '%f\\n' | sort | uniq | xargs -I {} ls -l {}"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "<|endoftext|> <|source|> Replace the first occurrence of \"foo\" with \"bar\" on every line in.txt files from the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are less than 100 KB in size <|target|> find Path -size -Size -exec ls -l {} \\;    | sed Program    | sed Program"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "<|endoftext|> <|source|> Print the full path of command \"cc\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (This will remove all files under current directory.) <|target|> find Path -type f -exec echo Regex Regex {} + Path       | sed -e Program            | tr"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "<|endoftext|> <|source|> Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user <|target|> cat File File | tee File           | xargs -I {} gunzip -v {}            {}               |"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "<|endoftext|> <|source|> Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 644 <|target|> find Path -name Regex -exec chmod Permission {} \\;      | awk Program    "
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "<|endoftext|> <|source|> Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the regex 'filename_regex.txt' <|target|> find Path -regex Regex -exec gzip -9 {} \\;   | grep Regex"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "<|endoftext|> <|source|> Search PATH for utilities called \"rename\", display the type of file (script, executable,...) for each match found. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and the file paths they are in <|target|> find Path -exec echo Regex Regex {} \\;         | sort  |"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with 644 permission to the current directory and change their permissions to 644. <|target|> find Path -perm Permission -exec chmod Permission {} \\;       "
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "<|endoftext|> <|source|> Find files newer than start.txt but not newer than end.txt <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Pool the contents of the current directory into a local ssh tunnel and run the file on each of the directories in the current directory as a subprocess with fully accessible output to the other. <|target|> find Path -type d -newer File -exec cat"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "<|endoftext|> <|source|> Display all symlinks and their targets in the current directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\nSince the beginning of today (24 November, 2014) marks the beginning of the end of the week (24 November, 2014) and the beginning of the end of the month (24 December, 2014) <|target|> find Path -iname Regex"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "<|endoftext|> <|source|> Find all the *.txt files in the current directory older than 48 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which have been modified in the last 30 minutes <|target|> find Path -mmin -Quantity -mmin +Quantity -type f -printf '%p'   'n'  'cannotated file"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "<|endoftext|> <|source|> get the root user access <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>  Create a tar archive of all files under current directory <|target|> find Path -type f -exec tar -r -v -f File {} \\;   | tr Regex Regex     "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "<|endoftext|> <|source|> display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files in the current directory and its sub-directories that are not empty <|target|> find Path -type f! -size Size -print        | tr"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "<|endoftext|> <|source|> List the files in \"archive.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>  will delete all files in the current directory <|target|> find Path -type f -exec ls -l {} \\;  | xargs -I {} rm -f {}       | xargs"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "<|endoftext|> <|source|> Create directorie(s)'some/path' as required in the current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Generate a symbolic link to file \"/tmp/file\" <|target|> ln -s File Regex     | tee File            | xargs -I"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "<|endoftext|> <|source|> find all the files in the folder /home which are exactly of size 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> is a command-line tool for creating tar files in the current directory with relative path names <|target|> find Path -type f -size +Size -exec tar -c -z -v -f File {} \\;"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "<|endoftext|> <|source|> find all the perl files in the current folder and search for a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you wish to continue? (You may) <|target|> yes Regex  | grep Regex        | tr Regex Regex       | tr Re"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "<|endoftext|> <|source|> Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is the second in line of larger files larger than 10 megabytes. <|target|> find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program    "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "<|endoftext|> <|source|> Move \"tobecopied/tobeexclude\" to \"tobeexclude\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} +  | xargs -I {} ch"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with'my key phrase' in their names under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Prints the contents of document \"file\" with \"less\" and sort the result to best fit for each line in document. <|target|> grep -E -o Regex File | sort | less    |"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "<|endoftext|> <|source|> Delete all regular files that start with'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree <|target|> find Path -type f -name Regex -mmin +Quantity -delete  -or -type f -name Regex -mmin +Quantity -delete     | xargs -I {} rm {}  {}"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "<|endoftext|> <|source|> Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\" <|target|> mv -f File File                     xargs -i Regex Regex {}       "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "<|endoftext|> <|source|> Count all the lines of all '*.c' files in current directory recursively <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>find all the files in the current directory which have not been accessed in the last 30 days. <|target|> find Path -atime +Timespan -type f -exec ls -l {} \\"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "<|endoftext|> <|source|> Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are less than 100 megabytes <|target|> find Path -size -Size -exec ls -l {} \\;    | aw"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "<|endoftext|> <|source|> Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest file-hosting website, Regex.com, has been modified from the start of the year. <|source|> find Path -type f -newermt Regex! -"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "<|endoftext|> <|source|> Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>|source|target|> find Path -name Regex -exec echo Regex Regex \\;     | grep Regex       | tr -d Regex "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "<|endoftext|> <|source|> Finds pattern text ignoring letter case in all.js files, prints matched strings and name of file with that strings. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Since the beginning of time, Unix has been used to store and display the contents of the file system. <|target|> df File | grep -E Regex | grep -v Regex  "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "<|endoftext|> <|source|> Prints total count of lines of all *.php files in a current folder and subfolders. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 700 <|target|> find Path -name Regex -exec chmod Permission {} \\;  |"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the current directory name without full path <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -maxdepth Quantity -type f -name Regex     | tr Regex Regex      | tr Regex Regex   "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under and below the current directory that contain \"wait_event_interruptible\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>From the list of regular files, display the file names of the current directory's subdirectories. <|target|> find Path -type f -exec file Regex {} +    | sed"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "<|endoftext|> <|source|> Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -name Regex -exec grep -l Regex {} +   | x"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "<|endoftext|> <|source|> Print information of the root mount point <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all regular files in the current directory tree that are not owned by the user \"joebob\" <|target|> find Path -type f! -user Regex -prune -or -name Regex -print        "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "<|endoftext|> <|source|> Search /path/to/your/directory for *.avi and *.flv files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path Path -exec dirname {} \\;  | grep Regex      | awk Program           ( sort )"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "<|endoftext|> <|source|> Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH. <|target|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are not newer than /tmp/master <|target|> find Path -newer File           | grep -q -m Quantity Regex       | xargs -"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "<|endoftext|> <|source|> Print a count of each unique line from standard input sorted from least frequent to most frequent <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their file information <|target|> find Path | xargs -I {} grep -F Regex {} | sort | uniq -c | sort -n  | tail -n Quantity   | sort -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "<|endoftext|> <|source|> search for soft links in current folder and display those links which are not pointed to files in current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Australia's largest single file, a.k.a.at, is bigger than any file in the current directory. <|source|> find Path -type f -name Regex -exec ls -l {} \\; | sort  in reverse reverse | awk Program    <"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "<|endoftext|> <|source|> Remove files from the home directory tree that were last accessed more than 100 days ago <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>The current directory is the directory of the current process. <|source|> find Path -maxdepth Quantity -mindepth Quantity -type f -exec rm {} \\;             | sed Program         "
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all aliencoders.[0-9]+ files under /home/jassi/ directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their names and sizes <|target|> find Path -name Regex -printf \"%y %p\\n\" | awk -F Regex Program      | sed Program    "
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "<|endoftext|> <|source|> Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'. <|target|> grep -r -v Regex File | xargs -I {} cat {}  | grep -r -v Regex               | xargs -I {} grep -n Regex {}         "
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "<|endoftext|> <|source|> Print lines in \"file1.txt\" that do not exist in \"file2.txt\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Print the names of the CDC* (case insensitive) files from the current directory tree <|target|> find Path -iname Regex -exec grep -i Regex {} \\;   | grep Regex     | cut -d Regex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the regular files in current folder that belong to the user \"tom\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are newer than \"file1\" by modification time <|target|> find Path -newer File -and -newer File       | sort  | uniq  | awk Program"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "<|endoftext|> <|source|> Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories named 'file1' under current directory tree and count the number of lines in them <|target|> find Path -name Regex -exec wc -l {} + | sort | tail - Quantity | xargs"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "<|endoftext|> <|source|> Rename \"www_new\" to \"www\" even if \"www\" directory exists <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a long list of all the files/directories under current directory that are newer than \"file1.txt\" and older than \"file2.txt\" and delete them. <|target|> find Path -newer File -exec rename -m Regex"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for symbolic links to files matching pattern '*/test*' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This command runs on all regular files with the permission provided by the filename. <|target|> find Path -type f -perm Permission      | xargs -I {} chmod Permission {}           "
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "<|endoftext|> <|source|> Print the current date followed by'doing stuff' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are larger than 100M and print their sizes <|target|> find Path -size +Size -exec ls -l -h {} \\; | awk Program    | sed Program"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "<|endoftext|> <|source|> Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 755 <|target|> find Path -exec chmod Permission {} \\;       | awk Program       ( find"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "<|endoftext|> <|source|> create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\" <|target|> ln -s File Regex              /usr/share/my-ditor/my-editor/bin/my-editor-executable         /usr/share/my"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "<|endoftext|> <|source|> Find all empty directories in the current one and delete them <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to continue? (Y/n) <|source|> find Path -type d -empty -exec echo Regex Regex Regex {} +     (Y/n)  | sed Program      | tr"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -type f -exec echo {} Regex Regex {} +                  |"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "<|endoftext|> <|source|> Print the last mounted drive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> and Save the first two letters of the output to variable 'DIR' <|target|> find Path -maxdepth Quantity -type d | awk -F Regex Program | grep -v Regex | cut -d Regex -f Number | tr Regex Re"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.c files under /home <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> = Save the current working directory to variable 'foo' <|target|> find Path -type f -print0 | xargs -0 -I {} dirname {} | xargs -0 -I {} touch {}         | grep Re"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "<|endoftext|> <|source|> Find all file in current directory with have.c extenstion & have 777 permission. delete then <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match the regex [0-9]* (case insensitive) in their names <|target|> find Path -iname Regex -exec grep Regex {} \\;  | grep -i Regex "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "<|endoftext|> <|source|> Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes <|target|><|endoftext|><|endoftext|> <|source|> Print the lines from the output of \"history\" that precede and follow the last slash of \"file\" <|target|> history | cut -d Regex -f Number        | sed Program       "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "<|endoftext|> <|source|> Search the path given as the $absolute_dir_path variable for regular files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their paths <|target|> find Path -maxdepth Quantity -type f -exec echo {} + Path        | xargs -I {} ls -l {}    "
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "<|endoftext|> <|source|> Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary. <|target|> kill - Regex $( pwd )         ( systemd )     ( kill - Regex Regex )          ( xargs -I {} -P false )     ping -W Quantity -"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "<|endoftext|> <|source|> find all PDFs owned by user \u201cseamstress\u201d <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that match the case insensitive regex 'pattern' in their names <|target|> find Path -iname Regex -exec grep -i Regex {} +  | xargs -I {} grep -i Re"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "<|endoftext|> <|source|> Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by the user 'warwick' and are newer than'my_file' by modification time <|target|> find Path -user Regex -newer File -execdir cp {} File \\;"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "<|endoftext|> <|source|> Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories with at least 644 permission under current directory tree <|target|> find Path -perm -Permission -print   | grep Regex      | tr Regex Regex      | grep"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under $x directory <|target|> find Path -type f -exec chmod Permission {} \\;         Print  file/directory            "
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "<|endoftext|> <|source|> Search the current directory tree for files whose name is \".note\", case insensitive <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory <|target|> find Path -iname Regex          | sort      | uniq     | xargs -I {} ls -l {}"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "<|endoftext|> <|source|> Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts <|target|> ls -l $( find Path -name Regex ) | awk Program     | sort | uniq  | wc       | awk Program            wc       | sort"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "<|endoftext|> <|source|> Sets shell option 'nounset'. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are we going to have a job with a name \"marker\" or a symbol \"marker\" <|target|> jobs -l | grep Regex | tr Regex Regex         | tr"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.[ch] files under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> | grep Regex  and search for the regex \"^pipe\" in all output <|target|> find Path -name Regex | xargs -I {} grep Regex {}  | xargs -I {} grep Regex {}"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "<|endoftext|> <|source|> Find all regular files on the system whose names are'myfile' <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their path names <|target|> find Path -path Regex -prune -or -type f -printf '%h/%f' <("
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "<|endoftext|> <|source|> List all files under the current working directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> by pressing the \"Enter\" key will display the list of all the files in the current working directory and the list of the subdirectories <|target|> find Path -maxdepth Quantity -type f -exec echo Regex {} \\"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "<|endoftext|> <|source|> search for all the files in the current directory which have been modified in the last 24 hours. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> is a process which simply waits for user interaction to complete. <|target|> wc -l     | grep Regex        | sed Program          "
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all *.py files/directories under current directory <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|target|> find Path -name Regex -exec grep Regex {} \\;    | grep Regex               | grep Regex     "
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "<|endoftext|> <|source|> Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are owned by user 'bob' <|target|> find Path -user Regex -exec ln -s File {} \\;    | head"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are modified in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> times it in a word value <|target|> find Path -maxdepth Quantity -mmin Quantity -Quantity         | grep Regex       | tr Regex Regex  "
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "<|endoftext|> <|source|> search for a shell script in the current folder and display the current folder path but search from the sub directories <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755. <|target|> find Path -perm Permission -print | grep Regex       | sed Program "
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script <|target|> find Path -name Regex -exec grep -H -n Regex {} \\;  | grep -E -i Regex         | xargs -I {} grep -l -i Regex {}"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that are larger than 100M and print them on a single line separated by one or two <|target|> find Path -size +Size -exec sed"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "<|endoftext|> <|source|> delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Display the average time of 4 ping requests to \"8.8.8.8\" <|target|> ping -c Quantity -q Regex | xargs -I {} echo Regex Regex | xargs"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "<|endoftext|> <|source|> Print the path of all the network mounts <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure you want to continue? (Or at least print it)? <|target|> echo Regex | sed Program       | grep Regex         "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "<|endoftext|> <|source|> find all text files in user/directory/ which have been modified today and display the last line of these files <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run ls command on each one <|target|> find Path -name Regex -ls   | xargs -I {} ls -l {}"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "<|endoftext|> <|source|> Verbosely compresses all files on fifth and sixth depth level keeping original files in place. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to list all files in the current directory and below that have not been accessed in the last 100*24 hours. <|target|> find Path -mindepth Quantity -type f -atime +Timespan -exec"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "<|endoftext|> <|source|> Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and print their contents <|target|> find Path -maxdepth Quantity -exec cat {} +  | sed Program    | sed Program  "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "<|endoftext|> <|source|> Prints all child processes of a process with id 20238. <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory that are less than 100 Kilobytes (100 Kilobytes) <|target|> find Path -type f -size -Size -exec echo Regex {} +"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "<|endoftext|> <|source|> Split \"/usr/bin/firefox\" into 1000 files of about equal size <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Print the names of the directories in the current directory and its subdirectories. <|target|> find Path -type d -exec split -d -l Quantity File Regex         "
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "<|endoftext|> <|source|> Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ <|target|> find Path Path Path Path Path -type f -exec chmod Permission {} \\;       | cut -d Regex -f Number             "
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "<|endoftext|> <|source|> find all the files in the entire file system which belong to the group \"staff\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> (fn) Find all files under current directory and set their permission to 755. <|target|> find Path -type f -exec chmod Permission {} +    | sed -e Program   "
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "<|endoftext|> <|source|> find all the html files in the current folder and replace the end of each line with a pattern <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Display the number of occurrences of each unique character in the sorted order of number of occurrences of each line in file \"files\" <|target|> grep -o Regex File | sort | uniq -c | sort -n  | tail -n Quantity | cut -f Number | un"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "<|endoftext|> <|source|> search for all the files in current folder and display all the file names separated by space <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;    | cut -d Regex -f Number      | sed -e"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "<|endoftext|> <|source|> Replace all newlines from the contents of \"file\" except the last with spaces <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and run the sed command \"s#\\(c\\|h\\|cpp\\)\" on each of them <|target|> find Path -exec sed -i Program {} \\;        "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "<|endoftext|> <|source|> Find all.gz archives in the current directory tree and check if they are valid <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>This is a list of regular files from the current directory tree that were last modified more than 7 days ago. <|target|> find Path -type f -mtime +Timespan -print0 | xargs -0 -I {} ls -l {}   | awk Program  "
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "<|endoftext|> <|source|> find all files in the current folder which are bigger than 10bytes <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>* Find all files/directories under current directory and print their names and sizes <|target|> find Path -type f -size +Size -exec ls -s {} \\; | awk Program            ( sort File )    "
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "<|endoftext|> <|source|> display the count of number html files in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Some users find it hard to accept that a file called \"file_name\" exists on the system. <|target|> find Path -path Regex -prune -or -name Regex -print | xargs -I {} wc -l {}     | grep Re"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "<|endoftext|> <|source|> find and image in current folder (case insensitive search) <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and set their permission to 755 <|target|> find Path -type f -exec chmod Permission {} \\;      | grep Regex       | xargs   "
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "<|endoftext|> <|source|> Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension <|target|> find Path -name Regex -or -name Regex    | grep -E -o Regex     | tr Regex Regex                 | xargs -I {} find {} -regex Re"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "<|endoftext|> <|source|> change the ownership of all directories in the current folder <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory tree that are not newer than file/directory '2013.0' <|target|> find Path! -newer File      -exec chown Regex {} \\;     ( find Path"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "<|endoftext|> <|source|> Change ownership of \"/data/db\" to the current user <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>\n <|source|> Find all files/directories under current directory tree that are newer than /bin/sh and print their names <|target|> find Path -newer File -printf \"Name: %16f.filename\"   | awk Program    | x"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "<|endoftext|> <|source|> Get a detailed list of all files on the system larger than 10MB <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>Automatically create a symbolic link in the current directory for each file on the system that does not have \"test\" in its path. <|target|> find Path -not -path Regex -iname Regex -type f -exec ln -s"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "<|endoftext|> <|source|> Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory and change their permission to 644 <|target|> find Path -type f -exec chmod Permission {} +  | grep Regex   | xargs -I {} chmod"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "<|endoftext|> <|source|> display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno <|target|> find Path -name Regex -atime -Timespan -user Regex        -user Regex      | xargs -I {} find Path -type f \\( -name Regex -or -name Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "<|endoftext|> <|source|> Find all the files which are accessed in last 1 hour in entire file system <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files under current directory and change their permission to 755 <|target|> find Path -type f -amin -Quantity | xargs -I {} chmod Permission {}         | awk"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "<|endoftext|> <|source|> Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> <|source|> Find all files/directories under current directory that match pattern 'file_name' <|target|> find Path -name Regex -prune -or -newer File! -newer File     | grep Re"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "<|endoftext|> <|source|> execute command \"who\" when key \"\\eW\" is pressed <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> to end all regular files in the current directory. <|target|> find Path -type f -exec sed -i Program {} \\;      | grep Regex        | cut -d Regex -f Number"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "<|endoftext|> <|source|> Print unique lines in sorted \"file1\" compared to sorted file \"file2\" <|target|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|> Are you sure? (case insensitive) <|target|> echo Regex | sort | uniq -c  | sort -n   | grep -E -v   | sed Program       | cut -d Regex -"
    }
  ]
}