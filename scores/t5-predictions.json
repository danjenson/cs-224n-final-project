{
  "1.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -printne -or -name f -print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "find -f Reg-f Regexex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "find Regex | xp Reg-f Reg-f Regex  -f Regex-f Number find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "find File-i File-f File-f File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -names Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -name Regex -exene -or -name Regex -printne -or -name f -print0 xargs -I  grep -I Reg-I Regl ex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "findlm - - -; -m - - -) -m - - -)   ) -(  File )--(  File -- -(  File  find find"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "find ex |-r Reg-mount Reg uid ex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -printne -or -name0 find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -namename Regex -exe f -exe0 | xargs -0 -I  mk   find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -printtime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -type Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -printc grep -l ex  ; xc -l  find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "findcrontab -f Reg grep Reg-l Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -typem Per-Permission print f -printc ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "find File( ie -i - xp Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -print Regex -exetime +Timespan -exe0 | xargs -0 -I  rm r "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -per0-printc rmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "find Reg( greconfig ) find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -print Regex  find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -name  -nameantity -print0 find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path -name0 | xargs -0 sum find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -name f -size0 % Number-p%fn\"  find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -name Regex-print f -print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "find( rown Reg-d ex  ) find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe |  -n -f  find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  grem  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -namename Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "find Regex |  - Quant Regantity  -n Quantity find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -print Regex   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "findls -f -l ex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "findmf -f Regx find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -name f -exec grezip -  ;printc grev  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv l  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "find  xp Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -namedepth Quantity -name d -printc mv l     find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -print | xargs -0 -I  grep ex "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -name f  x Program xr exex x Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -print | xargs -0 -I  rm n find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  gremod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "findlp Reg-f Regex -   -f Reg-f Regex   xr Reg-l Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -namedepth Quantity -typedepth Quantity -type d   find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "find -name Reg grewk Program find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "find exex xwk Program find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "findrmync -r -r rde ex exede ex  find find find find find find find"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "find  | iq   -d Number-f Regex iq-f Number  find find find find find find find"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "find -l -l  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -namename Regex -printc gre -f -f -f   ;n find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  lp -l c exey or Directory-"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -print -%p%n' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex-print -% Reg''p'' +%%pf'n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -name0 | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "find File | sort -n ex-print Number-n Quant find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -printne -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -nameum Quantity -printc rm  ;n find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -namename Regex -exec rm r r  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "find Regex |ex xree xwk Program find find find find find find find find"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "findawk Program-f  find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -name f -exe0-printlete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  xp Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -typetime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -typeer Filetime ex  find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -name Regex -printc rmod ex  ;n find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -  -namename Regex print -orm Per-Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -printc chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "find Regex | x Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -printne -or -name0 find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "find -f File-f -mount -f -x ex ex find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -exetime +Timespan -exe | xargs -0 -I Quantity -I Quantity-I  grezip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "find -n Quant-f Number | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -type f -name Regex -exes  sort -n  Quanter-l  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -name f -printname Regex  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -typemin Quant-minantity  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "find Reg(  +Time%f%%f %f -( datename Reg) find find find find find find find find find find find find"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findls -l  xp Regex find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -size f -size +Size-sizec  -l    -n i  find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -name f -print0 xargs -I ity-I  lc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "find Regex |  -f Quantity  xr -f Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -name f -namec  -l l    -f -f   -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -exetime +-minantity -Time0 | xargs -0 -I -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "find -l -l Quant( sort Path -size f - sort -n Quant-f Quant find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -typetime +-Timeantity  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "findlp  File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "findlp -f File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -typetime +pan-type Regex -print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -name f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -I Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -name ex -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -nameo Quantity  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mtime +pan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -type f -print Regex -exec grep n name  Regl ex  ;  -n ex f Numberf Quant-f "
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "findlp (  Path -name Regex  xargs -I  name )) find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "find  -f lglob find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 xp Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -namedepth Quantity -namec mv   -y  ; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -I ity I -f ex n find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -print Regex -printc lc -l  ; xp -l Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs 0ge ex-I  gre Programncludeprint ex  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "find Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "find File File xre File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -print Regex -exec rp -l ex  ;-printc name ;;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "findmzip2  File xre File-f File find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-name Regex xargs -I   f n find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -nameerer-new - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-name  -name f-printc  l ex  printc link ;; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -typedepth Quantity -Time Regex-printtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "find Reg  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -print -name Regex -) find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "findlzip -f Fileex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "findmktemp -p Directory find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size + d find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -l ex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "findssp -p  File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "findmk  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -type Quant-typedepth Quantity -max Regex -exeore orlink or Reg-type f -exetimedepthity -exelete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "findmk File-f File File File find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I    xc -l "
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "find Regex | h find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "findrown Regex-f  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "find -v Reg xp Regex find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "find Path -name Regex -printc grep -l ex  ;-print find find find find find find"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -print f -printc  namel;  xc -l  find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "find Regex | x Program find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -print xargs -I  grep ex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  rp -l l ex  ; xre "
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "find -m Reg xp Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "find ( name $(  Regex )- find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "find  sortiq |-i  sort -n Quant find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -name f -printc link -l - ; xp -l ( link -f  )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -typetime +Timespan-exelete  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep Reg-f Regex -f Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "find -(  -name   iq -l File find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -name f -print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -m d -exetime +-Timespan -exe0 | xargs -0 -I  mv v  "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "findrk -v Reg find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-name Reg -names Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "find Reg(  +-exex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "find Reg-n Regexex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "findms -f ex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -name d -exedepth Quantity -exey-print | xargs -0 -I  grem   find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -exetime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "find   - ity x Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -print -printm Per-Permission  xargs -I  grem -r -f -"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "find File | x Program xd -f  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -name f -name0 |n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "find -nex(   )n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -name Regex-printname Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "findsp -f  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -namedepth Quantity -type -namename Regex   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -name f -exec rmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -namename Regex     find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex ex xargs -I -I  grec -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "find  -n -n nn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -name Regex-print f -print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( sort-wd --name f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "findfs -f -f ex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mtime +-Timeantity  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -name Regex -printc  wd - n find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -printne -or -name Regex -print-printc rp -f l ex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -name ex -print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -print -name Regex ) -print f -printtime +Timespan exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find  x Program-p -f Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -printtime pan-print f -print -%p%%%%printc  -nity ';n find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "findlzip2 -f File-l  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "find -f d    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "findlw e -f Regex  x Program xp Regex x Program find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "find -f Quantity  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path   -type f  xargs -I  sedmod Permission n find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -name ex -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -print Regex  xargs -I  gre Program-I   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "findl Program | find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-size0 find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex-print xargs -I -I l  grec -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -typename Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg f Program-printgextypeex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -name f -printc chmod ex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "findlown Reg( le ) find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size-size0 %p %p%%p%%p%%"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "find Regex | x Program-f  find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -type f -exe Regex -exetime +-Timespan -exe Regex  "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -typetime +-Timeantity  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -print -newqe  ex -print -nameer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "findl Reg-n Regex find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "findsortedm - -  find find find find find find find find find find find find find find find find find"
    }
  ],
  "2.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -printne -or -name f -print Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "find -r Reg-f Regex Regex Reg              find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "find Regex | sedp Reg-v Reg-v Regex |  -d Regex -f Number find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "find File-i File-f File-f File File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -types Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -type Regex -exene -or -type Regex -printne -or -name f -print0 xargs -I  grep Reg-E Reg-I Reg-I Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "findlm -1 File-2 File-3( grem -1  ) grem -1  )  File ) )( sort File ) )( sort File ) )( sort File )  File  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "find Regex Reg-R Regrmount Regruid Regex Reg                                              "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -printne -or -name find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File   find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -type Regex     find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -printc grep Reg-v Regex  ; xc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "findcrontab -l grep Reg-v Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -print f -exec chs -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "find File( ame )r ) grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -exetime +Timespan -exe0 | xargs -0 -I  rm r "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -exem Permission -exe0-exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "find Reg( whichpconfig Reg)           find find find find find find find find find find find"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -print Regex  find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -l Reg -lantity -print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path -name | xargs -0   find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -print0 \"% %p%pn\" find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-print f -print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "find( whochown Reg-R Regex  )                 "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe0 |  -n |-f  find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm   find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -typename Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "find Regex |  - Quant QuantQuantity  - Quant Quantity              "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -print Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "findln -s -l Fileex                      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "findpf -d Filen                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip -  ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv v  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "find  grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -namec mv r Directory   find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -print | xargs -0 -I  grep Regex "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  x Program | xr Regex Regex Reg x Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "findsedp Reg-v Regex File-(  -r Reg-r Regex  ) sedr Reg-r Regex Reg"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -typedepth Quantity -typedepth Quantity -type d   find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "find -l Reg awk Program find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "find Regex |ex Reg grewk Program    find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "findcsync -r -r exclude Regex Fileexclude Regex Reg       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "find  | iq |  -d Number -d Regex  iq-c  find find find find find find find"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "find Reg-l Reg-l Reg find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -typename Regex -printc tar -f -f -f   ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -c name-namey  names "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -print \"'%pn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print \"'% Reg 'p' '%pf'n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -type |n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "find File | sort |-n Fileex |-f Number |-k Quant find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -printne -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -typeum Quantity -printc rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -namename Regex -exec rm f -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "find Regex |ex Reg are File awk Program find find find find find find find find"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "findawk Program-f File |  find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -name0-printlete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  xp Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -typetime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -mermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -type Regex -printc chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -type f -( -namename Regex -or -orm Per-Permission )  find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "find Regex | sed Program                                        "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -printne -or -name0  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "find -f -f rmount Reg-r extX Fileexex Reg                            "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -exetime +Timespan -exe | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "find -r Quant-s Number | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -type f -name Regex -prints sort -n Number Quanter-l  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -namename Regex  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "find Reg( date %%a %p %p  )( datename )            "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrs  File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findls -l  xp Regex find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -size f -size +Size -printc  -h    -n -n   find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -name f -name0 xargs -I Quantity -I  lc -l   "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "find Regex |  -d Quantity  ar Reg-d Regex Reg      find find find find find find find find find"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -h -h    -n |-f  tail - Quant Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -type f -mmin -Quantity -m | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "find -l -l Number( sort Path -type d -  sort -n |-k Number find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "findcp  File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "findcp -f File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime +pan-print Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  grep Reg-v Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -typeum Quantity  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mtime +pan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -type f -name Regex -exec sedp Regl-name Reg Regl Regex  +;  |-n |ex -f Number |-k-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "findmd $( find Path -name Regex  xargs -I  name )   find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "t -s llglob                                          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name xp Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -namedepth Quantity -namec mv  Filename-namey  ; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep Reg-v Regity I -f Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex-printc lc -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs Ige Regex -I  sed Programncludef Regex    find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "find Regex |        find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "find File | tee File                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep Reg-v Regex  ;-printc name ;;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "findbzip2  File tre File-t File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-i Regex xargs -I   r  find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File-new - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-type  -type l-exec  l Regex  -printc link ;; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex-printtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "find Reg  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex -)   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "findlzip -lex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "findmkdir Directory-p Directory find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size + find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep Reg-l Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "findssp -s  File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "findmk File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -type -typedepth Quantity -type Regex -typeore Regmlink m Reg-type f -printmin ity -exelete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "findmk File-v File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I    xc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "find Regex | h find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "findchown Regex File-R Reg File find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "find Reg-v Reg ap Regex  find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "find Path -type Regex -printc grep Reg-v Regex  ;-print find find find find find find"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -printc  name; xc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "find $ex | x Program find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex-print xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  sedp Reg-v Reg-l Regex  ; grere File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "find -r Reg ap Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "find ( whichname $( which Regex ) )n find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "find  sortiq |-c | sort |-n |     find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -printc link -l  ; xp Reg-v Reg( findlink -f  )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep Reg-v Regex |-f Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "find File-(  File-n File ) iq File-c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -m d -mtime +-Timespan -print0 | xargs -0 -I  mv r  "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "findmk File-r File File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-l Reg -types Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "find Reg( date )exex        find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "find -r Regex Regex Reg Reg       find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "findln -s File Fileex     find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -empt0 | xargs -0 -I  rm   find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "find   - Quantity a Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -per Regex -exe -perm Per-Permission  xargs -I  rm -f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "find File | sed Program | sedd -r find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -exe0 |n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "find Reg-sex( which  )        find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex-printname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "findld $-d File   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -namedepth Quantity -name -namename Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -namename Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr Regex Regex Reg xargs -I -I  wc -     "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "t -s -s nset                               "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f -print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( findlwd ) -name f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "findln -s File-l File Fileex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mtime -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -type Regex -printc  lwd   find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -type Regex -printne -or -name Regex -print-exec grep Reg-v Reg-l Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex -) -a f -nametime +Timespan -printc rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find  x Program-i Program-e Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -type Regex -printtime pan-print f -print \"'%p%%%%mc  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "findczip2 -c -f File File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "find |-f d \"il  | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "findlstree Reg-p Regex x Program xp Regex x Program                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "find -l Quantity File File    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path   -type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -print Regex  xargs -I  sed Program-i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "findsed Program | | | find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -type Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex -print xargs -I Quant-I -I  lc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -typename Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg f Program-igex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "findchown Reg( whoami )     find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -print \"%p%p%p%p\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "find Regex | x Program-i Program find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user f -name Regex -exetime +-Timespan-exe Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -new Regex -print -newuffe Reg Regex -print -newerm "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "findch Reg-s Regex Regn                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "findcomm -2 -3 File File File                 "
    }
  ],
  "3.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -prune -or -name f -print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p Reg-s Regex Regex                                                   "
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "find Regex | ap Reg-v Reg-v Regex |  -d Regex -f Number |                                   "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "find -n File-r File-r File File File     find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -types Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -type Regex -exene -or -name Regex -printne -or -name f -print0 xargs -I  grep -l Reg-i Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -2 -2 ( sortgrem -2 -2 File) comm -1  )  File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " ex-R rmount Regruid Regex                                              "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -prune -or -name find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File  find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex     find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "findcrontab -l | grep Reg-v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -print f -printc ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r - grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print0-exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( whichpconfig Reg)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -ls -lantity -l find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path -name xargs -0   find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -print0 \"% %p %pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-name find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown Reg-R Regex  )                 "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe0 |  -n |-n | find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm   find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex |  -n QuantQuantity |  -n Quantity              "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex-print Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-s Fileex                      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -d Filen                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -namec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv f Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "find  grep Regex |         find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -namec mv t Directory   Directory find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex-print | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  x Program | xr Regex Regex | x Program | | find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -v Regex File-(  -d Reg-d Regex  )  sedr Reg-d Regex Reg"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -typedepth Quantity -typedepth Quantity -type d   find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "find -l Reg grewk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "find Regex |ex | grewk Program  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "csync -r -v exclude Regex Fileexclude Regex --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "find  | iq  sort -d Number |-d Regex  iq |-c sort | find find find find find find find"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-p Reg                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -f -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -c name-directory Directory --names Directory"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -print0 \"'%pn' | find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print \"'% Reg %p %%pf n' |"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -name0 |n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Fileex |-n Number |-k |                 "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm f -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex |ex | are File awk Program        "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk Program-F Program |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -name0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  xp -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -type Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -namename Regex -or -im -Permission )   find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " |ex | t Program                                        "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -type Regex -prune -or -name0 find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -f extf extmount Reg-r extX Fileexex                            "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -u -r Number | |                                       "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -type f -name Regex -exes sort -n Numberkumber-l  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date %%a %x %x  )( datename )            "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findls -l  xp ex | find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h   sort -r |-r |  find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef xargs -I Quantity -I  wc -l  | | find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex |  -d Quantity  tr Reg-d Regex Reg              "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -h -h   sort -r |-u | head - Quant Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -type f -mmin -Quantity-m | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "find -h -h ( find Path -type d -  sort -n |-r Number | | find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "findcp  File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "findcp -d File        find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime pan-m Regex-m find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex |  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mtime pan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -type f -name Regex -exec wp type-namename Regl Regex  ;  |-n |ex |-n Number |-k |-k |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "findcd $( find Path -name Regex  xargs -I  name )   find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "t -n nullglob                                          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 xp Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -namedepth Quantity -typec mv  Filedir-directory Directory ; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -i Regex  xargs -I  grep -i Regity i -i Regex   find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex-printc grec -l  ; xp Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs rege Regex ---I  sed includeplace Regex    find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex                                    "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-exec name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  tre File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-type Regex | xargs -I   t   find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File-new - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec link  ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex-printtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "find Reg  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "findlzip -l Fileex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "findmkdir Directory-p Directory find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size + find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -l Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "ccp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -type -typedepth Quantity -type Regex -typeoregemlink m Reg-type f -mmin ity -namelete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-p File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "find Regex | h  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "findchown ex File-R Reg find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " Reg-v Reg ap Regex |                        "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "find Path -name Regex -exec grep -i Regex  ;-exe find find find find find find"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -namec  name  | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "find $ex | x Program | |    find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex-exe xargs -I  grep Regex    find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  grep -l Reg-l Regex  ; grere File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -p ap Regex |                           "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "find ( dirname $( dir Regex ) )                        "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  sortiq |-c | sort -n | |                        "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -lc link l  ; xp -v Reg( findlink -f  )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex |-f Reg | | find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-(  File-n File )  iq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -m d -mtime -Timespan -exe0 | xargs -0 -I  mv d Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-p Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -types Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date -ex |ex |                               "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex                                 "
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s Fileex                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rm    find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "find   -nity x Program                              "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -exe -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -exe0 | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " -nex( which File )-                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex-printname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "findcd $-p File        find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -namedepth Quantity -name -namename Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr Regex Regex | xargs -I -I  wc - | | find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "t -s ns nset                               "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( findpwd )-print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-s File Fileex                               "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -type Regex -exec  grewd   find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -printne -or -name Regex -print-exec grep -i Reg-H Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find  x Program-e Program-e Program | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime pan -exe f -print0 \"'%p%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "findbzip2 -d -v File File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "find |-p d \"il                                      "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex gre Program xp Regex x Program                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File File   split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path   -type f  xargs -I  chmod Permission   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  sedargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program | | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex -exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg f -igex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -exe0 \"%p %p%p%p\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | x Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user d -a Regex-atime +-Timespan-print Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex -print -newer File "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "p Reg-e Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File File File                 "
    }
  ],
  "4.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -prune -or -name f -print Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regexex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | sedp -v Reg-v Regex |  -d Regex -f Number |                                   "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -n -r File-r File File                                                  "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -types Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -type Regex -prune -or -name Regex -prune -or -name f -print xargs -I  grep -l -i Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -2 -2 ( sortcomm -1 -2 File) sortcomm -1 -2 )) sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " Regex-o rmount Regruid Regex                                             "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -prune -or -name find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -exe f -exe0 | xargs -0 -I  mv  File  find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec wp -i Regex  ; wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l grep -v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( readame -r ) grep ex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm r "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe0-exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( whichpconfig )                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -ls -lantity -l find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-name xargs -0   find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -printf \"% %p %pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -name Regex-type f-name find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                 "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe0 |  -r-0 | find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm   find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex |  -n QuantQuantity | cut -n Quantity              "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -print Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex                      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -name f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep ex |                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory   find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex-exe | xargs -0 -I  grep ex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  x Program | xr Regex Regex | x Program | | find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -v Regex File-(  -d File-d Regex  ) sedr Reg-d Regex Reg"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -typedepth Quantity -type d  find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex |ex | grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "find  | uniq  sort -d Number |-d Regex sortiq -c sort | find find find find find find find"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-p Reg                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp d director-directory Directory parents Directory"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%pn' | find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print \"'% Reg %p: %%pf n' |"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -name0 | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort |-u |ex-u Number |-k                 "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -pru find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ;  find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex |ex | are File awk Program        "
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk Program-F File |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -name0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -name Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -namename Regex -or -perm Per-Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " |ex | t Program |                                        "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -type Regex -prune -or -name  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -o extf extmount extf extX Fileexex                            "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -u -r Number |                                       "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -r Numberkumber |-l  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( host %%a %x %Y )( datename )            "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findls -l  grep ex |  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h   sort -r |-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l    "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " $ex |  -w Quantity cut tr Reg-d Regex              "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -h -h   sort -r-n head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -type f -mmin -Quantity -m | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -h -h ( read Path -type d -  sort -n |-r Number | |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -d File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-m find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex |  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-group find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec wp in-namename Regn Regex  ; sort |-n |ex |-k Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  name  )                        "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "t -s nullglob                                          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 xp ex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -namedepth Quantity -maxc mv  File -directory Directory ; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i ity I -i ex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; xp -v ex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs rege Regex -I  sed in-place Regex    find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex                                    "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -i Regex  ;-exec name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  tre File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-i Regex xargs -I   t   find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File -new! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l -exec  n Regex  -exec link  ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex-mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "find Reg          find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "gzip -d Regex File                                   "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir Directory-p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size + find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -type -namedepth Quantity -type Regex -typeore mlink m Reg-type f -mmin +ity -namelete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " $ex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R Reg File                         "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " Reg-v ap ex |                        "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "find Path -name Regex -exec grep -i Regex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex |-exe f -namec  name; | wc -l  find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program |                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe xargs -I  grep ex    find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  grep -i Reg-l Regex  ; aee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |-o ap ex |                           "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n | |                        "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link f  ; grep -v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex File-f Reg   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-(  File-u  )  iq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -m d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date )ex |ex |                               "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regexex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -exe0 | xargs -0 -I  rm    find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " |  -nity a Program                              "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -exe -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -print0 |n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " Reg-nex( which File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex-printname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -notdepth Quantity -not -namename Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex | xr Regex Regex | wargs -I -I  wc -  find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "t -s -s nset                               "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( findpwd )-print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex                               "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -exec  grewd   find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -printne -or -name Regex -print-exec grep -H -i Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-group Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find | gre Program-e Program-e Program | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -print0 \"'%h%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -v -v  File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-p d \"il                                      "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex gre Program grep ex gre Program                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path   Path-type f  xargs -I  chmod Permission   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-group find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  sedargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc --"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg f -igex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -exe \"%p %p%p%p\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user d -name Regex -atime +-Timespan -name Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex -pru -newer File "
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-e Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File File                  "
    }
  ],
  "5.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -E Reg-v Regex |  -d Regex -f Number |                                   "
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -r -r -r File File File                                                 "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -type Regex -prune -or -name Regex -prune -or -name f -print xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortgrem -1 -2 ( sortcomm -1 -2 ) sort File ) ( sort File ) ( sort File ) ( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " ex-o remount Regreuid Regex                                             "
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -name find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File  find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime +-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec wp -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( readame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( pconfig Reg)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -ls Quant-lantity -print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0   find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %p %pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-name find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown Reg-R Regex File )                 "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe0 |  -n-n  find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm   find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity              "
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -print Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-s File Regex                      "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P Filex                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip -  ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -printc mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  x Program | sedr Regex Regex | sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -E Regex File-(  -d Reg-d Regex File )  sedr Reg-d Regex Reg"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex Reg grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -a -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "find  | uniq   -c Number |-d Regex sortiq -c sort |    find find find find"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-p Reg                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -d exclu-directory Directory --exclus "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%pn' | find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print \"'% Reg %p:  %pf n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -name0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Regex -k Number |-k                 "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm f -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | tee File awk Program   echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk Program-F File |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -exe0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -type Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -namename Regex -or -im -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | t Program                                        "
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -type Regex -prune -or -type find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -o exto extmount Reg-o extX Regexex                            "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "split -n -r Number |                                       "
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -n Numberkumber-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex  find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date %%a %x %x  |)( datename )            "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findls -l  grep ex | find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h   | sort -n |-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex |  -w Quantity cut tr Reg-d Regex              "
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -h -h   | sort -n |-n | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity-l | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "find -h -h ( read Path -type d - | sort -n |-r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -d File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-m find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex |  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec wp re-namename Regn Regex  +; |  -n |ex |-k Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cp $( dir Path -name Regex  xargs -I  name  )                        "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "t -s nullglob                                          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 xp Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  File -directory Directory ; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i ity -i -f ex   find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs rege Regex -I  sed in-place Regex    find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex                                    "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                                "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-exec name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-i Regex  xargs -I   i   find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File -new - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink  ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "find Reg  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "findgzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep Reg-l Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R  File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -max -typedepth Quantity -type Regex -typeore mlink m Reg-type f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R Reg                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " -o ap Regex                       "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "find Path -name Regex -exec grep -i Regex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec   ; | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex    find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  grep -i Reg-l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |-o ap Regex                           "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " ( dirname Reg( which Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n | |                        "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep -v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -E Regex File-E Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-(  File-u File )  iq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -m d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) ex |ex |                               "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail -nity taila Program                              "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -type -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -exe | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " Reg- Regex Reg( which File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -username Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -notdepth Quantity -not -namename Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex | xr Regex Regex | wargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "t -s -s unset                               "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -printc  grewd   find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -printne -or -name Regex -print-exec grep -H Reg-n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-group Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -or f -nametime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find  gre Program-e Program-e Program | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -print0 \"'%h%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -d -v                                   "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-p d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex gre Program sedp Regex sed Program                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File Reg split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path   Path-type f  xargs -I  chmod Permission   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -igex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -exe \"%p %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user d -name Regex -atime +-Timespan -name Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex -not -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "en Reg-s Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File File                  "
    }
  ],
  "6.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -v Reg-v Regex |  -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -r -r -r File File                                                 "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -type Regex -prune -or -name Regex -printne -or -name f -print xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -2 -2 ( sortcomm -2 -2 File-3( sortcomm -1 -2 -3( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex-o suremount,reuid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex  head  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -name find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File  find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -mindepth Quantity -name Regex  head  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -perm Permission -print0-exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( pconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -ls Quant-lantity-l find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0   find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -printf \"% %p %pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe0 | sort -r-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm   find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  - Quant QuantQuantity |  - Quant Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -print Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip -  ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  x Program | xr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -v Regex File-(  -d Reg-d Regex File )  sedr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -typedepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq   -d Number -d Regex  sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-g Reg                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a parent-directory Directory --parents Directory"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%pn' | find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print0 \"'% Reg %p:  %ps n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Regex -k Number-k                 "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -f -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee File headawk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk Program-F File                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -exe0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -type Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -or -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | t Program      echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -not Regex -prune -or -type find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -o exto extmount exto extX Regexex                            "
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -r Numberkumber-r find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( host %%a %x %x )( hostname )=\"            "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findls -l  xp ex | find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h   | sort -n |-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity cut tr -d Regex   echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -h -h   | sort -n |-n | head - Quant Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -type f -mmin -Quantity -l | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -h -h ( find Path -type d - | sort -n |-r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -d File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-m find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-group find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec wp re-namename Regl Regex  +; |  -n |ex -r Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $(  Path -name Regex  xargs -I  name  )                       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "t -s nullglob                                          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  File -directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -l ity -i -i Regex   find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs replace Regex -I  sed in-place Regex    find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "echo Regex                                    "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                                "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-exec name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-i Regex | xargs -I   i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File -not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -printc echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex-mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "find Reg          find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir Directory-p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -l Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -type -typedepth Quantity -type Regex -typeore-mlink m Reg-m f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R Reg                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " -o ap Regex                       "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "find Path -name Regex -exec grep -l ex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -print0 xargs -I  grep Regex    find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -o ap Regex                           "
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " ( dirname $( which Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n                         "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; xp -v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex File-l Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-(  File-u File )  iq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date -ex |ex                               "
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -exe0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "  tail - Quantity taila Program                              "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -type -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -print0n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " Reg- Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex-username Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -notdepth Quantity -not -namename Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "t -s nuns nuunset                               "
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd )-print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc  grewd   find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-group Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find  gre Program-e Program-e Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -exe0 \"'%h%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -v -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex gre Program grep Regex sed Program                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File Reg split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path   Path-type f  xargs -I  chmod Permission   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-group find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip - ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex -exe0 wargs -I Quant-I -I  wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -igex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%s %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user f -name Regex -atime +-Timespan-a Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-s Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File                 "
    }
  ],
  "7.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex ex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o Reg-o Regex |  -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -r -r -r  File                                                 "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -types Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -name Regex -printne -or -name f -print xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | head n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec wp -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -types Quant-lantity -print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0   find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -printf \"% %p %pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -name Regex-type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-exe0 | sort -r-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "cat Regex |  -n QuantQuantity |  -n Quantity cat echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -print Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P Filex                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  x Program xr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp Reg-o Regex File-(  -d File-d Regex File |) tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -typedepth Quantity-type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -a -v exclude Regex Fileexclude Regex File File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number |-d Regex sortiq-c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-p Reg                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a parent-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%pn' | find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print \"'% Reg %p:: %ps n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -u Regex -k Number-k                 "
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee File awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk Program-F File |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -exe0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -type Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -or -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -perc chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo |ex | t Program                        echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -type find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto extmount Reg-o extX Regexex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -u -r Number  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -r Numberkumber-k find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "date $( date %%a %x %Y  )( datename )            "
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  xp ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h   | sort -n |-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity cut tr Reg-d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -h -h   | sort -n |-n | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -lf | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h (  Path -type d - sort -n |-r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -d File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-m find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex | xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec wp in-namename Regn Regex  +; |  |-n |ex -k Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  xargs -I  name  )                       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "t -s nullglob                                          "
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -typec mv  File -directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Regity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "echo Regex                                    "
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | xargs -I   i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File -not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -printc echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "gzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -l Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-mlink name Reg-name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R Reg                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |-o ap Regex                       "
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i Regex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -namec  grep Reg-l Reg-l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-o ap Regex     mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n |                        "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; xp -v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex File-l Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-(  File-u File )  iq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime Times-Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date )exex       date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail -nity a Program                              "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -print0 |ge find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " Reg- Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex-printname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity -not -iname Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex | xr Regex Regex | xargs -I -I  wc - |  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nuunset  shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -printc  grewd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print-exec grep -H Reg-n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find | gre Program-e Program-e Program find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -exe f -print0 \"'%h%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex gre Program grep Regex sed Program                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -d Quantity File Reg split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path  Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "echosed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |- |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user d -name Regex -atime +-Timespan -a Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -nameer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-p Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "8.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp Reg-o Reg-o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -q -r -r File File                      diff   diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff  diff diff  diff diff "
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -type Regex -printne -or -name f -print xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -H Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( whichame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec zip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -ls Quant-lantity -print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0 n find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex -exe0 | sort -n-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P |x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex |                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program xr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp Reg-o Regex File-(  -d File-d Regex File |) sedr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -typedepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex Reg grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq  sort -d Number |-d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-g Reg                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a parent-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%pn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print \"'%  %p::%%psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -f -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  headawk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk Program-F File                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -exe0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -or -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | t Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -not Regex -prune -or -print  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto extmount,-o extX Regex Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -r Number Numberumber-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "date $( date %%a %X %X\" )( hostname ) date date date date date date date date date date date date"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep Regex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h   | sort -n |-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 wargs -I Quantity -I  wc -l    "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity cut tr Reg-d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h   | sort -n |-n | head - Quant Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -l | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h File( find Path -type d - sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -v File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec wp in-namename Regn Regex  ; |  -n Regex -k Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  sedargs -I  dirname  )                       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "echo Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                                "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | greargs -I   t                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegextypeex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -name Regex-mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex ) find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "gzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep Reg-H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-mlinknamename Reg-m f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R Reg                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex    find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -exec  grep -l Reg-l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-o ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegextypeex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n                         "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -exec link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex File-P Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  sortiq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date ) Regex |ex Reg date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -exe0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | taila Program                              "
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -print0ge find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex-printname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iname Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr Regex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -l f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -printc  grewd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | gre Program-e Program-e Program                                  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -daytime Timespan -exe f -exe0 \"'%h%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex gre Program grep Regex sed Program |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path  Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime +-Timespan -name Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-s Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File                 "
    }
  ],
  "9.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex ex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o Reg-o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -r -r -r  File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -2 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -type Regex |-exec grep -H Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -perm Permission -exe0-exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -ls Quant- Quantantity -print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0 n find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %p%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-exe0 | sort -r-k | find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex |                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | sedr Regex Regex | sed Program | find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d File-d Regex File )  sedr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -typedepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex Reg grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-g |                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a parent-directory Directory --targets "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%pn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -type Regex -print0 \"'%  %p:: %psn' |"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee File | headawk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk -F File Program |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path - -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -or -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | t Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto extmount,exto extX Regex Regext mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -r Numberkumber |-k find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "date $( host %%a %x %Y  )( hostname ) date date date date date date date date date date date date"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  xp ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -s   | sort -r |-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f |-exef wargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity | cut tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h   | sort -r |-n | head - Quant Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -exef | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h File( find Path -type d |- | sort -n |-r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity   find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -v File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec wp in-namename Regc Regex  ; |  |-n |ex -k Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  sedargs -I  dirname  )                       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs replace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "echo Regex   read read read read echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                                "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -H Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | greargs -I   i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -name Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R  File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-delink de_-de f -demin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i ex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex |-exe f |-exec   ; | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -i -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-o ap Regex | mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n |                        "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -exec link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date ) Regex |ex Reg date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | tailsed Program |    tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -type -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | sedd -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -print0 |t find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -printname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity -not -iname Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc - |  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nuunset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -exe f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxcdir pwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -printne -or -name Regex -print0-exec grep -H Reg-n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -de f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | gre Program-e Program-e Program |                                  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -exe0 \"'%h%%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -a Regex | gre Program | xp Regex | sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path  Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -type f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime +-Timespan -name Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex -print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-s Regexf                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "10.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -name Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex |  -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -q -r -q File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -type Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex Reg-o suremount,ruidex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex  tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links Quant- Quantantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0 n find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-type0 | sort -u-k find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex |                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | sedr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  File-d -d Regex File )  sedr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex Reg grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |-p |                          "
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a parent-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -not Regex -print \"'%  %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0n find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awk -f File |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -type Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -or -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo |ex | t Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto extmount,-o extX Regexex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number s sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -r Numberker-k find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "date $( host %%a %X %X\" )( hostname ) date date date date date date date date date date date date"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -s  + | sort -n |-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -l | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h ( find Path -type d - sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -v File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec grep in-filename Regn Regex  ; |  -n Regex -k Number |-k |-r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  sedargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | greargs -I   i                  "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -printc echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "findtarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir Directory-p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-delink_name -name f -demin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print      "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program                          "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep ex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -namec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-o ap Regex | mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( read Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "  uniq -c | sort -n                         "
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -v Regex File-l Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -c                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date ) Regex |ex Reg date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail -nity | tailsed Program |  tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -type -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program sedd -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -prints find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc - |  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc  pwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H Reg-n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -de f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | gre Program-e Program-e Program                                  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -daytime Timespan -exe f -exe0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | sedp Regex sed Program |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -l Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  sedargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-s Regexd                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "11.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -q -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -name Regex -printne -or -name f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  +; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links Quant-lantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-print0 | sort -n-k find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex |                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program sedr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | cutawk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g Reg      groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk -f File |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | t Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto remount,-o extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host %%a %X %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -s  + | sort -n-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity cut tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -lf | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h File( find Path -type d |- sort -n-r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -v File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -E Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec grep in-filename Regn Regex  +; |  |-n Regex -k Number |-k-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File File                               "
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | greargs -I  file i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -printc echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -name Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -R File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-mlink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program          echo   echo  echo echo  echo        "
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep ex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -exec  grep -l -l Regex  +; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-o ap Regex | mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( read Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n      sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep -v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-P Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -d                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date ) Regex |ex Reg date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -type f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program sedd -e                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-print0s find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p $                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirlwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-print Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -de f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-e Program-e Program                                  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -daytime Timespan -exe f -print0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il-                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -a Regex | gre Program | grep Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program  find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -user Regex -atime +-Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "s Reg-s Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File                 "
    }
  ],
  "12.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -r -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -name Regex -printne -or -name f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex  tail  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  head Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links Quant- Quantantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0 find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf |  -u-k find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe | | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | sedr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |-l | cutawk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex Reg grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g |        groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -f -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee File awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk -f File |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | t Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto remount,-o extX Regex Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Numbero sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -r Number Numberer |-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "date $( date \"%a %X %X\" )( datename ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exef wargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity | cut tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h   | sort -n -h | head - Quant Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -lf | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h ( find Path -type d - sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -v File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename Regc Regex  ; |  -n Regex -k Number-k-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File  cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "find Path -name f -name Regex -exec grep -H Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "find Reg-i Regex | greargs -I   i      find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec echo n Regex  -printc echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep Reg-H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-mlink_name -m f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $ex | gre Program     echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -print0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( read Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n      sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -d                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime Times-Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date ) Regex |ex Reg date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime Times-Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | t Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -prints find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -de f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "find | gre Program-e Program-e Program   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -type f -print0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " |-o d \"il                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | grep Regex | sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip - ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex -exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -user d -user Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "watchs Reg-s Regex                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File                 "
    }
  ],
  "13.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -r -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -type Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex  tail Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-o Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |) |                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links Quant- Quantantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0 find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-type0 | sort -n-k find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "cat Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | sedr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c | sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g Reg |   groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -typedepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |         cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ;  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | t Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t exto remount,-o extX Regex Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number o sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberker-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( date %%a %X %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-n find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 wargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc  -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -type f -mmin -Quantity -l0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h File( find Path -type d |- | sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename Regc Regex  ; |  -n Regex -k Number-k-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  xargs -I  dirname  )                       "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -typedepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex   find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs replace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-e Regex | xargs -I   i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File -not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -namedepth Quantity -name Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir Directory-p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r  File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -typec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | gre Program    echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep ex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-o ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n     sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep -v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -d                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "date $( date ) Regex |ex Reg date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date date"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm r -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | t Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f -print0 |s find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iname Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -de f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program                                  "
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -type f -print0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set |-o d \"il-        set set set   set set set set set set    set  set set set     set      "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | grep Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | sed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regexd          who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File                 "
    }
  ],
  "14.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -r -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -print f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 File( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex Reg-o suremount,ruidex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail  Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | head Quant find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-E Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |) |                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links Quant-Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-print0 | sort -n-k find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P |x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex n find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -exe0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ;  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t exto remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes sort -n NumberQuer-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host \"%a %X %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  xp ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity | cut tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---h File( find Path -type d |- | sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec grep color-filename c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -H Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | xargs -I  file i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -printc echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex-mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -typec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex |-exe f |-printc    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program  echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex | mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -d                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | t Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-print0s find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s File-f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H Reg-n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program          mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -type f -print0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set |-o d \"il set   set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex | sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regex         who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File                 "
    }
  ],
  "15.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -r -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -name f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 File( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -name Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( ame -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links Quant- Quantantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-exef | sort -n-k find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "cat Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex n find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex sed Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | awk Program                     "
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g Reg | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |                "
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ;  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -iname Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -o exto remount,-o extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host %%a %x %Y\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l   find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -exef | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h File( find Path -type d - | sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename c Regex  ; |  -n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; ap Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File Reg cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -H Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-e Regex | xargs -I  file i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r  File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                         "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program  echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -name f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )                       "
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printfs find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File )                           "
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-p Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -exe f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program         mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -exe0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -o d \"il                                     "
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip - ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantity find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -nameer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regexd                   "
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "16.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -name f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) )( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  File-d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program      who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-p | | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program  cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ;  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo |ex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t exto extmount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Numbero sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-k find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host %%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l   find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -h File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  -n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name0 grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -H Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | greargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg   su su su su su su su su su su su su                           "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex File-R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -printc    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | gre Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  +; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )  source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-l Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-t Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File )   kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path -notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex    find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex-type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -exe f -print0 \"'%h''%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -a Regex | gre Program | grep Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip - ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime +-Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regexn       who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "17.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -r -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -name Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex Reg-o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-typef | sort -n-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "cat Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program    who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -d Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee  awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program     cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ;  find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -type f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---h File( find Path -type d |- | sort -n -r Number |                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -E Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( dir Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | xargs -I  file i                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink  ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg    su su su su su su su su                              "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-namelink name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-printc    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  +; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegextypeex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )  source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-n File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm r -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-print0t find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File )  kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxcdir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -print0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -a Regex | gre Program | grep Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program  find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-i Regexf         who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "18.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | ap -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-E Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P |x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv  ;;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex   find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -name d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program     who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  cargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number -k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |    cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Number Numberer-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity -exe | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---h File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp  File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -E Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename c Regex  ; |  -n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ; -printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg                                         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-name_ name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  +; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )     source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printt find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File )   kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -  find find find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program    mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -mtime Timespan -exe f -exe0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program  find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regexs         who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "19.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | cutap -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P |x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -type d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program   who who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program | cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -type f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l   "
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---h File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -E Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -H Regex  ; -printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg  su su su su su su su su su su su su su su su su                        "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -typedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-exe0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  +; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) )  source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -exec link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -      "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc dir dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex-name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program    mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -exe f -exe0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regexd     who who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "20.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -p -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -name f -print0 xargs -I  grep -l -l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex -exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" | find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex |                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -mindepth Quantity -max d -exec mv -t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  File-d -d Regex File )  tr Reg-d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | awk Program    who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq  sort -c Number -d Regex sortiq -c | sort |       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -maxdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number-k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | tee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |    cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -type f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echo Regex | headt Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number o sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( host \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "find -s ---h File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex  read read which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which read"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-i Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec echo n Regex ;-exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg  su su su su su su su su su su su su su su su su su su su su su                   "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex | xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I    | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( which Regex ) ) source source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -      "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc base dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -exe f -exe0 \"'%h'%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -a Regex | gre Program | xp Regex | sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc zip - ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program | |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-i Regexf      who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "21.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -print f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -print -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -mindepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program   who who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -maxdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number -k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |    cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -type f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yes Regex | headt Program yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -type Regex -atime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n NumberQuumber-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( date \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l   find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h   | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---k File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex |-exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -type Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex  which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-a Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex ;-exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su       "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex | xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-flink_name -m f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I  cat  | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-printc    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) ) source source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -exec link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex Reg read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -      "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -print f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc base dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -type f -print0 \"'%h''%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -a Regex | gre Program | xp Regex | sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  sedargs -I  sed -i Program  find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc gunzip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-i Regexf     who who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "22.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | ap -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -print f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount ex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -f -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -typedepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | awk Program   who who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File --       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-g | | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number -k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |     cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -type f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yes Regex | headt Program yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -name Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number o sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n NumberQuer-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( date \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---k File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex   find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "echo Regex  which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ;-printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-a Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not - -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su         "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex | xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I  cat  | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) ) source source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n   sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -    find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc base dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -exe f -exe0 \"'%h''%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc gunzip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - | |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-s Regexf     who who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "23.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | tp -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -print f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm File-1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity se echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -mindepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File |)  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program   who who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-p | | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number -k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |            cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yes Regex | headt Program yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -name Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number o sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n NumberQuer-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( date \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File | find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---k File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n File File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "read Regex  which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -H Regex  ; -exec name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-a Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su        "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex | xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I  cat  | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f -exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex | mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) ) source source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex Reg                                "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -type -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -      "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc base dirpwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -type f -exe0 \"'%h''%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex | sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program  find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc gunzip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -not -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-i Regexf     who who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "24.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | ap -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -print f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) )( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity se echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -mindepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program   who who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-p | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number -k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |            cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yes Regex | headt Program yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -name Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( date \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -printc du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---k File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "which Regex which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ; -printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-a Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su     "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "tarzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I  cat  | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) ) source source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -    find find find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc base pwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -type f -exe0 \"'%h''%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc gunzip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-i Regex    who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ],
  "25.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "find Path -path Regex -prune -or -name f -name Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "read -r -p Regex Regex  read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echo Regex | ap -o -o Regex | cut -d Regex -f Number echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diff -N -r -u File File diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff diff"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "find Path -typename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "find Path -not Regex -prune -or -print Regex -printne -or -print f -print0 xargs -I  grep -l Reg-l Reg-l Regex "
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "comm -1 -2 ( sortcomm -1 -2 File( sortcomm -1 -2 File( sort File ) ( sort File )( sort File )( sort File )  "
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mount Regex -o suremount,ruid Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -namedepth Quantity -name Regex | tail n find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "find Path -typename Regex -type f -exe0 | xargs -0 -I  mv  File find find find find find find find find"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "find Path -maxdepth Quantity -name Regex | tailn find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "find Path -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "find Path -name Regex |-exec grep -l Regex  ; | wc -l find find find find find find find find find find find find find"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "crontab -l | grep Reg-v Regex |                             "
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "find Path -perm Per-Permission -exe f -exec ls -l  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File( uname -r ) grep Regex                           "
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "find Path -type f -m Regex -mtime +Timespan -exe0 | xargs -0 -I  rm f "
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -exec gunzip  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "find Path -per f -perm Permission -exe -exec chmod Permission  ;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Reg( ifconfig |)                     "
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -type f -name Regex find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "find Path -links -Quantity-print find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "find Path-print xargs -0- find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "find Path -type f -exef \"% %s%pn\" find find find find find find find"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whochown -R Regex File )                "
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "find Path -name Regex |-printf | sort -u-n find find find find find find find find find find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "find Path -name Regex  xargs -I  rm  find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echo Regex |  -n QuantQuantity |  -n Quantity se echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "find Path -name Regex -or Regex  find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f  Regex Reg                     "
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "df -P x                           "
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "find Path -type f -exec gzip   ;-exec gv   ;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -name Regex -print0 | xargs -0 -I  mv t Directory  "
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mount  grep Regex                          "
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "find Path -user Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "find Path -mindepth Quantity -max d -exec mv t Directory  + find find find find"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  grep Regex  "
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "find Path -type d  sed Program | tr Regex Regex t Program find find find find find find find find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "find Path -name Regex -exe0 | xargs -0 -I  rm  find find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "find Path -type f -exe0 | xargs -0 -I  chmod Permission "
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedp -o Regex File-(  -d -d Regex File )  tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "find Path -maxdepth Quantity -maxdepth Quantity -type d find find find find find find find find find find find find"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "who |-l | cutawk Program   who who who who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex  grewk Program                    "
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rsync -r -v exclude Regex Fileexclude Regex File File       "
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "  | uniq  sort -c Number -d Regex sortiq -c sort       "
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": "groups -l |-p | groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups groups"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "find Path -iname Regex -exec tar -c -v -f File  ; find find find find"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "find Path -name Regex  xargs -I  cp -a --target-directory Directory --parents "
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "find Path -name Regex -exef \"'%hn' find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "find Path -notdepth Quantity -not Regex -print0 \"'%: %ps: %psn'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "find Path -print0 find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sort File | sort -n Regex -k Number -k sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "find Path -name Regex -prune -or -name Regex -print find find find find find find find find find find"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "find Path -inum Quantity -exec rm  ; find find find find find"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "find Path -iname Regex -exec rm -r -f  ;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echo Regex |ex | aee > awk Program echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catawk Program-f File Program |           cat cat cat cat cat cat"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "find Path -type f -de0-exelete find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "find Path  grep -v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "find Path -ctime +Timespan find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "find Path! -newermt Regex find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "find Path -exe Regex -exec chown Regex  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "find Path -name f -( -pername Regex -per -perm -Permission ) find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yes Regex | headt Program yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "find Path -path Regex -prune -or -print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mount -t -o remount,-t extX Regex Regex  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "find Path -name Regex -typetime +Timespan -exe0 | xargs -0 -I Quantity -I Quantity -I  tarzip2 "
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sort -n -r Number sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "find Path -name f -name Regex -exes | sort -n Numberner-l find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "find Path -type f -iname Regex find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "find Path -cmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "host $( date \"%a %x %X\" )( hostname ) host host host host host host host host host host host host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findrm  File  find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "ls -l  grep ex |                       "
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "find Path -type f -size +Size -exec  -h  + | sort -n-r find find find"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "find Path -type f -exe0 xargs -I Quantity -I  wc -l  find find"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echo Regex |  -w Quantity |  tr -d Regex echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "find Path -type f -exec du -s -h  + | sort -n -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "find Path -m f -mmin -Quantity |-exe0 | xargs -0 -0 -I  ls -l "
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s ---k File( find Path -type d |- | sort -n -r Number                "
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "find Path -type f -print0 | xargs -0 -I Quantity  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cp $ File                                      "
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cp -n  File                                     "
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "find Path -mtime Timespan -name Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "find Path -type f   find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "find Path -name Regex  xp -v Regex | find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "find Path -inum Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "find Path -mmin Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "find Path -name f -name Regex -exec grep color-filename -c Regex  ; |  |-n Regex -k Number |-k |-r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cd $( find Path -name Regex  xargs -I  dirname  )                      "
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shopt -s nullglob shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "find Path -name | grep Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "find Path -mindepth Quantity -maxc mv  Filetarget-directory Directory --; find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "find Path -name Regex  xargs -I  grep -i Quantity -i -i Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "find Path -name f -name Regex -exec grec -l  ; grep Reg-v Regex find find find find find find find find find find find find find find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "find Path -name f -name Regex  xargs nplace Regex -I  sed in-place Regex Program  find"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "which Regex which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which which"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "cat File | tee File File cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -l Regex  ; -printc name  ;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "bzip2  | tee File-a File                         "
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Reg-a Regex | xargs -I  file I                   "
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "find Path -namegex Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "find Path -newer File!not! -newer File find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "find Path-L Path -type l-exec  n Regex  -exec echolink - ; find find find find find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "find Path -mdepth Quantity -m Regex -mtime +Timespan find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reg su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su su    "
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "find Path -( -name Regex -or -name Regex )   find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zzip -d Regex                                  "
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkdir -p Directory                                  "
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "find Path -size Size find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "find Path -name Regex | xargs -I  grep -H Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scp -r File File                                 "
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mv File File                                     "
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "find Path  -min -namedepth Quantity -type Regex -typeore-namelink_name -name f -mmin +ity -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mv File-t File File Reg                         "
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "find Path -name Regex |-print0 | xargs -0 -I  cat  | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | h                           "
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chown ex -R File                        "
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mount |-o | grep Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i ex  ;-print       "
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "find Path -name Regex -exe f |-exec    + | wc -l find find find find find"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echo $ex | a Program echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "find Path -name Regex -exe0 xargs -I  grep Regex   find find find find find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "find Path -type f -exec  grep -l -l Regex  ; tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mount |-l ap Regex mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "find Path -typegex Regex  find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "source $( dirname $( read Regex ) ) source source source source source source source source source source source source source source source source source source source source source source source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sort  uniq -c | sort -n  sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort sort"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "find Path -type l -notc link -f  ; grep Reg-v Reg( findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "find Path -atime +Timespan -exelete find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "find Path -name f -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findgrep -r Regex File-r Reg find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File-( sort File-u File )  uniq -u                 "
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "find Path -user f -user Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "find Path -type d -mtime -Timespan -exe0 | xargs -0 -I  mv -t Directory "
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mv File-n Directory File                                 "
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "find Path-L Path -namename Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echo $( date ) Regex |ex Reg echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "read -p Regex Regex read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "ln -s File Regex                                 "
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "find Path -type d -emptdepth Quantity -empty -de0 | xargs -0 -I  rmdir  find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "find Path -m f -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "tail | tail - Quantity | taila Program | | tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "find Path -type Regex -per -perm Per-Permission  xargs -I  rm f -f "
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | td -c                         "
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "find Path -type f-printft find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "kill - Regex Reg(  File ) kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill kill"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "find Path -user Regex -iname Regex find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cd $-P Directory                               "
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "find Path!notdepth Quantity!not -iwho Regex find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "find Path -type f -exec chmod Permission  ; find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "find Path -iname Regex   find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "find Path -name Regex  xr ex Regex | xargs -I -I  wc -      "
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shopt -s nons nounset shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop shop"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "find Path -type Regex -type f-print find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "find Path ( pwd ) -type f  find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "find Path -mtime -Timespan find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "find Path -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "ln -s -f File Regex Reg                              "
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "find Path -mmin -Quantity find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "find Path -max Regex -maxc base pwd ; find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "find Path -name Regex -typene -or -name Regex -print0-exec grep -H -n Regex  ;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "find Path -group Regex -name Regex find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "find Path -( -name Regex -or -name Regex ) -a f -atime +Timespan -exec rm  ;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mount | gre Program-n Program-e Program  mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount mount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "find Path -name Regex -typetime Timespan -type f -exe0 \"'%h''%%%%c  -nity  ; find find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bzip2 -k -v File                                  "
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "set -o d \"il set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set set"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pstree -p Regex | gre Program | xp Regex sed Program | |                     "
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "split -n Quantity File split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split split"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "find Path Path Path Path-type f  xargs -I  chmod Permission  find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "find Path -group Regex-print find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "find Path -name f -name Regex  xargs -I  sed -i Program   find find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "find Path  xwk Program find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sed Program File | |                            "
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "find Path -name Regex -printc gunzip  ; find find find find find find find find find find find find find find"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "find Path -size +Size-print find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "find Path -name Regex |-exe0 wargs -I Quant-I -I  wc - |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "find Path -iname Regex  find find find find find find find find find find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "find Path -namegex Reg posi -regex Regex  find find find find find find find find find find find find find find find"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "find Path -type d -exec chown Regex  ; find find find find find find find find find find find"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chown Reg( whoami ) File                      "
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "find Path -size +Size -l \"%ss %p%p%p\""
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | revsed Program-e Program |                "
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "find Path -name d -name Regex -atime -Timespan -user Regex "
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "find Path -amin -Quantityx find find find find find find find find find find find find find find find"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "find Path -name Regex -pru -newamefile Regex-print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "whos Reg-i Regex    who who who who who who who who who who who who who who who who"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "comm -2 -3 File File |                 "
    }
  ]
}