{
  "1.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -name Regex -prune -or -name f -name Regexexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -n -p Regex Regexexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | head -E -v Regex head -d Regex -f Numberexecexecexecexecexecexecexec"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "findfind -q -q -q - Fileexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "findfind Path -typename Regexexecexecexecexecexecexecexecexecexecexecexecexecexecexeclibliblibliblibliblibliblibliblib"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -type Regex -prune -or -print Regex -printune -or -name f -print0 xargs -I {} grep -H -H ReH Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -3 <( sort -3 -3 -( sort -3 -3 -( comm File ) )( sort File ) ) |( sort File ) |( sort File ) |"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " Regex Reo remount Resuidgexexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex - x -execexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -name Regex -prune -or -print -execexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "findfind Path -typeame Regex -type f -exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime TimesTimespanexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex - head -"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regexexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "findfind Path -name Regex -exec w -H Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l grep -v -gexexecexecexecexecexecexecexec"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -exec f -exec ls -l {} \\;execexecexec"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "findfind File grepame -t ) grep Regexexecexecexecexecexecexec"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "findfind Path -name Regex -exec gzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -exec0exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Re findconfig Reexec"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -type f -name Regexexecexecexec"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -sizeprintexec"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "findfind Pathprint xargs -0 -"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -exec \"%dir %s\\p\\n\""
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regextype fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexec"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex -exec0 | sort -kk -"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {} {} {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regexexec"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | head - Quantity QuantityQuantity cut - Quantity Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "findfind Path -name Regexprint Regexexecexecexec"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regexexecexecexecexecliblib"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "dfdf -hexecexecexecexecexec"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -name f -exec gzip {}l {} \\;print bv {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " - grep -gexexecexecexecexecexecexec"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "findfind Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -typeepth Quantity -type d -exec mv {}t Directory {} \\"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -print0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -type d - grep Program x Regex Regex x Program"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "findfind Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedsedrep -r Regex File( sed -d Red Regex File ) sed Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "findfind Path -maxepth Quantity -maxdepth Quantity -type dexecexecexec"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l Re awk Programexecexecexecexecexec"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex grepk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -r -r -exclude Regex --exclude Regex --"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " - | sortiq - sort -c Numberd Regex sortiq -c sort |"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l Rep Re Reexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "findfind Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex - xargs -I {} cp {}r - {}-directory Directory {}target {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "findfind Path -name Regex -print \"%%p\\n'execexecexecexecexecexecexec"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "findfind Path -namedepth Quantity -name Regex -pr \"%% % %p'\\'%pf\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "findfind Path -print0execexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Regex -k Numberk - -execexecexecexec"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -name Regex -prune -or -name Regexprint"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -exec rm {}r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex |gex Re aw - awk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -F Reexecexecexecexec"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -exec0execre"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "findfind Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "findfind Path -cttime TimesTimespan"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path - -newert Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -type Regex -exec chown Regex {} \\;execexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexecexecexecexecexec"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -type f - -permame Regex -or -perm PerPermission \\)"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -perm chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " |gex | head Programexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -name Regex -prune -or -print0execexecexecexecexecexecexecexec"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " Reo Ret remount Reo remXgexgex Re Reexecexecexecexecexecexec"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -attime +Timespan -exec0 | xargs -0 -I Quantity -I Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r Number Fileexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex -exec sort -n Numberk -execexecexecexecexecexec"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regexexec"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "findfind Path -cmin -Quantityexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " Re date -%%a %x %X\" ) datename -"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -execexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " -execexecexecexecexecexecexec"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "findfind -l - x -gexexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -size f -size +Size -exec ls -h {} \\ sort -n -k -"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": "findfind Path -exec f -exec0 wargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | head -w Quantity head head Red Regex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "findfind Path -type f -exec ls -s {}h {} + | head -n -n - head - Quantity Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "findfind Path -type f -mmin -Quantity -ls xargs -0 -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -s - sort Path -type d | | sort -n -r Numberexecexec"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "findfind Path -type f -print0 | xargs -0 -I Quantity -"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity - -execexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " - Fileexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -r Re -libexecexeclibliblibexecexecexecexeclibexec"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -nametime Timespan -name Regexprintexecexec"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f - - - -hostlibliblibliblibliblibliblibliblibliblibliblibliblib"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "findfind Path -name Regex - x -E Regexexecexecexecexec"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprintexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -mmin Timespanexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexeclibexec"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "findfind Path -name f -name Regex -exec w -ignore-re Rel Regex {} \\; w -n -gex -k Numberkk"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "findfind $( find Path -name Regex - xargs -I {} grepname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s nullglobexecexecexecexecexec"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name0 x -gexexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -typeepth Quantity -exec mv {} File {}-directory Directory \\;execexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -in Regex - grepargs -I {} grep -H Re {}i Rei Regex {} {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "findfind Path -name f -name Regex -exec grepc -l {} \\; grep -E -gex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -user Regex - -execexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "findfind Path -name f -name Regex - sedargs -ignore -gex --I {} sed -exameplace Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regexexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | x -execexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "findfind Path -name f -name Regex -print grep -H Regex {} \\;print grepname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - tee -a Fileexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Rem Regex grepargs -I {} grep {}l {} {}execexecexec"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -namege Regex -execexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "findfind Path -newer File -print - -newer Fileexecexecexec"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "findfind Pathtype Path -type lexec ls {}n {}gex {};print lslink - \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -namedepth Quantity -name Regex -mtime +Timespanexecexecexec"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re Re Reexec"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -name Regex -or -name Regex -) -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex Reexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir Directoryp Directoryexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "findfind Path -size Sizeexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex xargs -I {} grep -H Regex {} {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -R -execexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File Fileexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexecexecexec"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -max -nameepth Quantity -type Regex -type -faillink -delete -type f -mmin + -exec"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v $(t File Fileexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "findfind Regex | xexec"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex FileR Reexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount Reo Re grep -gexexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "findfind Path -in Regex -pr grep -H -gex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": "findfind Path -name Regex -exec f -exec w {} {} \\ | wc -l"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "findfind Regex | grep Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "findfind Path -name Regexprint xargs -I {} grep -gex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -name f -exec grep grep -H -H Regex {} \\; grep -"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -o Re grep Regexexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -namege Regexexecexecexecexecexecexecexec"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( dir Regex ) ) ) ) )execexecexecexecexecexec"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " - sortiq -c | sort -n - -execexecexecexecexecexecexecexec"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind Path -type l -not greplink -f {} \\; x -v Re findlink -f - )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -exec -execexecexecexecexecexecexec"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regex"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -R -gex Filer Reexecexecexecexecexec"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "findfind File( grep Filen - ) headiq -c"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "findfind Path -user f -user Regexexecexecexecexecexec"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime TimesTimespan -exec0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v $(t Directory Fileameexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -namename Regexexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " Re date +gexgex Reexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex Reexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s -gexexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -execdepth Quantity -exec -exec0 | xargs -0 -I {} rmmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -type f -mtime TimesTimespanexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " - tail - Quantity | tail Programexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -type Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program sed -t -execexecexecexecexec"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "findfind Path -type fexec0execexecexecexecexecexecexec"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " Re Regex Re p File )execexecexecexecexecexec"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "findfind Path -user Regexprintame Regexexecexecexecexecexecexecexec"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " $(l $(execexecexecexeclibexecexecexeclibliblibexecexecexec"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -indepth Quantity -in -pathame Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;execexecexecexecexec"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "findfind Path -iname Regex x -execexec"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": "findfind Path -name Regex - w Regex Regex | wargs -I -I {} wc -"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s ns nsetexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprintexecexecexecexecexecexecexecexec"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "findfind Path - lswd )ls f -execexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime TimesTimespanexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regexexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantityexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -print grep grepwd \\;execexecexecexecexecexec"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -printune -or -name Regexprintexec grep -H ReH Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -group Regexprint Regexexecexecexecexecexecexecexec"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path - -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - grep Programe Programe Programexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -mtime Timespan -print f -exec '%T\\%%m sed -n' \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -c -v -execexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -n - -execexecexecexecexecexecexecexecexecexecexecexecliblibliblibliblib"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -sgex grep Program x -gex x Program"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -l Quantity -execexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path - - -type f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprintexecexecexecexecexecexecexecexecexecexecexecgroupsgroups"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "findfind Path -name f -name Regex - sedargs -I {} sed -i Program {} {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "findfind Path - xk Programexecexecexecexecexecexec"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - Fileameexecexecexecexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "findfind Path -type Regex -exec grepzip {} \\; -"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "findfind Path -size +Sizeprintexecexecexecexecexec"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "findfind Path -name Regex -exec0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regexexecexecexecexecexecexec"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "findfind Path -namegextype pos -namegex Regex - -"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;execexecexec"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own - whoami )execexecexecexecexecexecexecexec"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -ls \"%ls\\p\\p\\%l\\"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "findfind Regex | x Programe Program"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -user f -user Regex -atime TimesTimespanuser Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "findfind Path -amin -Quantityexec"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -name Regex -new -newfile Regex -new -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Reo Regex Re Reexecexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -1 -3 < File - - -execexecexecexecexecexec"
    }
  ],
  "2.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -name Regex -prune -or -name f -print Regex -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -s Regex Regexidechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoechoecho"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | cut -v Rev Regex cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -r -r -r - Fileix"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "findfind Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -prune -or -print Regex -printune -or -print f -print0 xargs -I {} grep -l Rel Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -3 File( sort -1 -3 <( comm -1 -3 <(comm File ) )( sort File ) ) )( sort File ) )( sort File ) )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount Regex Reo remount,roid,gexid,"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | sort -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -type Regex -prune -or -print -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "findfind Path -typeame Regex -type f -print0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex - head -"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "findfind Path -name Regex |exec w -i Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "catcatrontab -l | grep -v Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm -Permission -exec f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "catcat $( uname -r ) grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -perm Permission -exec -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( whoconfig |"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -type f -name Regexgex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -type -printprint"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "findfind Pathprint xargs -0 -"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"%f %s %p\\n\" |"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "chch( whoown ReR Regex File )id"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex |type0 | x -kk -"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm -"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echoecho Regex | rev -n QuantityQuantity cut -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "findfind Path -name Regexor Regex"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s Filef File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "dfdf -P."
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "findfind Path -type f -print gzip {}l {} \\;print echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount - grep Regexid"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "findfind Path -user Regex - x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -typeepth Quantity -type d -print mv {}t Directory {} \\ename"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -print0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -type d - grep Program | grep Regex Regex tr Programk"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "findfind Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -v Regex File( sed -s -d Regex File ) sed Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "findfind Path -typeepth Quantity -typedepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | cutk Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": "digdig Regex Regex cutk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -r -v -exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -d Number -d Regex | uniqc sort"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |p |"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "findfind Path -iname Regex -exec tar -r -v -f File {} \\;k"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex - xargs -I {} cp {}p -parents-directory Directory {}parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "findfind Path -name Regex -exec '%p\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "findfind Path -typedepth Quantity -type Regex -print '%: %ps\\: %16f %n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "findfind Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sortsort File | sort -k Regex -k Number -k - - -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -name Regex -prune -or -name Regex -print"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity -exec rm - \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex |gex | aw File awk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "catcat Programf Re Programk"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -print0execod"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "findfind Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "findfind Path -cttime +Timespan"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path - -newert Regex -"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -exec Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -perm f - -permame Regex -or -perm -Permission \\)"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "echoecho |gex | head Program"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -type Regex -prune -or -print -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount Reo exto extount,t extX Regex Regex Reid"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -prtime +Timespan -print0 | xargs -0 -I Quantity -I Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sortsort -k -k Number -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex -exec sort -n Numberk -k - -"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "findfind Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " Re host )%hosta %x %X\" ) datename )"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findfind - Re"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l - x -gex"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -type f -size +Size -printf ls -s {} \\ | sort -n -k"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echoecho Regex | rev -w Quantity head tr Red Regexases"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "findfind Path -type f -exec ls -s {}h {} \\ | sort -n -n | head - Quantity Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "findfind Path -type f -mmin -Quantity -print0 | xargs -0 -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -k -k - sort Path -type d - | sort -k -k Number - - -"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "findfind Path -type f -print0 | xargs -0 -I Quantity -"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " - Fileree//"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -r - File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -nametime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f -id,,,....,,,,,envenvenv"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityid-"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "findfind Path -name f -name Regex -exec echo -n-filename ReI Regex {} \\; | w |n Regex -k Number -k -k"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( dir Path -name Regex ) xargs -I {} dirname {} )id )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shshopt nulls nullglobid"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name | grep -gex"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -typeepth Quantity -type mv {} File {}-directory Directory {};"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -i Quantity Rei Ren Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "findfind Path -name f -name Regex -exec sedc -l {} \\; grep -v Regex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -I Regex ReI {} sed -i-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee Fileid...echoechoechoecho"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "findfind Path -name f -name Regex -exec dir -l Regex {} \\; -print dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 File | tee Filea Filekzip"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "findfind Rel Regex xargs -I {} file {}l {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -namegex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "findfind Path -newer File!print - -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "findfind PathL Path -type lprint ls {}n {}gex {};print llink {} \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -namedepth Quantity -name Regex -mtime +Timespan -"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -name Regex -or -name Regex \\) -id"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex |"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir Directoryp Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "findfind Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -i Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r - Fileidsshsshsshsshsshsshsshsshsshsshsshsshsshsshsshsshsshssh"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File Fileod////exexexexexexexexexexexexexexexex"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -name -typeepth Quantity -type Regex -type-pathdir_m -type f -printmin + -exec"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv Filet File Fileolver//..../././,envenvenvenv"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | teeid.."
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown -gex FileR File...envenvenvenvenvenv"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |o Re grep Regexid"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i Regex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -print w {} {} \\ | wc -l"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | cut Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "findfind Path -name Regex -print0 xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -exec echo echo -i Rel Regex {} \\; aw Filek"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount |d Re aw Regex"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -namegex Regex"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "shsh $( dirname Re which Regex ) )id )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "commcomm - uniq -c sort -k - - - -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind Path -type l -not ls - -f {} \\; grep -v Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -exec"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regex"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findfindrep -r Regex Filer Reid"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( un Fileu File ) < uniq -c"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "findfind Path -user f -user Regex -"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory Fileid"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -namename Regexid"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "datedate $( date )gexgexree"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regexechoechoechoechoechoechoechoechoechoechoechoecho"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regexid"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "findfind Path -type d -emptydepth Quantity -empty -exec0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -type f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | cut Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -type Regex -exec -type PerPermission - xargs -I {} rm -r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | rev -cid"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "findfind Path -type f -print |read_"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "killkill Re Regex Re n File )id"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "findfind Path -user Regex -printame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd $(p Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -indepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "findfind Path -iname Regex x"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -I -I {} wc -"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nouns nounsetid"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "findfind Path - pwd ) -exec f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime -Timespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s Filef File Regexixenvecho"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "findfind Path -max Regex -pr echo echowd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -printexec grep -l Ren Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -name Regexprint Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "findfind Path - -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm - \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -typetime Timespan -print f -print '%T\\ %%print sed -n \\ \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e exit -id"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex aw Program cut -gex cut Program"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity File Reid"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "findfind Path - - -type f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "findfind Path -name f -name Regex - xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "findfind Path - trk Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |od"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "findfind Path -name Regex -exec gunzip {} \\; -"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "findfind Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "findfind Path -name Regex |exec0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "findfind Path -namegexxtype pos -namegex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "findfind Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown Re whoami )id"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -exec 'fs\\p\\p\\%f\\"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe - |ix"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -user f -name Regex -atime -Timespan -print Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "findfind Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -new Regex!new -newfile Regex -new -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rev Regexid"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -1 -3 < Filecommcommcomm"
    }
  ],
  "3.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -name Regex -prune -or -name f -name Regex"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r Rep Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | cut -E Reo Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -r -r -r File Filevvv"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -prune -or -print Regex -printune -or -print f -print0 xargs -I {} grep -n Ren Ren Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 <( sort File1 -2 File( ls File2 -2 <( ls File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex Ret remount,roid Regex Re"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tail -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -type Regex -prune -or -print"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -nameame Regex -type f -exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -n Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l grep ReE Regex |"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm -Permission -ls f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " File uname -r ) grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -exec -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif Re catconfig |"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -type -Quantity -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "findfind Pathprint xargs -0 -"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -exec \"%% %s %p\\n\" |"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown -R Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |exec0 | sort -nn"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echoecho Regex | fold -n QuantityQuantity | cut -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "findfind Path -name Regex -exec Regex"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -n File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -h File"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\;print compressv {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount - grep Regex |"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -typeepth Quantity -type d -exec mv {}t Directory {} \\"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -type d - grep Program | sort Regex Regex | sed Program |"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -r Regex File( sed Files -d Regex File ) < grep Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "findfind Path -typeepth Quantity -typedepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "whowho |l Re cutk Program Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex cutk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rrsync -r -v -exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -d Number -d Regex sortiq -c sort"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |p Re"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -r -f -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - xargs -I {} cp -a --parents-directory Directory {}parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%p\\n' |"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -typedepth Quantity -type Regex -exec \"%%: %ps\\: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Regex -k Numberk"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -name Regex -prune -or -name Regexprint"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -exec rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex |gex | aw File awk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk ProgramF File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -exec0exec"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -cttime +Timespan"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path - -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -exec Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -name f - -nameame Regex -or -perm -Permission \\)"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | cat Program |==echo=="
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -type Regex -prune -or -print0"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -t Ret extount Ret extX Regexgex"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -attime +Timespan -exec0 | xargs -0 -I Quantity -I Quantity -I {} bzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r Number File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex -ls sort -n Numbernn"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "echoecho Re date -%%%\"x %X\" ) hostname )host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l - x Regex |"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -type f -size +Size -printf ls -h - \\ | sort -n |n-"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echoecho Regex | tr -w Quantity File tr | tr Red Regex |"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "findfind Path -type f -printf ls -h -h {} \\ | sort -n -n | head - Quantity Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -type f -mmin -Quantity |ls0 | xargs -0 -0 -I {} ls -l -"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "dudu -k -k - ls Path -type d - | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "findfind Path -type f -print0 | xargs -0 -I Quantity -"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " - File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -v File File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -nametime Timespan -name Regexprint"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f -, -,activeactiveactiveactive"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -E Regex"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantity"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec w -with-filename Rec Regex {} \\; | w |n Regex -n Number |n |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex - xargs -I {} chname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s nullglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name0 grep Regex"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -exec mv {} Filetarget-directory Directory {};"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -i Quantity Ren Ren Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -name f -name Regex |exec grepc -l {} \\; grep Rev Regex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -delete-gex -I {} sed -i-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee Fileuseruseruser==useruser======"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -print Regex -exec grep -r Regex {} \\;print dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee Filea Filezip"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " Rea Regex xargs -I {} file {}l {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namegex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -typeer File!not! -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type lexec ls {}n {}gex \\;ls lslink - \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -namedepth Quantity -name Regex -mtime +Timespan"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -name Regex -or -name Regex \\)"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex |append"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -n Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r File Filehosthost==="
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File Fileexexexexex"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -name -nameepth Quantity -name Regex -type-fail--fail Retype f -mmin + -exec"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v Filet File Filehosthosthosthost"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | x"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |t Re grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -n Regex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} \\ | wc -lset"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | rev Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep -gex {} {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -name grep grep Ren Rel Regex {} \\; grep File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount |t | grep Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -namegex Regex"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " < findname Re read Regex )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sortsort | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -type l -not lslink -f {} \\; grep Rev Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -exec"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexsearch"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex Filer Re Filesearch"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( cat Filen File ) < uniq -d"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -user f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -namename Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echoecho $( date )gexgex Re"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regexexecexecexecappend"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "mountmount | tail - Quantity | cut Programjoin"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -exec -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | tr -a"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type f -name0"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " Re Regex Re cat File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -iname Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " $(p Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -typedepth Quantity -type -nameame Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex grep"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | wargs -I -I {} wc - |"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s ns nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path - pwd ) -ls f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s Filen File Regexappend"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -type bas echowd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -print Regex -print0exec grep -n -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -group Regex -name Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path - -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mountmount - aw Programn Programe Programappend"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -daytime Timespan -type f -print \"%%TY\\%%% sed -n {} \\;%"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -v -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -x echo,"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -a Regex | grep Program | aw Regex | aw Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File Rejoin"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path - Path Pathtype f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path - trk Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |exec0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "findfind Path -namegextype pos -namegex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own - whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls \"%ss %p\\p\\%p % |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programn Program-"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex!pr -newfile Regexnot -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Ren Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -1 -3 < File"
    }
  ],
  "4.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r Rep Regex Regex===="
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | cut -E -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -N QuantityN Quantityw - Fileexecexecexec"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "findfind Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -re Regex -notune -print -print Regex -printune -print -print f -print xargs -I {} grep -E -l Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 <( sort -1 -3 <( sort -2 -3 -( sort File ) <( sort File ) )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,uidid=gexmountmountmountmountmountmountmountmount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | sort -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -print -print"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "findfind Path -typeame Regex -type f -print0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | head"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "findfind Path -name Regex -exec w -c Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep -v Regex |"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -exec f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "findfind Path -name Regex -exec zzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "findfind Path -perm f -perm Permission -exec -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " - whichconfig |"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -type f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -printprint"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "findfind Pathprint xargs -0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -exec \"%f %s %p\\n\""
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "chch( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex -exec0 | sort -zk"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {} {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | tr -n QuantityQuantity | cut -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "findfind Path -name Regex -or Regex"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "findfind Path -type f -exec gzip {}k {} \\;print basv {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " - grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "findfind Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv {}t Directory {} \\"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -type d - sed Program | sed Regex Regex | sed Program |"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": "findfind Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -E Regex File( tr -d -d Regex File ) < grep Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "findfind Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | cutk Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a -v -exclude Regex --exclude Regex -- File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -c Number -d Regex sortiq -c sort"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp Re"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "findfind Path -iname Regex -exec tar -c -f -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex - xargs -I {} cp -a {}target-directory Directory {}parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "findfind Path -name Regex -exec \"%%h\\n'execexec"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -exec \"%%: %pf %: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "findfind Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Number -k -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -name Regex -prune -name -name Regex -print"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm {}r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex |gex Re sed > sedk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -delete0execdeletedeletedelete"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "findfind Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "findfind Path -cttime +Timespan"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path - -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -print Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -name f - -iname Regex -or -perm -Permission \\)"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;execexecexecexecexecexecexecexec"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | head Programexecexecexecexecexecexecexecexec"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -print -printprintprintprintprint"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o remount,t extX Regexgex=="
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -typetime +Timespan -exec0 | xargs -0 -I Quantity -I Quantity -I {} bzip2 -"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k Number -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex -ls sort -u Numberrk"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "findfind Path -cmin -Quantity -"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date -%%a %x %X\" ) hostname )"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "rmrm - File"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l - grep -gex"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -type f -size +Size -exec ls -h {} \\ | sort -r |k -"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | tr -w Quantity | tr tr Red Regex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "findfind Path -type f -printf du -h -h {} \\ | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "findfind Path -type f -mmin -Quantity -exec0 | xargs -0 -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": "dudu -s -b - ls Path -type d - | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "findfind Path -type f -print0 | xargs -0 -I Quantity -"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " - File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - File Fileexec"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -mtime Timespan -name Regexprint"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\( - -namenamenamenamenamenamenamenamenamenameinininexecexec"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "findfind Path -name Regex - x -v Regex"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantity"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex -exec grep -color-filename Rec Regex {} \\; | w |n Regex -k Number |k |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cdcd $( find Path -name Regex - xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s nullglobnullnull"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name | grep -gex"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -max mv {} Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -i Quantity -i Rei Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "findfind Path -name f -name Regex -exec grepc -l {} \\; aw -E -gex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regexexec"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | x File==././"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -execdir -H Regex {} \\; -exec dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Fileexecexecexecexecexec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a -gex | xargs -I {} file {}l {} {}execexecexecexec"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -namege Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File!not - -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type l -exec read {}n {}gex \\;or readlink - \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -namedepth Quantity -name Regex -mtime +Timespan"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -name Regex -or -name Regex \\)"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d -gex |archivearchivearchivearchivearchivearchive"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkmkdir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "findfind Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -H Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File Filesshsshsshsshssh==sshsshsshssh"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File Fileexecexecexecexec"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -name -typeepth Quantity -type Regex -type -mindirsm -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv Filev File File/"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls -gex | xexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown -gex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "gg Path -name Regex -exec grep -i Regex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} \\ | wc -l"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "lsls $(gex | cut Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "findfind Path -name Regex -exec | xargs -I {} grep -gex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -exec grep grep -l Rel Regex {} \\; | cut -"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount -l aw -gex"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -namegex Regex"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource < whichname Re which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sortsort - uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -x l -not lslink -f {} \\; grep -v Re plink -f {} )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execexecexecexecexecexecexecexec"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regexfind"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findfindrep -r Regex Filer Re"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu - ) < < uniq -c Quantity"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "findfind Path -type f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Re File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -namename Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date )gexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s File Regexexec"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "findfind Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {} File"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -type f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "mountmount | tail -n | cut Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "findfind Path -type fprint"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Re n File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "findfind Path -user Regex -iname Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -typedepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "findfind Path -iname Regex x"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x -gex Regex | xargs -0 -I {} wc -"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s ns nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "findfind Path - pwd ) -type f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime -Timespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s Filef File Regex"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "findfind Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print0exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -group Regex -name Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "findfind Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -mtime +pan -exec f -exec '%T\\%%exec sed -n {} \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v -"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -x nExit"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex sed Program grep -gex | aw Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity Filesplitsplitsplit"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": "findfind Path - Path Pathtype f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "findfind Path -name f -name Regex - sedargs -I {} sed -i Program {} {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "findfind Path - pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": "findfind Path -name Regex -exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "findfind Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "findfind Path -name Regex |exec | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "findfind Path -namegextype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "findfind Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown Re whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls \"%ss %p\\p\\%f\\"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | cut Programn Program |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -user f -name Regex -atime +Timespanuser Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "findfind Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -name Regex!not -newfile Regexprint -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " ReP Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 < File"
    }
  ],
  "5.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | cut -E -o Regex cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -E -E -r Quantity File"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "findfind Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -notune -or -type Regex -printune -or -type f -print0 xargs -I {} grep -H ReH Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 <( sort -1 -3 <( sort -1 -3 <( sort File ) <( sort File ) )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount Resuid Regex Re"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | tail"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "findfind Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex -type grep -H Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep ReE Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -type f -name Regexdev"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -print -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"%f %s %p\\n\" % %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -type Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown -R Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | x -zz |"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | tr -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regex"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s Filef File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P |"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\;exec echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount - grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -max d -print mv -t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec | | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -type d - sed Program | tr Regex Regex | sed Program"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -E Regex File( sed -s -d Regex File ) sed Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": "findfind Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | cutk Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex grepk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rrsync -r -v -exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -c Number -d Regex sortiqc sort"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -f -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - sedargs -I {} cp -t --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -printf \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "findfind Path -maxdepth Quantity -name Regex -type \"%%: %Pf Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Regex -k Number -k -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -name Regex -prune -or -name Regex -print"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexdev"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex |gex Re aw > awk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -delete0delete"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -cttime +Timespan"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path - -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -type f - -iname Regex -perm -perm -Permission \\)"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yesyes Regex | head Program"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o Reo extount Ret extX Regex Regex Redev"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -typetime +Timespan -type0 | xargs -0 -I Quantity -I Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r Number"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex -ls | sort -n Numbern -r"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )\"%a %x %X\" ) Re datename )"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findfind -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l - grep -gex"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -h {} \\ | sort -n |r"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echoecho Regex | tr -w Quantity | tr | tr Red Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "findfind Path -type f -printf ls -S -h {} + | sort -n -h | head - Quantity Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity -exec | xargs -0 -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -k -k File ls Path -type d - | sort -n -r Number -"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -gex"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n Filegex File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regexprint"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f -%, \\("
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantity"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex -exec grep -with-filename ReH Regex {} \\; | w |n Regex -k Number |k |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cdcd $( cat Path -name Regex - xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shshopt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name | grep Regex |gex"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -max mv {} Filetarget-directory Directory {};"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -name Regex - xargs -I {} aw -i Quantity -i Rei Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -name f -name Regex -exec grepc -l {} \\; | grep -E -gex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -H Regex {} \\; |printf dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "ggzip2 - | tee -a Filegex"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich Rea Regex | xargs -I {} file {}n {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namege Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -not - -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type l -exec read Ren Regex Re;exec readlink - \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -namedepth Quantity -name Regex -mtime +Timespangex"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "susu -"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -name Regex -or -name Regex \\) -dev \\ \\ \\"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex |"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "mkmkdir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "findfind Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep ReH Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File File"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -max -typeepth Quantity -max Regex -type-fail__m -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv Filet File Filedev"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | tee"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown -gex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -type grep -H -gex {} \\;exec"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -type f -exec w {} {} + | wc -l"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": "echoecho $(gex | cut Programame"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec | xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -exec grep grep -H -l Regex {} +; | tee -"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount -l | tail Regex"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -typegex Regex -dev"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " - uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -type l -not llink -f {} \\; grep -v Re lslink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -exec"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regexdev"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex Filer Re"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "commcomm File( sort Filen File ) < uniqu"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regexdev"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filen Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echoecho $( date ) $(gexgex $("
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex Re"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "findfind Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "mountmount - tail - Quantity cut Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexdev"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | od -c"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "findfind Path -type fprint |"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "killkill - Regex Re ps File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -typeame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd $(P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -typedepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex x"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc - |"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s ns nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path - pwd ) -exec f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime -Timespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s Filef File Regex"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "findfind Path -name Regex -type bas pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -typeune -or -name Regex -type |exec grep ReH -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regex"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -delete rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mountmount - aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -mtime Timespan -type f -exec '%T:'% |printf aw - Quantity {} \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "truetrue -e n -xit"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "pspsstree -p Regex | sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path - Path -type f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - sedargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "findfind Path - pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "findfind Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex -type | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regextype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "findfind Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown Re whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -ls 'fs %p\\p\\%f\\"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex -not -newfile Regexnot -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Req Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -1 -3 < File"
    }
  ],
  "6.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -path f -name Regex -findfindfindfind"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -r Regex Regexreadreadreadreadreadreadreadreadreadreadreadreadreadread"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Numberechoechoechoechoechoechoechoechoecho"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filefinddiffdiffdifffind"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regexlinkslinkslinkslinks"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -notune -or -print Regex -printune -or -print f -print0 xargs -I {} grep -E Rei Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 <( sort File1 -3 <( sort File1 -2 File( sort File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex Reo remount,suid=gexmount"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex - tail -find"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -printfindfindfind"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -typeame Regex -type f -exec0 | xargs -0 -I {} mv {} Filefind"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfindfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex -exec bas -c Regex {} \\; | wc -lfind"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexjobsjobsjobsjobs"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm -Permission -exec f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "catcat $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -execdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -exec -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " Re unconfig |"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regexfind"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -Quantityprint"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"%f %s %p\\n\"find %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -type Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown -R Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |exec0 | x -zn"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | od -n QuantityQuantity tr -c Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -f Filef File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip {}k {} \\; |exec gv {} {} \\;find"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -max d -execdirv -t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}find"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - sed Program tr Regex Regex sed Program"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}find"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -o Regex File( rev Filed -d Regex File File tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex @ grepk Programgex.."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -c Numberd Regex sortiq -c sort |"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp | Re Rejobsjobsjobsjobsjobs"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -r -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -printf \"%%h\\n'finddirdir"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -maxdepth Quantity -name Regexexec \"%%: %ps Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -n Regex -k Numberk"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex |gex Re tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " Programf File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -exec0execfind"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -cttime +Timespanfind"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfindfind"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f - -iname Regex!perm -perm -Permission \\)in"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;execexecexecexecexecexecexecexecexec"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | head Programyesyes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -printlsls"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o remount,t extX Regexgexdev"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -exec0 | xargs -0 -I Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -nk Numbersortsortsortsortsortsortsortsort"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex -exec | sort -n NumberQuantitynfindfindfindfindlslsls"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexfindfindfind"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityfindfind"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " \"$ date )%%a %x %X\" ) datename )"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - Filefind"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": " -l - grep -gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -h {} + | sort -n -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echoecho Regex | fold -w Quantity head tr -d Regexechooutputoutput"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -h -h {} + | sort -n -h | head - Quantity Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity -exec0 | xargs -0 -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k Size ls Path -type d - | sort -n -k Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 xargs -0 -I Quantity -find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " File File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -n File File File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regexprint"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f -find, - - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex |findfindfindfieldsexec"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprintfind"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind-findfindfindfindfind"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespanfindfindfindfindfind"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex -exec bas -color-filename Rec Regex {} \\; | w -n Regex -k Numbern |k |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex - xargs -I {} dirname {} )dirdirdir"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt nulls nullglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | x -gexfindexecexecexec"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -maxdirv - Filetarget-directory Directory \\;execexecexecfindfindexec"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -i Quantity -i Rei Regex {}findfindfind"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -name f -name Regex -exec sedc -l {} \\; | aw -v -gexfindfindfind"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfindfindfind"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "catcat File | tee Filecatcatcatcatcat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -name f -name Regex -exec grep -i Regex {} \\; -printfdirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - File tee -a Filegex2"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {} |"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namegex Regexfindfind"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -not - -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type l -exec read {}n Regex \\;exec readlink - \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -namedepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "susu Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -name Regex -or -name Regex \\)find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regexarchiveargs"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefindfindfind"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -i Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r File Filescscsc"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File Filefind//exexexexexex/exexecexecexecexecexecexexec"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind Pathnameepth Quantity -max Regex -type-afterdir_min -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v Filef File Filepath/"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | xlsexec"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;exec"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | rev Programfind"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -exec grep grep -i -l Regex {} +; | tee -gex"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | aw Regexmount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexre"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -type l -links llink -f {} \\; grep -v Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -execfind {} {}execexec"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexfindfindfind"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex FileR Refindexec"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u File"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -user f -user Regexfind"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date )gexgexdate"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regexreadread"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanfind"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity sed Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfindfind"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | od Program od -cecho"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fexecfind"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Re which File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -L Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex xfind"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x -gex Regex | xargs -0 -I {} wc -find"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s ns nsetls"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfindfind"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -type Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path - pwd ) -type f -lsls"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanfindfind"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfindfindfindfind"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s Filef File Regexgex Re Re"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityfindfind"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -maxdir echowd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print0exec grep -H -n Regex {} \\; -"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regexname Regexfind"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path - -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | aw Programe Programe Programmountmountmountmount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -typetime Timespan -type f -exec '%T'%%% aw - Quantity \\ \\;find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v Filebbbbbbb"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -x truefailfalsefalsefalsefalsefalse"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | grep Program | grep Regex | grep Program |find"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity Filesplitsplitsplitsplitsplitsplitsplit"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path -type f - xargs -I {} chmod +mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprintfindfind"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - sedargs -I {} sed -i Program {}find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sedsed Program File | |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip - \\; |"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex -exec0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own Re whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls'ss\\p\\p\\%f\\"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Programfind | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex!not \\(newfile Regexnot -sameer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Rep Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 < Filecommcommcommcommcommcomm"
    }
  ],
  "7.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -path f -name Regex -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regex======="
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | grep -o Reo Regex cut -d Regex -f Numberix"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Fileix"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -prune -or -print Regex -prune -or -print f -print | xargs -I {} grep -i Rel Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 <( ls -1 -2 -( ls -1 -2 -( ls File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,suid=gex="
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | tailfind"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -name Regex -prune -or -print"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filedir"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep Reo Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm -Permission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "catcat $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -perm f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -Sizeprintfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint | xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"%f %s\\p\\n\"ls"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( lsown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type | | sort -zz -gex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echoecho Regex | sed -n QuantityQuantity | sed -n Quantityix"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -f Filef File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -name gzip -k {} \\; |print mkv {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -type d -printdirv -t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec | | xargs -0 -I {} grep Regex {}find"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - sed Program tr Regex Regex sed Programgex"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -o Regex File( sed -s Filed Regex File File < sed Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | sedk Program | | | | | | | | | | | | |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex | sedk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync --a --v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": "awkawk File | uniq - w -f Number -d Regex uniq -c sortix"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |p |xit | | | |"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - xargs -I {} cp -a {}target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec '%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -exec '%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "catcat File | sort -n Regex -k Number -k -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -name Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex |gex Re tee > sedk Program sed"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk Programf File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0delete"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -cttime +Timespanfind"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -name f - -iname Regex -perm -perm -Permission \\)and"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yesyes Regex | sed Programyes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print {}"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o remount,t extX Regex Regexres"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sortsort -n -r File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex -ls sort -n Numbern -r"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexfind"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) datename )"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "rmrm -rm"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l - grep -gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -h {} \\ | sort -r |rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec | xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | sed -w Quantity | sed | sed Red Regexgex===="
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du {}S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -x File ls Path -type d - | sort -n -r Number sed"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n Filecp=="
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printfind"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(find, \\( \\( Path Pathpath -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regexfind"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex -exec grep -with-filename Rec Regex {} \\; | w |n Regex -n Numbern |r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex - xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s nullglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexgex. -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -maxdirv {} Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -i Quantity -i -i Regex {}dir {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -name f -name Regex -exec grepc -l {} \\; | aw Rev Regexfind"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regexx"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "catcat File | tee File=============="
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -execdir -l Regex {} \\; |execdirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - File tee -a Fileg===exec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {}dir"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namegex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -not - -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type l -exec echo {}n Regex \\;exec readlink - \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "susu Re Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -name Regex -or -name Regex \\) -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex |find |"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -H Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File==============="
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File Filecludepathpathpathignore"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -name -nameepth Quantity -name Regex -type_existingdir_race -m f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v Filef File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |print | | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | x -test..=...==="
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |o | grep Regex=\""
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -name Regex -exec grep -i -gex {} \\; |execname"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex |print f |exec w {} {} \\ | wc -l aw"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( rev Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec | xargs -I {} grep Regex {} {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -exec grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )gex"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "nlnl - uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind Path -type l -not lslink {}f {} \\; | grep -v Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexfind"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex Filer Filefind | | | | | | | |"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "commcomm File( un Filen File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -namename Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex $("
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex="
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Program | |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "sedsed File | sed Program od -c"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fname | |"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( cat File )=/"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -L Directoryx=======/=="
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -typedepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex xfind"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x -gex Regex | xargs -0 -I {} wc - aw"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nounu nounsetsh"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime TimesTimespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s Filef File Regex"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -maxdir pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print |exec grep -H Ren Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -delete rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -mtime Timespan -exec f -exec '%h\\%%% aw -n {} \\; sed"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e truefail=$=="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex | sed Program | sed Regex | sed Program |id"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path - - -type f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - sedargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path - pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sedsed - File |sed | | | | | |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |exec | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regextype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own Re whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec'ss\\p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Programgex"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex -"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityfind"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex!not -newfile Regexnot -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Rep Regexyes"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 File Filecommcommcommcommcommcommcommcomm"
    }
  ],
  "8.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex - - - - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regex=====and=== -==== -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | grep -E -o Regex cut -d Regex -f Numberfind="
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -N -a -u - Filegex Re==andandfindandandandandandandand===andandandandand"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": "findfind Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -prune -or -print Regex -printune -or -print f -print0 xargs -I {} grep -E Rei Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 <( sort -1 -3 <( ls -1 -3 -( ls File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex Reo remount,roid=gex============="
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | tail==="
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print - - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "findfind Path -typeame Regex -type f -exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -day f -daytime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regex="
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex -type grep -l Regex {} \\; | wc -l"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexand==andandand"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\; Re"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "catcat $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -print gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -type f -name Regex - - - - - -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -Quantityprint"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": "findfind Pathprint xargs -0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"%f %s %p\\n\" %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )find"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type | | sort -zn"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echoecho Regex | tr - Quantity QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "findfind Path -name Regex -or Regex -find - - - - - - - - -"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "dfdf -P"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |print echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "findfind Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -max d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -type d - tr Program tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec - | xargs -0 -I {} chmod Permission {}dev"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "sedsedrep -E Regex File( tr -s -d Regex File ) < tr Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | cutk Program="
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex grepk Programgex............."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -r -v -exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -f Number -d Regex sortiq -c sort"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp Re"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "findfind Path -iname Regex -print tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - sedargs -I {} cp -a {}target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec '%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": "findfind Path -typedepth Quantity -not Regex -print \"%%: %16s Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": "findfind Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Numbern -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -path Regex -prune -or -name Regex -print"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex Re tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk Programf File Programfind="
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -exec0exec -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "findfind Path -cttime +Timespan"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -print Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -type f - -iname Regex -or -perm -Permission \\) - - - - -"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\; Re"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yesyes Regex | n Program==andandandandand="
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -printandandand -andandandandandandandandandand"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " Reo Reo extount Ret extX Regexgexdev - - - - - - -== -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -print0 | xargs -0 -I Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k Numberandand"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex |ls | sort -n Numbern -n % {}=== -"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regexgex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "findfind Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " \"$ date )\"%a %x %X\" ) $( hostname )host"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findfind - Filefind - - - - - - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l | grep Regex"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h {} \\ | sort -n |rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | fold -w Quantity | head | tr Red Regexgex="
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -print du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |print | xargs -0 -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d - | sort -n -k Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -=="
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( Filefind/"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n -finddevdevdevdev="
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -mtime Timespan -name Regex -print -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(dev, - Path - - - - - - - - - - - - - - - - - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regexfind= -"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityfind -====and= - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex -print grep -color-filename Rec Regex {} \\; | w |n Regex -n Numbern |r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cdcd $( find Path -name Regex - xargs -I {} dirname {} )..=......."
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s nullglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name | grep Regex -= - - - - - - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv {} File {}-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -i Quantity -i -i Regex {} % {} {} {} {}.=====.="
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} \\; | aw ReE -gex"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex==="
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "catcat File | tee File========="
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; -exec dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee Filea Filegex..==and===="
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {}=/===="
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namege Regex - - -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "findfind Path -newer File -and - -newer File...."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type l -print echo {}n {}gex \\;or readlink - \\; |"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -mdepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "susu Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -name Regex -or -name Regex \\) -find - - - \\"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex...andand"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory======"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": "findfind Path -size Size -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep ReH Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File==============="
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File Filefind/ex__prprandpathandandandand"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type-faildir_race -m f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv Filef File Filedev.....=."
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | xfind.................."
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex -R File="
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |o | grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -type grep -i -gex {} \\;print Re."
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -print w {} {} \\ | wc -ldev"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | cut Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": "findfind Path -name Regex -exec0 xargs -I {} grep Regex {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount -a | grep Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -typegex Regexfind, - - - - - - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) ) Re"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind Path -type l!not lslink {}f {} \\; | grep Rev Re findlink -f ) )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind - - - - - -delete"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regex -gex - -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "findfindrep Rer Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": "commcomm File( sort Fileu File ) < < uniq -d....."
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "findfind Path -type f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -cttime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File Re========"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -namename Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echoecho $( date ) Regex Regex Re="
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex======="
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex=="
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "findfind Path -type d -emptydepth Quantity -empty -exec0 | xargs -0 -I {} rmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -type f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Program=="
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -perm Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program od -c"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "findfind Path -type fprint="
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "killkill - Regex Re cat File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "findfind Path -user Regex -nameame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directory========"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\; Re"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s ns nsetdev===findand"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint=and"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path - pwd ) -type f - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime TimesTimespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexgex==dev===== -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantity"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "findfind Path -name Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print0exec grep -H -i Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -group Regex -name Regexfind - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -and f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - grep Programn Programe Program======3232"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -mtime Timespan -type f -print '%T:' %%% aw - Quantity {} \\; %"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "truetrue -e er - -=,========"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex | grep Program | grep Regex | sed Program |find======="
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity File="
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod Permission {},,,"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - sedargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "findfind Path | pastek Programand"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sedsed Program File | | | | | | | | - - - - |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "findfind Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "findfind Path -name Regex |type0 wargs -I QuantityI -I {} wc - {}"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regextype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -ls'ss %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "echoecho Regex | rev Programe Program |find | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -name f -name Regex -atime -Timespan -user Regex -"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": "findfind Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -type Regex!not -newfile Regexpr -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Req Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 < File=andand"
    }
  ],
  "9.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -find - - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regexdev"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | grep -E -o Regex | cut -d Regex -f Number1 | | | | | |"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filea"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -type Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path \\(name Regex -prune -or -type Regex -printuneor -print f -print0 xargs -I {} grep -i Rel Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 <( sort -1 -3 <( ls -1 -3 <( ls File ) )( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,roidgex -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tail | | | | | | | | | | | | | |"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -name Regex -prune -or -print - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lfind"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -execdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -exec -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( lsconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regexfind"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -Quantity -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"%f %s %p\\n\"ls"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown ReR Regex File )ch"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |printf0 | sort -uz |find"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}find"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": "echoecho Regex | fold -n QuantityQuantity | cut -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f |exec gzip -k {} \\; |exec echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -max d -exec mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}find"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - grep Program | tr Regex Regex | grep Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep ReE Regex File( tr -d -d Regex File File tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "fingerfinger |l | grepk Program | | | | | | | | | | |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -f Number -d Regex | sortiqc sort |"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -l |l |% | | | | | | | | |"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -r -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - xargs -I {} cp -a {}target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec '%h\\n'%"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "catcat File | sort -k Regex -k Number -k -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex |gex | tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk Programf File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0exec"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanfind"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -print Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f - -iname Regex -or -perm -Permission \\)print"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | head Programyes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print | - - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o remount -t extX Regexgexdev - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -exec0 | xargs -0 -I Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -nk File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Numbernkfind"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexfind"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - Filefind"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l | grep Regex"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -h {} \\ | sort -r |rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": "echoecho Regex | fold -w Quantity | cut | cut -d Regex |echo |"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |ls0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -k -k File ls Path -type d - | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0I Quantity -"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityfind"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -n Filetarget_"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printfind"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(dev, \\( \\("
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -o Regex |ls"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep Rewith-filename Rec Regex {} \\; | aw |r Regex -k Number |k |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexfind - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -i Quantity -i -i Regex {} {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} \\; | tr ReE -gex |find"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l Regex {} \\; |exec dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee Filea Fileg |"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} file {}a {} |http"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -rege Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -typeer File -and - -newer Filels"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathL Path -type l -exec read Ren Regex \\; |exec readlink - \\; |"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re Re Re Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -or -name Regex \\)find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex |ls"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Reo Regex {}find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File Fileorex"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type-faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v Filef File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |exec0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | xfind........../\\"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |o | grep Regex | |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i Regex {} \\; |execprintf | |"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f |exec w {} {} \\ | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | cut Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -exec grep grep -i Rel Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | grep Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -type l |not lslink -f {} \\; | grep Rev Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexls"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep Rer Regex Filee Filefind"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgexecho"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -exec -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c |"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fprint |$"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " $( Regex Re which File )dev"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -iname Regexfind"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " DirectoryP Directoryxit"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;or"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex x"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nounf nounsetlsset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -exec f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanfind"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityfind"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -type p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print0exec grep -H Ren Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -exec f |exec '%T'% |exec head - Quantity {} \\;ls"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v Filedev"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailxit"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -s Regex | sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {}dev"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -type f -name Regex - xargs -I {} sed -i Program {}ls"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program | | | | | | | | | | | | |"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File | | | | | | |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |exec | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regextype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls'ss %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "echoecho Regex | rev Programe Program |gex | | | | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -userime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityfind"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -type Regex!not -newfile Regexprint -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Ref Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 < File"
    }
  ],
  "10.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex -print - - - - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p $(gex Regex - - - - - - - - - - -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Numberix | | | | | | | | | | |"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - File - - - - - - - -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regexls - - - - - - - - - - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -type Regex -notune -or -print Regex -printune -or -print f -print0 xargs -I {} grep -i -l Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 <( sort -1 -2 <( sort -1 -3 File( sort File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,uidid=gext - - - - - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tail - - - - - - - - -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -name Regex -prune -or -print - - - - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filedir"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespanls -"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regexls - -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lfind"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexc"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regexg"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -type f -name Regex - -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -Quantity -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"%type %s %p\\n\"ls"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown ReR Regex File )ls"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex |printf | | sort -z -z |echo"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -nameame Regexprint"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | tr -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind - -"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -fs"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |print echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -name Regex |print0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regexls"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +dir"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name d - grep Program | tr Regex Regex | grep Program |find"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |delete0 | xargs -0 -I {} rm {} rm"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep Ree Regex File( tr -s -d Regex File File < tr Red Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program | | | | |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a -v --exclude Regex --exclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -c Number -d Regex | sortiqc sort |ch"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobs Re"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex |exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a {}target-directory Directory --parents {}dir"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -printf '%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -b Regex -k Numberk -cut"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm -r -f {} +;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex $( tee > awk Programecho"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " Programf File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -delete |execdelete - -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "findfind Path! grep -v Regexfind"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": "findfind Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -type f - -iname Regex -perm -perm -Permission \\)find - - -"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | bash Program"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print - - - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -o -o remount Ret extX Regexgexdev - - - - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -P {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -t NumberQuantityk -n -"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": "findfind Path -cmin -Quantityls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) $( hostname )echo"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexls"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - Filefind - - - - - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep --gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -printf ls -h - \\ | sort -k -cch"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | tr -w Quantity | tr | tr Red Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -h -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "findfind Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -k -k File"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -search"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n File File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -mtime Timespan -name Regex -print -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\(find Path Path Path Path - - - - - - - - - - - - - - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |print -"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantity -ls Re - - - - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -newmin Timespan - - - - - -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep -with-filename Rec Regex {} \\; | w |k Regex -k Number |k -r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )cd - -"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexfind - - - - - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;dir - -"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -m Quantity -i -i Regex {}'- - -"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "findfind Path -type f -name Regex -exec grepc -l {} \\; | aw ReE -gexc - - -"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; |printf dirname {} \\; bash"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Fileg - -"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {}dir"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namege Regexprint - -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "findfind Path -newer File -and - -newer Filefind"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathP Path -type l -print echo {}n Regex \\;exec echolink {} \\; grep"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind -"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reid Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -name Regex -or -name Regex \\) -print - - - - - - - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex |ls"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind - - -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rel Regex {}c"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File== - -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint - -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - Pathname -nameepth Quantity -type Regex -type-faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v Filef File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |exec0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | xx"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown Regex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |t | grep Regex |e"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;printn"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f |exec w {} {} \\ | wc -ln"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Programid"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep tee -i -l Regex {} \\; | tee -c"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexprint - - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )source"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -k -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind Path -type l -not lslink {}f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind - - - - rm -"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex |ls | - - - - - -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filer File | - - grep -"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "findfind Path -type f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -lname Regexfind -"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgexecho"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "findfind Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {} rm"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -type f -mtime -Timespanls -"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Program |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -type Regex -exec -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -cc"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fprint |ls"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Re which File )=/"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regexfind"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -type -iname Regexls"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "findfind Path -typeame Regex sortn"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}c"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nount nounsetxit"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexls - - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -type Regex -type fprint -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "findfind Path $( pwd ) -type f - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime -Timespanls - -"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex - - - - - - - -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantityress - -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexls - - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'%%or aw -n {} \\;n"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File - - -"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e exitfailX= - - - - - - - - -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | grep Program | grep Regex | sed Program |id"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {} - -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}c"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "findfind Path -name Regex |print | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regexls"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -namegextype sed -regex Regexls"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls 'hs\\p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program |zip | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantitydir"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path!type Regex!not -newfile Regexnot -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rew Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 < File"
    }
  ],
  "11.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -path f -name Regex -print - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regex - - - - - - - -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Numbercut"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -N -a -u - File"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -path Regex -prune -or -type Regex -prune -or -print f -print0 xargs -I {} grep -i Rel Rel Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 <( sort File1 -2 File( ls File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,roidgexo -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailfind |"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -printprint - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filedir"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | taills"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec w -c Regex {} \\; | wc -lls"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep Rei Regexc -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;print"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regexcat"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regexls - - -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -Quantity -printdir"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"ls."
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown ReR Regex File )ls"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type | | sort -z -zmd"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -nameame Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | tr -c Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexprint"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "dfdf -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\; |exec echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} mv {}t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regexls"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -exec mv --t Directory {} +%"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - sed Program tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -o Regex File( sed -s -d Regex File File tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d%"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | sedk Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a -v Fileincludeclude Regex Fileexclude Regex -- File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Number -d Regex sortiq -c sort |k"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp Rels"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex - xargs -I {} cp -a --target-directory Directory --parents {} dir"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec '%h\\n' dir"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -exec \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "catcat File | sort -k Regex -k Number -kcut"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -path Regex -prune -or -name Regex -printprint"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm - \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0execdelete -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regexfind"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f - -iname Regex -perm -perm -Permission \\) -ls"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;ls"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n Program"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o extount,t extX Regexgexdev - - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -nk File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex -ls | sort -t NumberQuantitynls -"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date |\"%a %x %X\" ) $( hostname )echo"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -ls"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " $( Filefind - - - - - - - - - - - - - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": " -l -- grep -gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -h - + | sort -n -cfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -exec0 xargs -I Quantity -I {} wc -l {}ls"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | x | tr -d Regexecho|"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -r -I Quantity -ls"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( Filels"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n Filecp File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regexprint"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(findrop - - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |ls"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityls - - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec bas -with-filename Rec Regex {} \\; | aw |n Regex -k Number |n |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shshopt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | x -gex grep | | | | | - - - - - - - - - - - - - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -exec mv -- Filetarget-directory Directory \\;print"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}find."
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec sedc -l {} +; | sed -v -gex | sed -"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee Fileuid"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -name Regex -exec dir -H Regex {} \\; |exec dirname {} \\;printf"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filef -"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {} |read"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namegex Regex -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -max l -exec read -n Regex \\;exec readlink - \\;exec"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -name Regex -or -name Regex \\) -print - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex |ls"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizels"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -P Regex {}ls"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File Filesc - -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -ls - - -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -typeepth Quantity -type Regex -type_faildir_race -type f -deletemin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v -f File Filepath__"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -type0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | xtest....test.."
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex |f"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;printls"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -type f -exec w {} {} \\ | wc -lls"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep tee -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |a | aw Regexmount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regex -re - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re lslink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex -ls | - -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filer File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -user f -user Regexls"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File -"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -typename Regexls"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex%"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -emptydepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {} rm File"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Programe"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm -f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | od -c"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fprint |dir"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Re s File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regexls"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directoryread"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -type -iname Regexls"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;or"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {} aw"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nouno nounsetls"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime TimesTimespanls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexgoogle - - - - - -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls - -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -path Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexprint - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path - -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -typetime Timespan -type f -exec '%T %% |exec aw - Quantity {} \\;ch"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "truetrue -e erfailpp -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity Filesplit -"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path - -type f - xargs -I {} chmod -mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - sedargs -I {} sed -i Program {}ls"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File | | | | | | -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |type | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls'ss\\p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programn Program2 | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -type Regex!not -newfile Regex -not -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Req Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File File"
    }
  ],
  "12.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex - {} - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex%abab -AM - -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number)"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -N -a -u - File -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typegex -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -path Regex -notune -or -print Regex -printune -or -print f -print | xargs -I {} grep -i -i -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 File( sort -2 -3 File( sort File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,uidid=gexAM"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | tail"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print {} - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filefind"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -daytime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex -type grep -c Regex {} \\; | wc -lcut file"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexc -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec | | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |print gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -print -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"%f %s %p\\n\"du %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type f -print"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type | | sort -un% % % {}"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | cut - Quantity QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\; |printdirv {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -type d -print mv -t Directory {} +dir"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}find"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - tr Program tr Regex Regex grep Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep Reo Regex File( tr Filed -d Regex File File tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d%"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -r -v --exclude Filegex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq - w -d Number -d Regex sortiq -c sortv"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex |exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -printf \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regexprintf \"%Name: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -t Regex -k Numberkcut"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -print"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex%"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex $( tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " Programf File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete |exec\\"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -attime +Timespandir"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -perm f - -iname Regex -perm -perm -Permission \\)find {} {}\\"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print {} {} {}"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -o -o rount Reo extX Regexgex"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Numberrn % {} {} {} {} {}"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " \"$ date )\"%a %x %X\" ) $( hostname ))"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": " -l | grep Regex%"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h - \\ | sort -r -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | cut cut Red Regexix"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |ls0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -k Number - %"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -dir"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n Filecp File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(,///"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityfind84 -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -newmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -type f -name Regex |exec grep -c-filename Rec Regex {} \\; | aw |n Regex -k Numbern -r"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} ). )..."
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexfind - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -max mv -- Filetarget-directory Directory \\;dir"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -type Regex - xargs -I {} grep -i Quantity -i -i Regex {}st"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec awc -l {} +; | aw -E -gexfind"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -type f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex |execdir -H Regex {} \\; |printf dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Fileless2stdstd"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {}dir"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -regex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -not - -newer File%"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathP Path -type l -exec echo {}n Regex \\;exec readlink {} \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind %"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -re Regex -re -name Regex \\) - - {}"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex |% | |"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep Rer Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -name Regex -type_faildir_fail -type f -deletemin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v -f File File_____"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " -gex | xrw"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |q | grep Regex"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -type grep -i -gex {} \\;printml"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -print w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -print0 xargs -I {} grep Regex {} {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -H Regex {} \\; | tee Filetmp/"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l aw Regex"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -exec {}"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex |%"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex Filer File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u."
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -user f -user Regex %"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -depth d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filen Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regex"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " Files File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -max d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}dir"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime TimesTimespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity tail Program {}"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -type Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program od -c"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fname"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( p File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -typeame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -typeame Regex sort - %"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -type Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nounO nounset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime TimesTimespan"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s Filef File RegexdevAD"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantity %"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw -e Programe Program {} {} {} {}"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T %% |print aw - Quantity {} \\;)"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -o erfail"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex sed Program | grep Regex sed Programst"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path - Path -type f - xargs -I {} chmod Permission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - sedargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint %"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -ls \"%Pf %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -type Regex!not -newfile Regex -print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Req Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 File File%"
    }
  ],
  "13.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -find"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regexdir"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number- sequence"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -N -a -u - File"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regexfind"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -not Regex -notune -or -type Regex -printuneor -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 <( sort -1 -3 <( sort -1 -3 <( sort File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,autoid=gex"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailfind"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filefind"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regexfind"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |print grep -l Regex {} \\; | wc -lfinddir"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep ReE Regexc"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regexcat"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig |if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regexfind"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"%f %s %p\\n\"finddir"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -znfind"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regexfind"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | head -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -finds"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip {}k {} \\; |execdirv {} {} \\;echo"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex xfind"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -max d -printdirv --t Directory {} +dir"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}find"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - grep Program tr Regex Regex | grep Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |exec0 | xargs -0 -I {} rm {}find"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -E Regex File( sed -s -d Regex File | tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type dfind"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |finger | |"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rrsync -r -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq - w -f Number -d Regex sortiq -c sortv-"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lpjobs"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regexprintf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -t Regex -n Numbern -cut - -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;print"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex | tee > headk Programecho"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0execfind\\"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regexfind"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanfind"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -perm f - -iname Regex -perm -perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -printcat"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o remount,t extX Regexgexdev"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -nk File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -t Numbernnfind"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexfind"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityfind"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date formatted%%a %x %X\" ) hostname )dateHost"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex%"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " File Filerm"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep --gex"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -S - \\ | sort -h -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | head | tr -s Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -type f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Numberfind"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0n Quantity -find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityfind"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( Filecp"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -n -cpdir FiledirCopy"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printfind"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(findrop \\( \\( \\(,// -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind84"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespanfind"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -type f -name Regex |exec bas -with-filename Rec Regex {} \\; | aw |n Regex -n Number |n |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )dir ) ) )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexfind | |"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -maxdirv -- Filetarget-directory Directory \\;dir"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -i Quantity -i -i Regex {}find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec awc -l {} \\; | aw -E -gexfind"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee Filefile"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -name Regex -execdir -l Regex {} \\; |exec dirname {} \\;print"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - File tee -a Filefail"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {}dir"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -rege Regexfind"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and! -newer File."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " PathP Path -type l -exec echo -n Regex \\; |exec readlink {} \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Resu"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -re -re Regex \\)find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex%"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rel Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r File File=\""
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -name Regex -type_faildir_fail -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File_"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls -gex | xdevsfailfail"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |l | grep Regex |e"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -print grep -i -gex {} \\;printfind"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -print w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex | rev Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | tail Regex |mount"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )source ) ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sortsort | uniq -c | sort -n -rev"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexfind |"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filer Filefind"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Filen File ) < uniq -ugex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -user f -user Regexfind"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filer $( File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex%"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": "sedsed File | tr Program | od -cc-"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -max fprint |$/"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Re ps File )( -/"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -typeame Regexfind"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directorycd"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nouns nounsetS"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -find"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanfind"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexdev"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityfind"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -type p pwd \\;find"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -prune -or -name Regex -print0exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -delete rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " | aw Programn Programe Programless"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'%%or aw -n {} \\;find"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v Filedir"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": "truetrue -e erfailechoPer="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | grep Program | grep Regex | sed Program |st"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity Filesplit"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path - - -type f - xargs -I {} chmod +mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex - xargs -I {} sed -i Program {}find"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program%"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sedsed Program File |sedo |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintfind"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regexfind"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regextype pos -regex Regexfind"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec 'yf %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "echoecho Regex | rev Programn Program |z- |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityfind"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -type Regex!not -newfile Regexnot -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rem Regexbind"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File File"
    }
  ],
  "14.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex -print - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex -=="
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | grep -E -o Regex | cut -d Regex -f Numberix"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": "diffdiff -N -a -u - Filels="
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regexls"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -type Regex -notune -or -type Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 File( sort File2 -2 <( sort File2 -3 <( sort File ) )( sort File ) )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,uidid=gexls - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -namedepth Quantity -name Regex | tailfind"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filem"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regexfind"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "findfind Path -name Regex -exec grep -l Regex {} \\; | wc -lfind"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep Rei Regexc -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regexg"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -execdirzip {} \\;find"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regexfind"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -print -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"f %s %p\\n\"find %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown -R Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexfind"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex |type0 | sort -zn |find\\"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regexprint"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | head -n Quantityecho"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -df"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": "findfind Path -type f -print gzip -k {} \\; |print echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regexls"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "findfind Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -printdirv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}find"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name d - sed Program tr Regex Regex sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}find"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -o Regex File( sed -s -d Regex File File tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d$"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": "fingerfinger |l | awk Program |finger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Programdig.."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v Fileexclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq - w -f Number -d Regex sortiq -c sort |iq"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lpjobs"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": "findfind Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "findfind Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -exec \"%:: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -t Regex -k Number -n -echo"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -name Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexfind"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity -exec rm {} \\;print"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex | tee > awk Programecho"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Programawk"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -exec0exec %"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": "findfind Path! grep -v Regexfind"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanfind"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -user Regex -exec chown -gex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexfind"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": "findfind Path -type f \\( -iname Regex -perm -perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n Programyes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -o -o remount,t extX Regexgexdev= -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sortsort -n -r File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex |ls | sort -n Numbernnfind"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexfind"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )\"%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexprint"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - Filerm -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -type f -size +Size -exec ls -h - + | sort -n -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | aw -w Quantity | tr | tr -d Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": "findfind Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "findfind Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File ls Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -n Quantity -ls/"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cpcp $( Filecp"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n -cp File File= File=$=$=$"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\(find, \\( \\( \\(! -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex |find="
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityls"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": "findfind Path -mmin Timespanfind"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "findfind Path -name f -name Regex -exec sed -H-filename Rec Regex {} \\; | w |n Regex -n Number |n |r |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cdcd $( find Path -name Regex | xargs -I {} dirname {} )dir"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shshopt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name | grep Regexfind | - - -_find -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -printdirv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -i Quantity -i -i Regex {}find=="
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": "findfind Path -type f -name Regex -exec grepc -l {} +; | aw Rev -gexfind"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexfind -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "gg Path -type f -exec Regex -exec grep -l -gex {} \\; |printf dirname {} \\;)"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Fileg"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich -a Regex | xargs -I {} read {}a {}which"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -regex Regexfind"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "findfind Path -newer File -and - -newer Filefind"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "findfind -P Path -type l -exec echo -n Regex \\;exec readlink {} \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -mdepth Quantity -m Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -re Regex -re -name Regex \\) -find"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regexls -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory -"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -l Regex {}find"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File Filessh======/ -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -mind Pathnameepth Quantity -name Regex -type_faildirsrace -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v -f File Filedev"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex -type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | xfindKey="
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own -gex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regexls"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "gg Path -type Regex -exec grep -i -gex {} \\;print %"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " -gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}find"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount |l | aw Regexdf"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": "sortsort | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind - -type l -not lslink -f {} \\; | sed Rev Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind="
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regex -find -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee Filefind"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -ugex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": "findfind Path -type f -user Regexls"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex/"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": "findfind Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": "mountmount | tail - Quantity | sed Programmount"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program | od -c-/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fname0 -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )=/==="
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "findfind Path -user Regex -typeame Regexfind"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directoryx"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -type -iame Regexls"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": "findfind Path -iname Regex sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nounu nounset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type f -printfind -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": "findfind Path $( pwd ) -type f -ls %"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": "findfind Path -mtime -Timespanfind"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantityls"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -type p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print0exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "findfind Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": "findfind Path -name Regex -mtime Timespan -type f -exec '%T %% |exec aw -n {} \\;iq"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailecho== -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex sed Program | grep Regex | sed Program |st"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity Filesplit"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "findfind Path -name f -name Regex | sedargs -I {} sed -i Program {}m"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": "findfind Path | pastek Programfind"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sedsed Program Fileseds== - - aw"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - \\;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": "findfind Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": "findfind | -name Regex |exec | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regexprint"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "findfind Path -regexxtype pos -regex Regexfind"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "findfind Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -type +Size -exec 'yf %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "echoecho Regex | rev Programe Program |- | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityfind"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -type Regex!not -newfile Regexprint -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Rew Regexwho"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 File Filecomm"
    }
  ],
  "15.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regex Re -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number-"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - File"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -not Regex -notune -or -not Regex -prune -or -type f -print0 xargs -I {} grep -i -i -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 <( sort -1 -2 <( sort File1 -2 <( sort File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,uididgexls - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tail -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filefind"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tail%"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex - -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex -exec grep -i Regex {} \\; | wc -lls"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexc -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;print"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -name f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |print gunzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"% % %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type f -print"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -nn%\\ %"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | tr -n QuantityQuantity | tr -n Quantitydg"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -s="
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\; |print echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regexls -"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex aw"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - grep Program | tr Regex Regex sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep ReE Regex File( sed -s -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d%"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |finger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v -exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -f Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lpjobsor"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "catcat File | sort -k Regex -k Number -n -"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " Programf File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -exec0exec Path Path"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -not -perm -Permission \\)print"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n Program%"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -wh Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -n -o extount Ret extX Regex Regexls"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sortsort -n -k File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Numbern -nfind"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": "findfind Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityprint"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) $( hostname )"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -print -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep --gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -S - + | sort -n -rfind_"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | tr -w Quantity | tr | tr -d Regex$"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -k -k File find Path -type d | sort -n -k Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -n Quantity -ls/"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n -cp File File= File File Filetarget Filecpcpcp"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(findrop \\( \\(/ Path Path - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |ls"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityls Re - - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |print grep -with-filename Rec Regex {} \\; | w -n Regex -k Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexfind - - - -find"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec awc -l {} +; | aw -E -gex sed"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "gg Path -type f -exec Regex -exec grep -F Regex {} \\; |printf dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filestd"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich -a Regex | xargs -I {} read {}a {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -namegex Regex - - -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer File -ls"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\;exec readlink {} \\;exec"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -re -name Regex \\) -print -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex |ls - -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size - -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -r Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File=== -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " -gex | xKnownKey."
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |t | grep Regex |ls"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": "gg Path -type Regex -exec grep -i -gex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " -gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | tail Regex"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typege Regexfind - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | sed -v Re readlink -f ) )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -execfind_ {} {} {} {}"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex |ls | | Path | |"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee Re"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filer Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexls"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity sed -"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type f -exec0 | -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex Re ps File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -iname Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc -w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nu nounsetls"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type f -print -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanls -"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr - -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\; -"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexls - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -type f -mime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'%%or aw -n {} \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e nfail== -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity Filels"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {} Path"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint - - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program%"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print | wargs -I QuantityI -I {} basc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -or"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -type +Size -exec 'fs %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program |z- % | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex!not -newfile Regex -print -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Rep Regex Rewho"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File File%"
    }
  ],
  "16.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex -ls {} - - - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number1"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filels - - -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - - - - - - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -path Regex -notune -or -path Regex -printune -or -print f -print | xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 File( ls File1 -2 File( ls File ) <( sort File ) )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,uididgex - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | taills -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print {} {} - - - - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} Filels"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanls"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regexls - -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "findfind Path -name Regex -exec grep -i Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexc - -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |execdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regexls - -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find {} {} {}"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"ls %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( whoown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -zn -find\\ {} {} {}"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | head -n Quantitygex"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "dfdf -P -df"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |exec echov {} {} \\;g"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regexls - - -"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regexprint"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}ls"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name d - grep Program | tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} rm {}ls"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}find"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -o Regex File( sed -s -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d%"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Programfinger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v -verbclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " File | uniq - w -d Number -d Regex sortiq -c sortls"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lpjobs Re"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'ls"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%Name: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Number -k -gex"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex {}"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex | tee > awk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " Programf File Programlsor"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -print0exec Path - {} {} - - -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;ls"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - - - - -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -perm -perm -Permission \\)ls -"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n Programyes -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -n -o extount Ret extX Regexgexdev - - - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Number%nfind {}"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantitydir"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexls - - - -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File -ls - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep --gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -h - + | sort -h -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}ls"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | tr -w Quantity | head tr -d Regexgex|"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} \\ | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | File sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -n Quantity -ls {} {} {} {} {} {}"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityfind"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( Filels - - -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n FilecpAgent File File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printls {} - {} -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\(find \\( \\( \\( \\( \\( - - - - - - - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |ls"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprintls - -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityls Re - - - - - - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -newmin Timespan - -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep -with-filename Rec Regex {} \\; | aw -u Regex -k Numbernr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )ls"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexdev - - - - - - - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\; -"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -r -i Regex {} {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -E -gexls"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - - - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regexls"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "gg Path -type f -exec Regex -exec grep -H Regex {} \\; |printf dirname {} \\;ls"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filez"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} file {}N {}% {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex - - -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels. {} {}"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": "findfind -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;ls"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanls {}"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -re -name Regex \\) -ls - - - {} {} - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regexls - - - - -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind - - -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -r Regex {}ls"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -mind -nameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls -gex | xrootout \\ Program_//AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex |ls - -"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;printgex"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} \\ | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}ls"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -print grep grep -i -H Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount |l | aw Regex |df"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - - - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) ) Re"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -r -gex"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind {} {} {} {} {} {} {} {} {} {} {} {} {}delete"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex |ls | | - - - -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee Filels"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -ugex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regexls"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filev Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexls"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}find"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Programmount"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind {} {} -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program od -c%/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fpath$ - - -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )=/ -"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -printame Regexls"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directoryls"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -type Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nounf nounset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regexfind {} - - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type fprintls -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -ls - - {} {} - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanls -"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regexusr -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -type bas pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print -exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexls - - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -delete rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": "mountmount - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;ls"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailPerPer - - - - - - - - - -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity Filels -"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regex -printls - - - - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}ls"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program%"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File | - - - -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -exec Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |exec0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -find"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regexls"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -exec 'fs %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program2 | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex -"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityls"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -type Regex!not -newfile Regex -not -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Req Regex Rebind"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 File File"
    }
  ],
  "17.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex-"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - File"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -path Regex -notune -or -path Regex -prune -or -print f -print | xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 File( sort File2 -2 File( sort File2 -3 File( sort File ) File( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,uididgex"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailfind-"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print- - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": "findfind Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": "findfind Path -name Regex -exec grep -i Regex {} \\; | wc -lfind"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep ReE Regexc -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;print"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -name f -name Regex -mtime +Timespan -exec0 | xargs -0 -r {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex -execdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"f %s %p\\n\"lsstats"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( unown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex |type0 | sort -t -n -find%"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | head -n Quantityecho"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f - Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |print echov {} {} \\;g"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regexls"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex awls"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name f - sed Program | tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -o Regex File( sed Files -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -typeepth Quantity -maxdepth Quantity -type dfind"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Programfinger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns awk Program"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -r -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -f Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobs"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -not \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -t Regex -k Numberk"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity -exec rm {} \\;print"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0or Pathdelete"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespan -ls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -perm \\(perm -Permission \\)print"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " Rev -o remount Ret extX Regexgexdev"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r File"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex |ls | aw -t Number%nls"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity -ls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": "echoecho $( date -%%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex -ls"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h - + | sort -r -ryour"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | tr -w Quantity | tr tr -d Regexecho|"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -ls|"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -n - FileHost= File File"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\(findrop \\( \\( \\( -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |ls"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityls -- -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": "findfind Path -name f -name Regex |print grep -with-filename Rec Regex {} \\; | aw |n Regex -k Numbernr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )cd"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexfind --"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -r -i Regex {}find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -v -gex sed"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexls"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -F -gex {} \\; |exec dirname {} \\;printf"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}N {}%"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": "findfind Path -newer File -and - -newer Filels"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": "findfind Path -mdepth Quantity -m Regex -mtime +Timespanfind {}"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -re Regex -or -name Regex \\) -print"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex | -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep ReP Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -mind Quantitynameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | x%ALAB"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex |AM"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} +;print% Re"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex File {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) ) Re"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": "findfind - -type l -not lslink -f {} \\; | grep Rev Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexls"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filer File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regexls"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespan"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed -mount"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | sed Program od -cc"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fpath$ -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -printame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directorycd"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nounf nounset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type fprintfind"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespan -ls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": "findfind Path -mmin -Quantityls"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -group Regex -name Regexls -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programe Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;print"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -o erfail="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex sed Program | grep Regex sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File -"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path - -type f - xargs -I {} chmod -mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regex -printfind"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Size -printls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} +;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -ls 'hf %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program- | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityfind"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -not Regex!not -newfile Regex -print -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Req Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": "commcomm -2 -3 File File"
    }
  ],
  "18.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -ls - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Numberiq"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Fileeame"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path \\(path Regex -notune -or -path Regex -prune -or -print f -print | xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 File( ls File1 -3 File( ls File ) )( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,uidid=gexmount -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailprint"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -printprint - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": "findfind Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} Filefind"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -daytime -Timespanprint"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": "findfind Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex\\"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep ReE Regexc"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;print"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regexg"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -not Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |print gunzip {} \\;print"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexprint -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"lsasa"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex |type | | sort -nngex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": "findfind Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | head -c Quantityecho"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": "findfind Path -name Regex -or Regexprint"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f - Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -dfs"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |exec echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regexls"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex xprint"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} grep -gex {}print"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name d - grep Program | tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex |exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -E Regex File( sed -s -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type dls"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Programfinger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Programf"
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rrsync -a -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Numberd Regex sortiq -c sort |iq"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobs Re Re"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": "findfind Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Numberkcut"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity |exec rm {} \\;print"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > headk Programk"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Programdiff"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -exec0execprint \\delete"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanprint"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": "findfind Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -user Regex -exec chown Regex {} \\;print"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -perm f \\( -iname Regex -perm -perm -Permission \\)print"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;print"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yesyes Regex | n Programyes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -n -o remount Ret extX Regexgexf - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r File -k"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Number%nls"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityprint"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexprint"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": "findfind - File"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -type f -size +Size -exec ls -h - \\ | sort -r -rgex"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}print"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | tr | tr -d Regexgex|"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": "findfind Path -type f -print0 | xargs -0 -I Quantity -ls"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": "cpcp $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - Filetarget Re= Re Filecpcp"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printprint"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(name, \\( \\( \\( - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": "findfind Path -name Regex - x -n Regex |k"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprintprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": "findfind Path -inum Quantityls - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespanprint"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec sed -color-filename Rec Regex {} \\; | w |n Regex -n Number |nr |"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": "cdcd $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": "findfind Path -name | grep Regexl - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;exec"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": "findfind Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}st"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -E -gex sed"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexls"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": "findfind Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "catcat File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; |exec dirname {} \\;print"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}a {}%"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": "findfind Path -regex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\; |exec"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanls {}"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -or -name Regex \\) -print"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regexls -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizeprint"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -l Regex {}print"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File="
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File File -print -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind Pathnameepth Quantity -type Regex -type_faildirsrace -type f -deletemin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | xdevoutAL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |e | grep Regex |e"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;printg"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -exec w {} {} \\ | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}print"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) ) Re"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -g"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | sed -v Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regex -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -ugex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regexls"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -depth d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": "findfind PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanprint"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed -e"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -cc/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": "findfind Path -type fprint$"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regexprint"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": "cdcd -P Directorycd"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": "findfind Path -type f -exec chmod Permission {} \\;exec"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -typeame Regex sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nounu nounsetls"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -type Regex -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - \\"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime TimesTimespanprint"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityprint"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex -execune -or -name Regex -print -exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": "findfind Path -group Regex -name Regexprint -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programe Programe Programmount"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'%%exec aw -n {} \\;print"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v Filek"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfail(=="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex sed Program | grep Regex sed Program |st"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path -type f - xargs -I {} chmod +mission {}"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regex -print"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " Program File |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -exec Regex |exec gunzip - +;print"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print | wargs -I QuantityI -I {} wc - {} |"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regexprint"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": "findfind Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d |exec chown Regex {} \\;print"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -exec '10s %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Programe | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -m -Quantityls"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -type Regex!pr -newfile Regex -print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Req Regexwho"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File File"
    }
  ],
  "19.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -print - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regexdevababab= -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number1echoechoechoechoecho"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filee/devdiffsabs\\"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path \\(not Regex -notune -or -path Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File2 -2 <( sort File1 -3 File( sort File ) File( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,uididgex - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailfind\\ -== -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} Filem"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex - - -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex\\"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regexaaaaaa"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -m Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |printdirzip {} \\;aa"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -printfind - -"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " |print xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"printf%"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -z -n -k\\"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | head -n Quantityecho"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind% -"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex -"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -dfs=ab="
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |exec echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex - -"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x -"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - grep Program tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( sed Files -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d$"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Programv"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Programdig..........."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a --v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - sort -d Number -d Regex sortiq -c sortw |="
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobs%ab"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}%"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -printf \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Number -kcut"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint -"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity |exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex | tee > teek Programv"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program|abechoaml"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -exec0execprint\\\\\\devfind"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex - -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -perm -perm -Permission \\)print"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;/ -\\\\\\"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n Programyes -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print/ - - - - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " Ren -o extount Ret extX Regexgextmp1 - - -i"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k FilekAY"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Number%na | | |"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexls"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )%%a %x %X\" ) $( hostname )$echo"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexprint - - - {}"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " $( File%= - - - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h - + | sort -h -r%%"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | tr -w Quantity | tr | tr -s Regexecho|%"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -ls\\ {}"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File/ - -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": " -n File File//===ppcpcp FileechocpcpAAechocpcp"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printls"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(namerop \\( \\( \\( Path Path Path Path Path - - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex |print"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint - -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind- - - - -s -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep -color-filename Rec Regex {} \\; | aw |n Regex -k Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )a | | | |/"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglobverbabab"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexl | | grep - -aaa | | | | grep -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\; - -"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}n="
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | sed -E -gex sed -"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex {} {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regexechoechoa -echoaaa"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee Fileamlabcatcatcatcatcat"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l Regex {} \\; |execdirname {} \\;g"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filec/2echoechoechoechobincompcompcomp"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}N {}%| | | |aa"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regexfind - - -find - -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels...."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;echo"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanfind %"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Reaa"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -or -re Regex \\) -print - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex | -aaa"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directoryab - -"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size - - -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep -l Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r File File=ab -AA - -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File | Path Path - - -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind Pathnameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File_"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | xdevout.._AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex FileR Fileab -"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |o | grep Regex |AM |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;printstring"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -exec w {} {} \\ | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee Filetmp"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -u"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind\\\\verb\\\\ {}\\ \\ \\\\\\"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexprint - | | - -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee File/ - -a"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex% -"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File -Ad"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfinddev -findfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgexechoverbechoechoecho"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regexaba"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " Files File Regex - -"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed -e | |"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -type Regex -exec -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c-utechoab"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fpath$/ - -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )ginx=\""
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directorycd=amlamlAA -"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;exec"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}echo"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nounf nounsetsetdevabab"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex - - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint - -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - % - - - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanprint -"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusrappendappend -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print -exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexprint - - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe ProgramabaaaAD"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;print"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File(. -"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailPerA=abab==echoaaaaaab"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | sed Program | grep Regex | sed Program |p"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity Filesplita - -"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {} -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint - - - - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Programfind | -"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |soo | |abgechoechoechoAB - | |"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -exec Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Size -printfind - -"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regexprint"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d |exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec 'hs %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Programz | | | | | |echoechoab |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity%"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -not Regex!not -newfile Regex -print -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rep Regexbindab"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File Filecommcomm grep"
    }
  ],
  "20.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -print - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filee - -- -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path -type Regex -notune -or -type Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 File( sort File1 -3 File( ls File ) )( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,uididgex - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailprint -- -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;print"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec | | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |execdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( unconfig )if"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"printf %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprint"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( lsown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -znfind"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | cut -n QuantityQuantity | cut -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regex"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\;print echov {} File \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount - grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": " Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep -gex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - grep Program tr Regex Regex sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |exec0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( sed Files -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Programcut"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program..."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -a -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lpjobs"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;print"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%Name: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Numberk"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity |exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > teek Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0exec Path"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f - -iname Regex -perm -perm -Permission \\)print"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n Programyes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount Ren -o extount Ret extX Regexgexprint -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -r File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n NumberQuantitynfind"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexprint"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )\"%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h - + | sort -r -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | cut cut -d Regexecho"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -type f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -ls"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - FileKey= Re/cpcp"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(findrop \\( \\( \\( Path - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |print"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind- - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -newmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec echo -with-filename Rec Regex {} \\; | w |n Regex -n Numbernr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regex -//"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": " Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\; -"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {} find"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | grep -E -gex cut"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "catcat File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -name Regex -exec grep -l Regex {} \\; |printf dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}N {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer File"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -name Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -or -name Regex \\)print -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rer Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p Filer File File"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls Regex | xdevout"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown Regex FileR File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |e | grep Regex |printf"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -print f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -print0 xargs -I {} grep Regex File {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | tail Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regexfind - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " Path -type l -not lslink -f {} \\; | grep Rev Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex -"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echoecho $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanprint"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity sed Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fprint$ -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directorycd"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex | sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nounf nounset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type fprint"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanprint"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityprint"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexprint -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;print"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfail="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex sed Program | grep Regex sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path -type f - xargs -I {} chmod +mission {} -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |sed -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -exec Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print | wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d |exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec'ss %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex -"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex!not -newfile Regex -not -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Ree Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File Filecomm"
    }
  ],
  "21.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -name f -name Regex -ls - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": "readread -r -p Regex Regex - - - -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": "echoecho Regex | grep -E -o Regex | cut -d Regex -f Numberiq -"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filee - - - - -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - - - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -type Regex |notune -or -type Regex -printune -or -type f -print | xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": "commcomm -1 -2 File( sort File1 -2 <( sort File1 -3 File( sort File ) )( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": "mountmount -gex -o remount,roidgex - - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tailfind - - - - -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": "findfind Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex - - - -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "ccrontab -l | grep ReE Regex -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": "gg $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -r {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |execdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": "ifif $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regex - - -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -print -printfind -"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"f %s %p\\n\"printfasa"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regexfind"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": "findfind Path -name Regex |type0 | sort -z -nfind"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind -"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": "dfdf -P -s"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -print gzip -k {} \\; |exec echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regex - -"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": "findfind Path -user Regex xfind"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": "findfind Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name d - grep Program | tr Regex Regex | x Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": "findfind Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( tr -s -d Filegex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk - | sort"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program..."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "rrsync -n -v --exclude Regex Fileincludeclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobsKey"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;archive"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": "findfind Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}find"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -printf \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0find"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": "sortsort File | sort -k Regex -k Number -k -cut"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": "findfind Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex - -"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": "findfind Path -inum Quantity |exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": "findfind Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex | tee > headk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": "awkawk -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": "findfind Path -type f -print0exec \\"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path! grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -user Regex -exec chown -gex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex - - - -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -not!perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\; -"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": "yesyes Regex | n -yes -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": "findfind Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -n -o remount Ret extX Regexgextmp - - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": "findfind Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": "sortsort -n -k File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": "findfind Path -name f -name Regex |ls | sort -n NumberQuantityn -"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantity"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date )\"%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex - - - {} {}"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " $( File - - - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep -gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -S - \\ | sort -r -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -L Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | tr | tr -d Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": "findfind Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -find"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File - -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - Filerop Reobandcpcpcpcpcp"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": "findfind Path -mtime Timespan -name Regex -printfind -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\(namerop \\( \\( \\( - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |find"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprintfind - -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind- - - - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -newmin Timespan - -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |print grep -with-filename Rec Regex {} \\; | aw |n Regex -n Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "shshopt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexln | | - - - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\; -"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex | xargs -I {} grep -m Quantity -i -i Regex {}c -"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | grep -E -gex cut"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex - - - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": "whichwhich Regex - -"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": "catcat File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": "gg Path -type f -name Regex -exec grep -l -gex {} \\; |printf dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filec"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich -a Regex | xargs -I {} read {}N {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex - - - -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filefind...."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanfind {} {}"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "susu"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": "findfind Path - -re Regex -or -name Regex \\) -print - - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex - -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind - -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": "findfind Path -name Regex - xargs -I {} grep -l Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File - - -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "mmv File File - -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": "findfind Path - -mind -nameepth Quantity -name Regex -type-faildirsrace -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": "lsls -gex | xdevout..AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "chchown Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": "mountmount |e | grep Regex | - -"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} \\;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} \\ | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( rev Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex {} {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": "findfind Path -type f -print grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": "mountmount |l | aw Regex | - -"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - - - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -n -gex"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re findlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind\\ {} {} {} {} \\ \\"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexime / -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -r Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -ugex"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex -"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": "findfind Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mmv Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": "echoecho $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": "readread -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Program"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexfind - -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -name Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fname$ - -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": "killkill - Regex $( which File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -printame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -typeame Regex | sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nu nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex - - - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type fprintfind -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f -gex \\ - - - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespan -find"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex - -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regexusr -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls -"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "findfind Path -name Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": "findfind Path -name Regex |execune -or -name Regex -print |exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind - - - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": "findfind Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v File-"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e nfailPerPer= -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "ppstree -p Regex | sed Program | grep Regex | sed Program |k"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": "splitsplit -n Quantity File -"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path -type f - xargs -I {} chmod +mission {} -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": "findfind Path -group Regex -printfind - - - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": "findfind Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": "sedsed - File |sedo - - aw - - -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls -"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc - {}"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": "findfind Path -type d |exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "chchown $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -exec'ss %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": "echoecho Regex | rev Programe Program |z | | | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -name d -name Regex -atime -Timespan -user Regex -"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantityfind"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -type Regex!not -newfile Regex -print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": "bindbind Rew Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File Filecomm"
    }
  ],
  "22.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": "findfind Path -path Regex -prune -or -type f -name Regex -print - - - - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex - -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filee - - - - -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - - - - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path \\(not Regex -notune -or -not Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 File( sort File1 -3 File( sort File ) File( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,roidgex - - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -typedepth Quantity -name Regex | tail= - -"
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanfind"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tailfind"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex - - -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regex -"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": "findfind Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": "findfind Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regex - - - - -"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": "findfind Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": "findfind Path -type f -printf \"f %s %p\\n\"% % %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -z -zgex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": "findfind Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": "lnln -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\;exec echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": "mountmount | grep Regex -"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": "findfind Path -name d - tr Program tr Regex Regex | sed Programfind"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( sed -s -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |finger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program.."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobsPanel"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -not \"%%: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Number -k"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint - -"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity |exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": "echoecho Regex Regex | tee > headk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0exec -"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexdev"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex - -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -not!perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\; -"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -yes -"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -n -o remount Ret extX Regexgextmp - - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -t NumberQuantityn"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date -%%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": "findfind Path -name Regex - -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " $( File -rm - - - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": "lsls -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": "findfind Path -type f -size +Size -exec ls -S - + | sort -r -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | tr tr -d Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -ls"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - FileAgent Re= Re Re Re Re Filecpcp"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -printfind -"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": "findfind Path -type f \\(findrop \\( \\( \\( Path - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex |k"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint -"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind= - - - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -newmin Timespan -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |execdir -with-filename Rec Regex {} \\; | aw |n Regex -n Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regex1 | - - - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\; -"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex | xargs -I {} grep -m Quantity -i -i Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -E -gex sed"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexls - - - -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex | xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex -"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; |exec dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filez"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich -a Regex | xargs -I {} read {}v {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanfind"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": "susu Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -or -re Regex \\)print - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex - -"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Size - -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rel Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File= -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File - - -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type-faildirsrace -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " Regex | xdevout.=AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |e | grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} +;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex File {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " |l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - - - - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": "findfind Path -name f -name Regexor -"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex%"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -type d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "mmv Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": "lnln -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Programe"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint - - -"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": "findfind Path -type Regex -perm -perm PerPermission - xargs -I {} rm {}r -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c/ |"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fname$ -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( p File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": "findfind Path -user Regex -iname Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directory="
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": "findfind Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex | sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "shshopt -s nu nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": "findfind Path -name Regex -type f -printless -"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - - - - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": "findfind Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print0exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'%%exec aw -n {} \\;k"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "bbzip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailx== -"
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {} - -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regex -print - - - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |sedo | | - -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintprint"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc - {}"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": "findfind Path -size +Size -exec'ss %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program2 | | | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": "findfind Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -name Regex!not -newfile Regex -not -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rem Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File Filecomm"
    }
  ],
  "23.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -print - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex -"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number$"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filea - - - - -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path \\(path Regex -notune -or -path Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 <( sort File1 -3 File( ls File ) File( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,roidgex - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -namedepth Quantity -name Regex | tail=="
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f |exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tail%"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -printfind"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"%%"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | x -zngex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\;exec echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - sed Program | tr Regex Regex | sed Programk"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( sed Files -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |finger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program.."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -f Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobsroup"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%Name: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Numberk"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex%"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > headk Programk"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0execdelete %"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regexfind"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -%"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": " Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -perm -perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\; -"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": " -n -o remount Ret extX Regexgextmp - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -t Number%n%"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date -\"%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -% -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File -rmrm - - -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": " -l -- grep -gexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -exec ls -S - + | sort -r -r%"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | tr tr -d Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -I Quantity -% {}"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File -"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - FileHost Re= Re"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(findrop \\( \\( \\( Path - -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex |k"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind= - - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -mmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep -with-filename Rec Regex {} \\; | aw -n Regex -n Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regex$ - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}c="
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -E -gex sed"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; |exec dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filez"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": " -a Regex | xargs -I {} read {}N {}%"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex -"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels.."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanls"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -re -re Regex \\) -print -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rel Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r File File== -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "v -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} cat {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " -gex | xtestout..=AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |e | grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} +;print%"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex File {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | tail Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - - - - - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": " $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": " Path -atime +Timespan -execfind\\"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexor /"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex%"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -depth d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Programe"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex%"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -type Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -cuts/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fname$ -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )=="
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -nameame Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directory=="
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex | sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s ns nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex - -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintres"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print -exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec \"%T:'% |exec aw -n {} \\;k"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File-"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailx==="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | sed Program | grep Regex sed Program |k"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path -type f - xargs -I {} chmod +mission {} - -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regex -print% - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |s=o=== - -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec 'hs %p\\p\\%f\" |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Programgex | | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name d -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity%"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": " Path -name Regex!not -newfile Regex -print -newer File -"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rem Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File Filecomm"
    }
  ],
  "24.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -print - - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filee - -"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": "findfind Path -path Regex -notune -or -path Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 <( sort File1 -3 File( sort File ) <( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,roidgex - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -typedepth Quantity -type Regex | tail=="
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -type f -mtime -Timespanls"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -type f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm {}f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -type f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"% %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | x -zngex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\; |exec echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - sed Program | tr Regex Regex | sed Programgex"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}ch"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( sed Files -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |finger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program.."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobsroup"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -printf \"%Name: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Number -n"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > headk Programk"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0exec \\"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -perm -perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\; -"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -v -o remount Ret extX Regexgexgex - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n NumberQuantityn"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regex"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date -\"%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -print -"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " - File -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": " -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h - + | sort -r -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | tr tr -d Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | File sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -n Quantity -ls"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin QuantityQuantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - FileHost Re= Re Re"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(findrop \\( \\( \\( -"
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -v Regex |"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind= - -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -newmin Timespan -"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep -with-filename Rec Regex {} \\; | aw |n Regex -n Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regex1 - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -E -gex cut"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; |printf dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filez"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich -a Regex | xargs -I {} read {}v {}k"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels."
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;find"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanls"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": " Re"
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -re -re Regex \\) -print - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -l Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rel Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "p -r File File= -"
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -max -nameepth Quantity -type Regex -type_faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " -gex | xtestout.AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |e | grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} +;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex File {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind\\"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexor |"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filer File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex%"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -depth d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Programe"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -type Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -max fprint$ -"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )="
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -iname Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directory="
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -type -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -typeame Regex | sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}w"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s nu nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type f -printres"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr -"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -max Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print -exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;k"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailx==="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | sed Program | grep Regex | sed Program |k"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path -type f - xargs -I {} chmod +mission {} -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regex -print - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |s | - -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec'ss %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Programgex | | | | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -name Regex!not -newfile Regex -print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Req Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File File"
    }
  ],
  "25.0": [
    {
      "source": "display all the html files in the current folder excluding search in the path ./foo",
      "target": "find Path -path Regex -prune -or -type f -name Regex",
      "prediction": " Path -path Regex -prune -or -name f -name Regex -print - - - - - - - -"
    },
    {
      "source": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"",
      "target": "read -r -p Regex Regex",
      "prediction": " -r -p Regex Regex"
    },
    {
      "source": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.",
      "target": "echo Regex | grep -E -o Regex | cut -d Regex -f Number",
      "prediction": " Regex | grep -E -o Regex | cut -d Regex -f Number"
    },
    {
      "source": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text",
      "target": "diff -N -a -r File File",
      "prediction": " -N -a -u - Filee"
    },
    {
      "source": "display all symbolic links in current folder",
      "target": "find Path -lname Regex",
      "prediction": " Path -typename Regex - - -"
    },
    {
      "source": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin",
      "target": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
      "prediction": " Path \\(path Regex -notune -or -path Regex -prune -or -print f -print0 xargs -I {} grep -i -l -l Regex {}"
    },
    {
      "source": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"",
      "target": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
      "prediction": " -1 -2 File( sort File1 -2 <( sort File1 -3 File( sort File ) )( sort File )( sort File )( sort File )"
    },
    {
      "source": "Remount \"/home/evgeny\" with the \"suid\" flag set",
      "target": "mount Regex -o remount,suid Regex",
      "prediction": " -gex -o remount,roid=gex - - - - - -"
    },
    {
      "source": "Show the last 10 .conf files found by `find' in the /etc directory",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -typedepth Quantity -name Regex | tail=="
    },
    {
      "source": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - - - - - - - - -"
    },
    {
      "source": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3",
      "target": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
      "prediction": " Path -iname Regex -type f -exec0 | xargs -0 -I {} mv {} File"
    },
    {
      "source": "find all files in the home folder which are modified in the last 2 days.",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespan"
    },
    {
      "source": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end",
      "target": "find Path -maxdepth Quantity -name Regex | tail",
      "prediction": " Path -maxdepth Quantity -name Regex | tail"
    },
    {
      "source": "Find all files owned by the user daniel in the current directory and below.",
      "target": "find Path -user Regex",
      "prediction": " Path -user Regex -"
    },
    {
      "source": "count all the html files having a specifc word in a folder.",
      "target": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
      "prediction": " Path -name Regex |exec grep -l Regex {} \\; | wc -lgex"
    },
    {
      "source": "List all cron jobs which contain \"word\".",
      "target": "crontab -l | grep -E Regex",
      "prediction": "rontab -l | grep ReE Regex"
    },
    {
      "source": "long list al the files in the current directory which have read permission to the group",
      "target": "find Path -perm -Permission -type f -exec ls -l {} \\;",
      "prediction": " Path -perm PerPermission -type f -exec ls -l {} \\;"
    },
    {
      "source": "Display all lines containing \"IP_MROUTE\" in the current kernel's compile-time config file.",
      "target": "cat $( uname -r ) | grep Regex",
      "prediction": " $( uname -r ) | grep Regex"
    },
    {
      "source": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree",
      "target": "find Path -type f -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm -f {}",
      "prediction": " Path -name f -name Regex -mtime +Timespan -exec0 | xargs -0 -I {} rm -f {}"
    },
    {
      "source": "Unzip every \".gz\" file in the current directory tree",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |printdirzip {} \\;"
    },
    {
      "source": "change permission of all the files in the entire file system which have the permissions 777.",
      "target": "find Path -type f -perm Permission -print -exec chmod Permission {} \\;",
      "prediction": " Path -type f -perm Permission -print -exec chmod Permission {} \\;"
    },
    {
      "source": "Prints information about active network interfaces in system.",
      "target": "echo $( ifconfig )",
      "prediction": " $( unconfig )"
    },
    {
      "source": "find all the reguar/normal php files in current directory.",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regex"
    },
    {
      "source": "search  in root  ( / ) directory downwards all files which have less than 2 links.",
      "target": "find Path -links -Quantity -print",
      "prediction": " Path -links -print -print"
    },
    {
      "source": "Find all files/directories under current directory",
      "target": "find Path -print0 | xargs -0",
      "prediction": " Pathprint xargs -0find"
    },
    {
      "source": "display all regular/normal files in the folder \"dir\" and display the filename along with file size",
      "target": "find Path -type f -printf \"f %s %p\\n\"",
      "prediction": " Path -type f -printf \"f %s %p\\n\"% %"
    },
    {
      "source": "find regular file named foo.txt under root / directory.",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type fprintfind"
    },
    {
      "source": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"",
      "target": "$( chown -R Regex File )",
      "prediction": "( chown ReR Regex File )"
    },
    {
      "source": "find all files  that names are 'apt'",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Print a sorted list of *.so files in the bla directory tree",
      "target": "find Path -name Regex -print0 | sort -r -z",
      "prediction": " Path -name Regex |type0 | sort -zngex"
    },
    {
      "source": "Find all .core files on the system starting from / and delete them",
      "target": "find Path -name Regex | xargs -I {} rm {}",
      "prediction": " Path -name Regex - xargs -I {} rm {}"
    },
    {
      "source": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex"
    },
    {
      "source": "Print characters 2 through 4 of \"abcdefg\"",
      "target": "echo Regex | tail -c +Quantity | head -c Quantity",
      "prediction": " Regex | fold -n QuantityQuantity | tr -n Quantity"
    },
    {
      "source": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"",
      "target": "find Path -name Regex -name Regex",
      "prediction": " Path -name Regex -or Regexfind"
    },
    {
      "source": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regex"
    },
    {
      "source": "Report file systems disk usage using POSIX output format.",
      "target": "df -P",
      "prediction": " -P -"
    },
    {
      "source": "Compress every file in the current directory tree with gzip and keep file extensions the same",
      "target": "find Path -type f -exec gzip -9 {} \\; -exec mv File {} \\;",
      "prediction": " Path -type f -exec gzip -k {} \\; |exec echov {} {} \\;"
    },
    {
      "source": "Find all *.csv files under /foo/bar and move them to some_dir",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Check if a drive is mounted to nfs",
      "target": "mount | grep Regex",
      "prediction": " | grep Regex"
    },
    {
      "source": "display all the files in the folder \"/dev\" which belong to the user \"peter\"",
      "target": "find Path -user Regex | more",
      "prediction": " Path -user Regex x"
    },
    {
      "source": "Move all directories from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -type d -exec mv -t Directory {} +",
      "prediction": "findfind Path -mindepth Quantity -type d -print mv --t Directory {} +"
    },
    {
      "source": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} grep Regex {}",
      "prediction": " Path -name Regex -exec0 | xargs -0 -I {} grep Regex {}"
    },
    {
      "source": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them",
      "target": "find Path -type d | sed Program | tr Regex Regex | sed Program",
      "prediction": " Path -name d - sed Program | tr Regex Regex | sed Programgex"
    },
    {
      "source": "Remove all *.tmp files from the /tmp directory tree",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
      "prediction": " Path -name Regex |print0 | xargs -0 -I {} rm {}"
    },
    {
      "source": "Find all regular files under $d directory tree and change their permissions to 777",
      "target": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
      "prediction": " Path -type f -exec0 | xargs -0 -I {} chmod Permission {}"
    },
    {
      "source": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted",
      "target": "grep -o Regex <( paste -s -d Regex File ) | tr -d Regex",
      "prediction": "rep -e Regex File( sed Files -d Regex File ) tr -d Regex"
    },
    {
      "source": "Find all directories under ${1:-.} directory without descending into any sub-directories",
      "target": "find Path -mindepth Quantity -maxdepth Quantity -type d",
      "prediction": " Path -maxepth Quantity -maxdepth Quantity -type d"
    },
    {
      "source": "Print only name and login columns of the currently logged in users",
      "target": "finger -s | awk Program",
      "prediction": " |l | awk Program |finger"
    },
    {
      "source": "Prints all NS servers of domain google.com.",
      "target": "dig Regex Regex | awk Program",
      "prediction": " Regex Regex ns grepk Program.."
    },
    {
      "source": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"",
      "target": "rsync -a -v --exclude Regex --exclude Regex File File",
      "prediction": "sync -n -v --exclude Regex Fileexclude Regex File File"
    },
    {
      "source": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.",
      "target": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
      "prediction": " | | uniq - w -d Number -d Regex sortiq -c sortw"
    },
    {
      "source": "list PID of a group leader",
      "target": "jobs -l -p",
      "prediction": " -lp |jobsroup"
    },
    {
      "source": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found",
      "target": "find Path -iname Regex -exec tar -r -v -f File {} \\;",
      "prediction": " Path -iname Regex -exec tar -c -v -f File {} \\;"
    },
    {
      "source": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy",
      "target": "find Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}",
      "prediction": " Path -name Regex | xargs -I {} cp -a --target-directory Directory --parents {}"
    },
    {
      "source": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories",
      "target": "find Path -name Regex -printf '%h\\n'",
      "prediction": " Path -name Regex -exec \"%%h\\n'"
    },
    {
      "source": "Display non-hidden files in the current directory with the given output format",
      "target": "find Path -maxdepth Quantity -name Regex -printf 'Name: %16f Size: %6s\\n'",
      "prediction": " Path -namedepth Quantity -name Regex -exec \"%Name: %16f Size: %6s\\n'"
    },
    {
      "source": "Find all files/directories under current directory with null character as the delimiter",
      "target": "find Path -print0",
      "prediction": " Path -print0"
    },
    {
      "source": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.",
      "target": "cat File | sort -t Regex -k Number -n",
      "prediction": " File | sort -k Regex -k Number -n"
    },
    {
      "source": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory",
      "target": "find Path -path Regex -prune -or -name Regex -print",
      "prediction": " Path -path Regex -prune -or -name Regex -printfind"
    },
    {
      "source": "Find all .java files starting from the current folder",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Remove the file with inode number 752010",
      "target": "find Path -inum Quantity -exec rm {} \\;",
      "prediction": " Path -inum Quantity -exec rm {} \\;"
    },
    {
      "source": "Find all files/directories named 'Desktop' under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"",
      "target": "find Path -iname Regex -exec rm -r -f {} \\;",
      "prediction": " Path -iname Regex -print rm -r -f {} \\;"
    },
    {
      "source": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields",
      "target": "echo Regex Regex | tee File | awk Program",
      "prediction": " Regex Regex | tee > headk Program"
    },
    {
      "source": "Filter contents of 'file' through awk commands written in script.awk, display the result.",
      "target": "awk -f File Program",
      "prediction": " -f File Program"
    },
    {
      "source": "delete all the normal/regular files in the current folder",
      "target": "find Path -type f -print -delete",
      "prediction": " Path -type f -delete0exec \\"
    },
    {
      "source": "Search the current directory tree for all files except SVN ones",
      "target": "find Path | grep -v Regex",
      "prediction": " Path - grep -v Regex"
    },
    {
      "source": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago",
      "target": "find Path -mtime +Timespan",
      "prediction": " Path -ctime +Timespanls"
    },
    {
      "source": "Find all files/directories that are not newer than Jul 01 by modification time",
      "target": "find Path ! -newermt Regex",
      "prediction": " Path! -newermt Regex"
    },
    {
      "source": "Find all *.txt files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Change the ownership of all files in the current directory tree from root to www-data",
      "target": "find Path -user Regex -exec chown Regex {} \\;",
      "prediction": "findfind Path -user Regex -exec chown Regex {} \\;"
    },
    {
      "source": "Find all files/directories named 'query' under current directory tree",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "search for text files in the current folder which have write access to others",
      "target": "find Path -type f \\( -iname Regex -and -perm -Permission \\)",
      "prediction": " Path -type f \\( -iname Regex -perm -perm -Permission \\)find"
    },
    {
      "source": "Change every file under \"/var/www/html/\" to have permissions 664",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\; -"
    },
    {
      "source": "Infinitely print \"1\" then \"0\"",
      "target": "yes Regex | sed Program",
      "prediction": " Regex | n -yes"
    },
    {
      "source": "List the current directory recursively ignoring ./src/emacs/ and all its contents",
      "target": "find Path -path Regex -prune -or -print",
      "prediction": " Path -path Regex -prune -or -print - -"
    },
    {
      "source": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"",
      "target": "mount -n -o remount -t extX Regex Regex",
      "prediction": "mountmount -n -o remount Ret extX Regexgextmp - -"
    },
    {
      "source": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)",
      "target": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -n Quantity -P Quantity -I {} bzip2 {}",
      "prediction": " Path -name Regex -mtime +Timespan -print0 | xargs -0 -P Quantity -P Quantity -I {} bzip2 {}"
    },
    {
      "source": "Numerically sort standard input by the second word of each line",
      "target": "sort -n -k Number",
      "prediction": " -n -k File -"
    },
    {
      "source": "display a long listing of all the java files in the current folder in sorted order",
      "target": "find Path -type f -name Regex -ls | sort -k +Number -r",
      "prediction": " Path -name f -name Regex |ls | sort -n Numbernn"
    },
    {
      "source": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree",
      "target": "find Path -type f -iname Regex",
      "prediction": " Path -type f -iname Regexfind"
    },
    {
      "source": "Find all files under and below /dir that were changed or created less than 60 minutes ago",
      "target": "find Path -cmin -Quantity",
      "prediction": " Path -cmin -Quantityls"
    },
    {
      "source": "Print the date formatted with \"%a %x %X\" followed by the host name",
      "target": "echo $( date +\"%a %x %X\" ) $( hostname )",
      "prediction": " $( date -\"%a %x %X\" ) $( hostname )$"
    },
    {
      "source": "Print the list of files in the home directory tree whose names begin with \"Foto\"",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -print"
    },
    {
      "source": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.",
      "target": "rm File File",
      "prediction": " $( File -"
    },
    {
      "source": "Filters only directories from long file listing of the current directory.",
      "target": "ls -l | grep Regex",
      "prediction": " -l -- grep Regexls"
    },
    {
      "source": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes",
      "target": "find Path -type f -size +Size -exec du -h {} + | sort -h -r",
      "prediction": " Path -type f -size +Size -print ls -h - + | sort -r -rfind"
    },
    {
      "source": "Prints line count of each file within current directory.",
      "target": "find Path -type f -print | xargs -L Quantity -I {} wc -l {}",
      "prediction": " Path -type f -print0 xargs -I Quantity -I {} wc -l {}"
    },
    {
      "source": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'",
      "target": "echo Regex | fold -w Quantity | tac | tr -d Regex",
      "prediction": " Regex | cut -w Quantity | tr tr -d Regexgex"
    },
    {
      "source": "Find the largest files in a particular location",
      "target": "find Path -type f -exec du -S -h {} + | sort -r -h | head -n Quantity",
      "prediction": " Path -type f -printf du -S -h {} + | sort -r -h | head -n Quantity"
    },
    {
      "source": "List all regular files from the current directory tree that were modified less than 60 minutes ago",
      "target": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
      "prediction": " Path -m f -mmin -Quantity |exec0 | xargs -r -0 -I {} ls -l {}"
    },
    {
      "source": "Show directory sizes in KB and sort to give the largest at the end",
      "target": "du -s -k $( find Path -type d ) | sort -n -k Number",
      "prediction": " -s -k File find Path -type d | | sort -n -r Number"
    },
    {
      "source": "List all regular files under current directory ensuring white space safety",
      "target": "find Path -type f -print0 | xargs -0 -n Quantity",
      "prediction": " Path -type f -print0 | xargs -0 -n Quantity -ls"
    },
    {
      "source": "find all the files in current folder which have been updated in the last 60 minutes",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.",
      "target": "cp File File",
      "prediction": " $( File"
    },
    {
      "source": "Copies defined file to the target folder without overwriting existing files.",
      "target": "cp -n",
      "prediction": "cpcp -n - FileHost Re= Re"
    },
    {
      "source": "display all the html files in the current folder that have been modified exactly 7*24 hours ago",
      "target": "find Path -mtime Timespan -name Regex -print",
      "prediction": " Path -mtime Timespan -name Regex -print"
    },
    {
      "source": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/",
      "target": "find Path -type f",
      "prediction": " Path -type f \\(find, \\( \\( \\("
    },
    {
      "source": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers",
      "target": "find Path -name Regex | grep -n Regex",
      "prediction": " Path -name Regex - x -n Regex |"
    },
    {
      "source": "display all the files in the file system which belong to the group lighttpd",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regexprint"
    },
    {
      "source": "Search directory lpi104-6 for files with inode number 1988884",
      "target": "find Path -inum Quantity",
      "prediction": " Path -inum Quantityfind -"
    },
    {
      "source": "Find files/directories under current directory that are modified exactly one hour ago",
      "target": "find Path -mtime Timespan",
      "prediction": " Path -newmin Timespan"
    },
    {
      "source": "Get the number of \"use\" statements in all PHP files, ordered",
      "target": "find Path -type f -name Regex -exec grep --with-filename -c Regex {} \\; | sort -t Regex -k Number -n -r",
      "prediction": " Path -name f -name Regex |exec grep -with-filename Rec Regex {} \\; | aw |n Regex -n Number |nr"
    },
    {
      "source": "Finds file 'Subscription.java' and changes to containing folder.",
      "target": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
      "prediction": " $( find Path -name Regex | xargs -I {} dirname {} )"
    },
    {
      "source": "Enables 'nullglob' shell option.",
      "target": "shopt -s nullglob",
      "prediction": "opt -s execglob"
    },
    {
      "source": "Find all .java files whose name contains \"Message\"",
      "target": "find Path -print | grep Regex",
      "prediction": " Path -name | grep Regexln - -"
    },
    {
      "source": "Move all files from the `sourceDir' directory tree to the `destDir' directory",
      "target": "find Path -mindepth Quantity -exec mv {} --target-directory Directory \\;",
      "prediction": "findfind Path -mindepth Quantity -print mv -- Filetarget-directory Directory \\;"
    },
    {
      "source": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches",
      "target": "find Path -name Regex | xargs -I {} grep -m Quantity -r -i Regex {}",
      "prediction": " Path -type Regex - xargs -I {} grep -m Quantity -i -i Regex {}"
    },
    {
      "source": "Find all PHP files under current directory that contain only one line",
      "target": "find Path -type f -name Regex -exec wc -l {} \\; | grep -E Regex",
      "prediction": " Path -type f -name Regex -exec grepc -l {} +; | aw -E -gex cut"
    },
    {
      "source": "list all *.txt files in the user's home directory.",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex -"
    },
    {
      "source": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree",
      "target": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
      "prediction": " Path -name f -name Regex - xargs -null Regex -I {} sed -in-place Regex Program {}"
    },
    {
      "source": "Print the full path of command \"cc\"",
      "target": "which Regex",
      "prediction": " Regex"
    },
    {
      "source": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user",
      "target": "cat File | tee File",
      "prediction": " File | tee File"
    },
    {
      "source": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.",
      "target": "find Path -type f -name Regex -exec grep -q Regex {} \\; -exec dirname {} \\;",
      "prediction": " Path -type f -exec Regex -exec grep -l -gex {} \\; |exec dirname {} \\;"
    },
    {
      "source": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout",
      "target": "bzip2 File | tee -a File",
      "prediction": "zip2 - | tee -a Filez"
    },
    {
      "source": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.",
      "target": "which -a Regex | xargs -I {} file -L {}",
      "prediction": "whichwhich -a Regex | xargs -I {} read {}N {}"
    },
    {
      "source": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character",
      "target": "find Path -regex Regex",
      "prediction": " Path -regex Regex"
    },
    {
      "source": "Find files newer than start.txt but not newer than end.txt",
      "target": "find Path -newer File -and ! -newer File",
      "prediction": " Path -newer File -and - -newer Filels"
    },
    {
      "source": "Display all symlinks and their targets in the current directory tree",
      "target": "find -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;",
      "prediction": " -P Path -type l -exec echo -n Regex \\; -exec readlink {} \\;"
    },
    {
      "source": "Find all the *.txt files in the current directory older than 48 hours",
      "target": "find Path -maxdepth Quantity -name Regex -mtime +Timespan",
      "prediction": " Path -mdepth Quantity -m Regex -mtime +Timespanls"
    },
    {
      "source": "get the root user access",
      "target": "su",
      "prediction": ""
    },
    {
      "source": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits",
      "target": "find Path \\( -name Regex -or -name Regex \\)",
      "prediction": " Path - -re Regex -re -re Regex \\) -print - -"
    },
    {
      "source": "List the files in \"archive.tar.gz\"",
      "target": "gzip -l Regex",
      "prediction": "zip -d Regex"
    },
    {
      "source": "Create directorie(s) 'some/path' as required in the current directory",
      "target": "mkdir -p Directory",
      "prediction": "dir -p Directory"
    },
    {
      "source": "find all the files in the folder /home which are exactly of size 10MB",
      "target": "find Path -size Size",
      "prediction": " Path -size Sizefind -"
    },
    {
      "source": "find all the perl files in the current folder and search for a pattern",
      "target": "find Path -name Regex | xargs -I {} grep -L Regex {}",
      "prediction": " Path -name Regex - xargs -I {} grep Rel Regex {}"
    },
    {
      "source": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.",
      "target": "scp -r File File",
      "prediction": "scscp -r File File="
    },
    {
      "source": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"",
      "target": "mv File File",
      "prediction": "v File File -"
    },
    {
      "source": "Find all files/directories with 'my key phrase' in their names under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree",
      "target": "find Path Path -depth -mindepth Quantity -name Regex -ignore_readdir_race -type f -cmin Quantity -delete",
      "prediction": " Path - -mind -nameepth Quantity -type Regex -type-faildir_race -type f -mmin + -delete"
    },
    {
      "source": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"",
      "target": "mv -f File File",
      "prediction": "mmv -f File File"
    },
    {
      "source": "Count all the lines of all '*.c' files in current directory recursively",
      "target": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
      "prediction": " Path -name Regex |type0 | xargs -0 -I {} w {} | wc -l"
    },
    {
      "source": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.",
      "target": "echo Regex | bash",
      "prediction": " -gex | xtestout.AL"
    },
    {
      "source": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"",
      "target": "chown Regex -R File",
      "prediction": "own Regex -R File"
    },
    {
      "source": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"",
      "target": "mount -l | grep Regex",
      "prediction": " |e | grep Regex |"
    },
    {
      "source": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.",
      "target": "find Path -name Regex -exec grep -i Regex {} \\; -print",
      "prediction": " Path -type Regex -exec grep -i -gex {} +;print"
    },
    {
      "source": "Prints total count of lines of all *.php files in a current folder and subfolders.",
      "target": "find Path -name Regex -type f -exec cat -- {} + | wc -l",
      "prediction": " Path -name Regex -exec f -exec w {} {} + | wc -lfind"
    },
    {
      "source": "Print the current directory name without full path",
      "target": "echo Regex | sed Program",
      "prediction": " $(gex $( aw Program"
    },
    {
      "source": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"",
      "target": "find Path -name Regex -print | xargs -I {} grep Regex File {}",
      "prediction": " Path -name Regex -exec0 xargs -I {} grep Regex File {}"
    },
    {
      "source": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles",
      "target": "find Path -type f -execdir grep -i -H Regex {} \\; | tee File",
      "prediction": " Path -type f -print grep grep -i -l Regex {} \\; | tee File"
    },
    {
      "source": "Print information of the root mount point",
      "target": "mount -v | grep Regex",
      "prediction": " -l | aw Regex |"
    },
    {
      "source": "Search /path/to/your/directory for *.avi and *.flv files",
      "target": "find Path -regex Regex",
      "prediction": " Path -typegex Regexfind - -"
    },
    {
      "source": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.",
      "target": "source $( dirname $( which Regex ) )",
      "prediction": "sourcesource $( dirname $( which Regex ) )"
    },
    {
      "source": "Print a count of each unique line from standard input sorted from least frequent to most frequent",
      "target": "sort | uniq -c | sort -n",
      "prediction": " | uniq -c | sort -r -"
    },
    {
      "source": "search for soft links in current folder and display those links which are not pointed to files in current folder",
      "target": "find Path -type l -exec readlink -f {} \\; | grep -v $( readlink -f File )",
      "prediction": " - -type l -not lslink -f {} \\; | grep -v Re readlink -f File )"
    },
    {
      "source": "Remove files from the home directory tree that were last accessed more than 100 days ago",
      "target": "find Path -atime +Timespan -delete",
      "prediction": "findfind Path -atime +Timespan -execfind"
    },
    {
      "source": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory",
      "target": "find Path -type f -name Regex",
      "prediction": " Path -name f -name Regexor |"
    },
    {
      "source": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.",
      "target": "grep -v Regex -R File",
      "prediction": "rep -v Regex Filee File"
    },
    {
      "source": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"",
      "target": "sort <( sort -u File ) File File | uniq -u",
      "prediction": " File( sort Fileu File ) < uniq -u"
    },
    {
      "source": "display all the regular files in current folder that belong to the user \"tom\"",
      "target": "find Path -type f -user Regex",
      "prediction": " Path -type f -user Regex%"
    },
    {
      "source": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"",
      "target": "find Path -type d -mtime -Timespan -print0 | xargs -0 -I {} mv -t Directory {}",
      "prediction": " Path -depth d -mtime -Timespan -exec0 | xargs -0 -I {} mv -t Directory {}"
    },
    {
      "source": "Rename \"www_new\" to \"www\" even if \"www\" directory exists",
      "target": "mv -T File File",
      "prediction": "v Filet Directory File"
    },
    {
      "source": "Search the current directory tree for symbolic links to files matching pattern '*/test*'",
      "target": "find -P Path -lname Regex",
      "prediction": " PathL Path -lname Regexfind"
    },
    {
      "source": "Print the current date followed by ' doing stuff'",
      "target": "echo $( date ) Regex Regex",
      "prediction": " $( date ) Regexgex"
    },
    {
      "source": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"",
      "target": "read -p Regex Regex",
      "prediction": " -p Regex Regex"
    },
    {
      "source": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"",
      "target": "ln -s File Regex",
      "prediction": " -s File Regex"
    },
    {
      "source": "Find all empty directories in the current one and delete them",
      "target": "find Path -type d -maxdepth Quantity -empty -print0 | xargs -0 -I {} rmdir {}",
      "prediction": " Path -type d -maxdepth Quantity -empty -delete0 | xargs -0 -I {} rmdir {}"
    },
    {
      "source": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours",
      "target": "find Path -type f -mtime -Timespan",
      "prediction": " Path -m f -mtime -Timespanls"
    },
    {
      "source": "Print the last mounted drive",
      "target": "mount | tail - Quantity | sed Program",
      "prediction": " | tail - Quantity | sed Programe"
    },
    {
      "source": "Find all *.c files under /home",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regexprint"
    },
    {
      "source": "Find all file in current directory with have .c extenstion & have 777 permission . delete then",
      "target": "find Path -name Regex -and -perm -Permission | xargs -I {} rm -r -f {}",
      "prediction": " Path -type Regex -perm -perm PerPermission - xargs -I {} rm {}f -f {}"
    },
    {
      "source": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes",
      "target": "cat File | sed Program | od -c",
      "prediction": " File | tr Program | od -c/"
    },
    {
      "source": "Search the path given as the $absolute_dir_path variable for regular files",
      "target": "find Path -type f -print0",
      "prediction": " Path -type fprint$"
    },
    {
      "source": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.",
      "target": "kill - Regex $( cat File )",
      "prediction": " - Regex $( which File )"
    },
    {
      "source": "find all PDFs owned by user \u201cseamstress\u201d",
      "target": "find Path -user Regex -iname Regex",
      "prediction": " Path -user Regex -iname Regex"
    },
    {
      "source": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.",
      "target": "cd -P Directory",
      "prediction": " -P Directory"
    },
    {
      "source": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case",
      "target": "find Path -maxdepth Quantity -not -iname Regex",
      "prediction": " Path -maxdepth Quantity -not -iname Regex"
    },
    {
      "source": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files",
      "target": "find Path -type f -exec chmod Permission {} \\;",
      "prediction": " Path -type f -exec chmod Permission {} \\;"
    },
    {
      "source": "Search the current directory tree for files whose name is \".note\", case insensitive",
      "target": "find Path -iname Regex | sort",
      "prediction": " Path -iname Regex | sort -r"
    },
    {
      "source": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts",
      "target": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
      "prediction": " Path -name Regex - x Regex Regex | xargs -0 -I {} wc {}"
    },
    {
      "source": "Sets shell option 'nounset'.",
      "target": "shopt -s -o nounset",
      "prediction": "opt -s ns nset"
    },
    {
      "source": "Find all *.[ch] files under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -type Regex -"
    },
    {
      "source": "Find all regular files on the system whose names are 'myfile'",
      "target": "find Path -name Regex -type f -print",
      "prediction": " Path -name Regex -type f -printres"
    },
    {
      "source": "List all files under the current working directory tree",
      "target": "find Path $( pwd ) -type f",
      "prediction": " Path $( pwd ) -type f - - -"
    },
    {
      "source": "search for all the files in the current directory which have been modified in the last 24 hours.",
      "target": "find Path -mtime -Timespan",
      "prediction": " Path -mtime -Timespanls"
    },
    {
      "source": "Find all *.py files/directories under current directory",
      "target": "find Path -name Regex",
      "prediction": " Path -name Regex"
    },
    {
      "source": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"",
      "target": "ln -s -f File Regex",
      "prediction": " -s -f File Regexusr"
    },
    {
      "source": "Find all the files which are modified in last 1 hour in entire file system",
      "target": "find Path -mmin -Quantity",
      "prediction": " Path -mmin -Quantityls"
    },
    {
      "source": "search for a shell script in the current folder and display the current folder path but search from the sub directories",
      "target": "find Path -name Regex -execdir pwd \\;",
      "prediction": " Path -name Regex -max p pwd \\;"
    },
    {
      "source": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script",
      "target": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
      "prediction": " Path -name Regex -execune -or -name Regex -print -exec grep -H -n Regex {} \\;"
    },
    {
      "source": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree",
      "target": "find Path -group Regex -name Regex",
      "prediction": " Path -group Regex -name Regexfind - -"
    },
    {
      "source": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days",
      "target": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
      "prediction": " Path \\( -name Regex -or -name Regex \\) -at f -atime +Timespan -exec rm {} \\;"
    },
    {
      "source": "Print the path of all the network mounts",
      "target": "mount | sed -n -e Program",
      "prediction": " - aw Programn Programe Program"
    },
    {
      "source": "find all text files in user/directory/ which have been modified today and display the last line of these files",
      "target": "find Path -name Regex -mtime Timespan -type f -printf '%p: ' -exec tail - Quantity {} \\;",
      "prediction": " Path -name Regex -mtime Timespan -type f -exec '%T:'% |exec aw -n {} \\;k"
    },
    {
      "source": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.",
      "target": "bzip2 -k -v File",
      "prediction": "zip2 -k -v File"
    },
    {
      "source": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands",
      "target": "set -o pipefail",
      "prediction": " -e erfailx==="
    },
    {
      "source": "Prints all child processes of a process with id 20238.",
      "target": "pstree -p Regex | sed Program | grep Regex | sed Program",
      "prediction": "stree -p Regex | sed Program | grep Regex | sed Program |"
    },
    {
      "source": "Split \"/usr/bin/firefox\" into 1000 files of about equal size",
      "target": "split -n Quantity File",
      "prediction": " -n Quantity File"
    },
    {
      "source": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/",
      "target": "find Path Path Path -type f | xargs -I {} chmod Permission {}",
      "prediction": " Path Path Path Pathtype f - xargs -I {} chmod +mission {} -"
    },
    {
      "source": "find all the files in the entire file system which belong to the group \"staff\"",
      "target": "find Path -group Regex -print",
      "prediction": " Path -group Regex -print - -"
    },
    {
      "source": "find all the html files in the current folder and replace the end of each line with a pattern",
      "target": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
      "prediction": " Path -name f -name Regex | xargs -I {} sed -i Program {}"
    },
    {
      "source": "search for all the files in current folder and display all the file names separated by space",
      "target": "find Path | awk Program",
      "prediction": " Path | pastek Program"
    },
    {
      "source": "Replace all newlines from the contents of \"file\" except the last with spaces",
      "target": "sed Program File",
      "prediction": " - File |s | | -"
    },
    {
      "source": "Find all .gz archives in the current directory tree and check if they are valid",
      "target": "find Path -name Regex -exec gunzip {} \\;",
      "prediction": " Path -name Regex |exec gunzip - +;"
    },
    {
      "source": "find all files in the current folder which are bigger than 10bytes",
      "target": "find Path -size +Size -print",
      "prediction": " Path -size +Sizeprintls"
    },
    {
      "source": "display the count of number html files in the current folder",
      "target": "find Path -name Regex -print | xargs -l -i -I {} wc {} {}",
      "prediction": " Path -name Regex |print0 wargs -I QuantityI -I {} wc -"
    },
    {
      "source": "find and image in current folder (case insensitive search)",
      "target": "find Path -iname Regex",
      "prediction": " Path -iname Regex -"
    },
    {
      "source": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension",
      "target": "find Path -regextype sed -regex Regex",
      "prediction": " Path -regexxtype pos -regex Regex"
    },
    {
      "source": "change the ownership of all directories in the current folder",
      "target": "find Path -type d -exec chown Regex {} \\;",
      "prediction": " Path -type d -exec chown Regex {} \\;"
    },
    {
      "source": "Change ownership of \"/data/db\" to the current user",
      "target": "chown $( whoami ) File",
      "prediction": "own $( whoami ) File"
    },
    {
      "source": "Get a detailed list of all files on the system larger than 10MB",
      "target": "find Path -size +Size -printf \"%12s %t %h/%fn\"",
      "prediction": " Path -size +Size -exec'ss %p\\p\\%f\\ |"
    },
    {
      "source": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"",
      "target": "echo Regex | sed -r Program",
      "prediction": " Regex | rev Programe Program |gex | | | | | | | | | |"
    },
    {
      "source": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno",
      "target": "find Path -type f -name Regex -atime -Timespan -user Regex",
      "prediction": " Path -name f -name Regex -atime -Timespan -user Regex"
    },
    {
      "source": "Find all the files which are accessed in last 1 hour in entire file system",
      "target": "find Path -amin -Quantity",
      "prediction": " Path -amin -Quantity"
    },
    {
      "source": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file",
      "target": "find Path -name Regex -not -samefile Regex -not -newer File",
      "prediction": "findfind Path -name Regex!not -newfile Regex -print -newer File"
    },
    {
      "source": "execute command \"who\" when key \"\\eW\" is pressed",
      "target": "bind -x Regex",
      "prediction": " Rem Regex"
    },
    {
      "source": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"",
      "target": "comm -2 -3 File File",
      "prediction": " -2 -3 File File"
    }
  ]
}